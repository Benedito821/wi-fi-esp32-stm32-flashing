
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000008  080063a0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          000006c0  200000ec  08006484  000200ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200007ac  08006484  000207ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012e68  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003006  00000000  00000000  00032fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014f8  00000000  00000000  00035fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fdd  00000000  00000000  000374c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022f8e  00000000  00000000  000384a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013b2c  00000000  00000000  0005b433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d80e2  00000000  00000000  0006ef5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005e50  00000000  00000000  00147044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  0014ce94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ec 	.word	0x200000ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08005f64 	.word	0x08005f64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f0 	.word	0x200000f0
 800017c:	08005f64 	.word	0x08005f64

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
	ETX_OTA_EX_ ret = ETX_OTA_EX_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	737b      	strb	r3, [r7, #13]
	uint16_t len = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	81fb      	strh	r3, [r7, #14]
	char* ota_response[2] = {"ACK0","NACK"} ;
 800052a:	4a45      	ldr	r2, [pc, #276]	; (8000640 <etx_ota_download_and_flash+0x124>)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000532:	e883 0003 	stmia.w	r3, {r0, r1}

	printf("Reading the file size ...\r\n");
 8000536:	4843      	ldr	r0, [pc, #268]	; (8000644 <etx_ota_download_and_flash+0x128>)
 8000538:	f004 feaa 	bl	8005290 <puts>

	HAL_UART_Receive(&huart1, Rx_Buffer, 10, HAL_MAX_DELAY );
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	220a      	movs	r2, #10
 8000542:	4941      	ldr	r1, [pc, #260]	; (8000648 <etx_ota_download_and_flash+0x12c>)
 8000544:	4841      	ldr	r0, [pc, #260]	; (800064c <etx_ota_download_and_flash+0x130>)
 8000546:	f003 fb35 	bl	8003bb4 <HAL_UART_Receive>

	if((ota_fw_total_size = (uint32_t)atoi((char*)Rx_Buffer)) > 0)
 800054a:	483f      	ldr	r0, [pc, #252]	; (8000648 <etx_ota_download_and_flash+0x12c>)
 800054c:	f004 fce8 	bl	8004f20 <atoi>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <etx_ota_download_and_flash+0x134>)
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	4b3d      	ldr	r3, [pc, #244]	; (8000650 <etx_ota_download_and_flash+0x134>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d013      	beq.n	8000588 <etx_ota_download_and_flash+0x6c>
	{
	  printf("Total file size %ld Bytes\r\n",ota_fw_total_size);
 8000560:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <etx_ota_download_and_flash+0x134>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	483b      	ldr	r0, [pc, #236]	; (8000654 <etx_ota_download_and_flash+0x138>)
 8000568:	f004 fe2c 	bl	80051c4 <iprintf>
	  printf("Sending ACK...\r\n");
 800056c:	483a      	ldr	r0, [pc, #232]	; (8000658 <etx_ota_download_and_flash+0x13c>)
 800056e:	f004 fe8f 	bl	8005290 <puts>
	  printf("Waiting for the chunks...\r\n");
 8000572:	483a      	ldr	r0, [pc, #232]	; (800065c <etx_ota_download_and_flash+0x140>)
 8000574:	f004 fe8c 	bl	8005290 <puts>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ota_response[0], sizeof(ota_response[0]), HAL_MAX_DELAY );//send the ACK
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	2204      	movs	r2, #4
 8000580:	4832      	ldr	r0, [pc, #200]	; (800064c <etx_ota_download_and_flash+0x130>)
 8000582:	f003 fa89 	bl	8003a98 <HAL_UART_Transmit>
 8000586:	e00b      	b.n	80005a0 <etx_ota_download_and_flash+0x84>
	}
	else
	{
	  printf("Sending NACK...\r\n");
 8000588:	4835      	ldr	r0, [pc, #212]	; (8000660 <etx_ota_download_and_flash+0x144>)
 800058a:	f004 fe81 	bl	8005290 <puts>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ota_response[1], sizeof(ota_response[1]), HAL_MAX_DELAY );
 800058e:	68b9      	ldr	r1, [r7, #8]
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2204      	movs	r2, #4
 8000596:	482d      	ldr	r0, [pc, #180]	; (800064c <etx_ota_download_and_flash+0x130>)
 8000598:	f003 fa7e 	bl	8003a98 <HAL_UART_Transmit>
	  return ETX_OTA_EX_ERR;
 800059c:	2301      	movs	r3, #1
 800059e:	e04b      	b.n	8000638 <etx_ota_download_and_flash+0x11c>
	}

	do
	{
		if(!is_the_last_chunk)
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <etx_ota_download_and_flash+0x148>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f083 0301 	eor.w	r3, r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00b      	beq.n	80005c6 <etx_ota_download_and_flash+0xaa>
		{
			HAL_UART_Receive(&huart1, Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE, HAL_MAX_DELAY );
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b6:	4924      	ldr	r1, [pc, #144]	; (8000648 <etx_ota_download_and_flash+0x12c>)
 80005b8:	4824      	ldr	r0, [pc, #144]	; (800064c <etx_ota_download_and_flash+0x130>)
 80005ba:	f003 fafb 	bl	8003bb4 <HAL_UART_Receive>
			len = (uint16_t)sizeof(Rx_Buffer);
 80005be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c2:	81fb      	strh	r3, [r7, #14]
 80005c4:	e00a      	b.n	80005dc <etx_ota_download_and_flash+0xc0>
		}
		else
		{
			HAL_UART_Receive(&huart1, Rx_Buffer, 642, HAL_MAX_DELAY );
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	f240 2282 	movw	r2, #642	; 0x282
 80005ce:	491e      	ldr	r1, [pc, #120]	; (8000648 <etx_ota_download_and_flash+0x12c>)
 80005d0:	481e      	ldr	r0, [pc, #120]	; (800064c <etx_ota_download_and_flash+0x130>)
 80005d2:	f003 faef 	bl	8003bb4 <HAL_UART_Receive>
			len = 642;
 80005d6:	f240 2382 	movw	r3, #642	; 0x282
 80005da:	81fb      	strh	r3, [r7, #14]
		}
		if( len <= ETX_OTA_PACKET_MAX_SIZE && len>0)
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005e2:	d823      	bhi.n	800062c <etx_ota_download_and_flash+0x110>
 80005e4:	89fb      	ldrh	r3, [r7, #14]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d020      	beq.n	800062c <etx_ota_download_and_flash+0x110>
		{
		  printf("Received chunk of length %d\r\n",len);
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	4619      	mov	r1, r3
 80005ee:	481e      	ldr	r0, [pc, #120]	; (8000668 <etx_ota_download_and_flash+0x14c>)
 80005f0:	f004 fde8 	bl	80051c4 <iprintf>
		  ret = etx_process_data( Rx_Buffer, len );
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <etx_ota_download_and_flash+0x12c>)
 80005fa:	f000 f83b 	bl	8000674 <etx_process_data>
 80005fe:	4603      	mov	r3, r0
 8000600:	737b      	strb	r3, [r7, #13]
		  memset(Rx_Buffer,'\0',ETX_OTA_PACKET_MAX_SIZE);
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	2100      	movs	r1, #0
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <etx_ota_download_and_flash+0x12c>)
 800060a:	f004 ff21 	bl	8005450 <memset>
		  printf("Sending ACK...\r\n");
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <etx_ota_download_and_flash+0x13c>)
 8000610:	f004 fe3e 	bl	8005290 <puts>
		  HAL_UART_Transmit(&huart1, (uint8_t *)ota_response[0], sizeof(ota_response[1]), HAL_MAX_DELAY );
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2204      	movs	r2, #4
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <etx_ota_download_and_flash+0x130>)
 800061e:	f003 fa3b 	bl	8003a98 <HAL_UART_Transmit>
		else
		{
		  printf("No chunk received!\r\n");
		  return ETX_OTA_EX_ERR;
		}
	}while( ota_state != ETX_OTA_STATE_END );
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <etx_ota_download_and_flash+0x150>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d1ba      	bne.n	80005a0 <etx_ota_download_and_flash+0x84>
 800062a:	e004      	b.n	8000636 <etx_ota_download_and_flash+0x11a>
		  printf("No chunk received!\r\n");
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <etx_ota_download_and_flash+0x154>)
 800062e:	f004 fe2f 	bl	8005290 <puts>
		  return ETX_OTA_EX_ERR;
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <etx_ota_download_and_flash+0x11c>
  return ret;
 8000636:	7b7b      	ldrb	r3, [r7, #13]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	08006044 	.word	0x08006044
 8000644:	08005f88 	.word	0x08005f88
 8000648:	20000108 	.word	0x20000108
 800064c:	200005b0 	.word	0x200005b0
 8000650:	2000050c 	.word	0x2000050c
 8000654:	08005fa4 	.word	0x08005fa4
 8000658:	08005fc0 	.word	0x08005fc0
 800065c:	08005fd0 	.word	0x08005fd0
 8000660:	08005fec 	.word	0x08005fec
 8000664:	20000514 	.word	0x20000514
 8000668:	08006000 	.word	0x08006000
 800066c:	20000508 	.word	0x20000508
 8000670:	08006020 	.word	0x08006020

08000674 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	807b      	strh	r3, [r7, #2]
	  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000680:	2301      	movs	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]

	  if( write_data_to_flash_app( buf, len, ( ota_fw_received_size == 0) ) == HAL_OK )
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <etx_process_data+0xac>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf0c      	ite	eq
 800068c:	2301      	moveq	r3, #1
 800068e:	2300      	movne	r3, #0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	887b      	ldrh	r3, [r7, #2]
 8000694:	4619      	mov	r1, r3
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f84c 	bl	8000734 <write_data_to_flash_app>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d137      	bne.n	8000712 <etx_process_data+0x9e>
	  {

			if( ota_fw_received_size >= 19028 )
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <etx_process_data+0xac>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f644 2253 	movw	r2, #19027	; 0x4a53
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d906      	bls.n	80006bc <etx_process_data+0x48>

//			if( ota_fw_received_size >= ota_fw_total_size )
			{
			  ota_state = ETX_OTA_STATE_END;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <etx_process_data+0xb0>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	701a      	strb	r2, [r3, #0]
			  return ret = ETX_OTA_EX_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	e02d      	b.n	8000718 <etx_process_data+0xa4>
			}



			if(ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE < ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE)
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <etx_process_data+0xac>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	0a9a      	lsrs	r2, r3, #10
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <etx_process_data+0xb4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	0a9b      	lsrs	r3, r3, #10
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d20a      	bcs.n	80006e2 <etx_process_data+0x6e>
			{
				printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <etx_process_data+0xac>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	0a99      	lsrs	r1, r3, #10
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <etx_process_data+0xb4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	0a9b      	lsrs	r3, r3, #10
 80006d8:	461a      	mov	r2, r3
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <etx_process_data+0xb8>)
 80006dc:	f004 fd72 	bl	80051c4 <iprintf>
 80006e0:	e014      	b.n	800070c <etx_process_data+0x98>
			}
			else if(ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE == ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE )
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <etx_process_data+0xac>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	0a9a      	lsrs	r2, r3, #10
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <etx_process_data+0xb4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	0a9b      	lsrs	r3, r3, #10
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d10c      	bne.n	800070c <etx_process_data+0x98>
			{
				printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <etx_process_data+0xac>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	0a99      	lsrs	r1, r3, #10
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <etx_process_data+0xb4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	0a9b      	lsrs	r3, r3, #10
 80006fe:	461a      	mov	r2, r3
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <etx_process_data+0xb8>)
 8000702:	f004 fd5f 	bl	80051c4 <iprintf>
				is_the_last_chunk = true;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <etx_process_data+0xbc>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
			}


			ret = ETX_OTA_EX_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e001      	b.n	8000716 <etx_process_data+0xa2>
	  }
	  else
	  {
			ret = ETX_OTA_EX_ERR;
 8000712:	2301      	movs	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
	  }
	  return ret;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000510 	.word	0x20000510
 8000724:	20000508 	.word	0x20000508
 8000728:	2000050c 	.word	0x2000050c
 800072c:	0800604c 	.word	0x0800604c
 8000730:	20000514 	.word	0x20000514

08000734 <write_data_to_flash_app>:


static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        	  uint16_t data_len,
											 bool is_first_block)
{
 8000734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000738:	b0a7      	sub	sp, #156	; 0x9c
 800073a:	af00      	add	r7, sp, #0
 800073c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800073e:	460b      	mov	r3, r1
 8000740:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000744:	4613      	mov	r3, r2
 8000746:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  HAL_StatusTypeDef ret;
  uint64_t data_temp = 0;
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	f04f 0300 	mov.w	r3, #0
 8000752:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  uint32_t FirstPage = 0, NbOfPages = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  do
  {
    ret = HAL_FLASH_Unlock();
 8000762:	f001 f83f 	bl	80017e4 <HAL_FLASH_Unlock>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if( ret != HAL_OK )
 800076c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000770:	2b00      	cmp	r3, #0
 8000772:	f040 812e 	bne.w	80009d2 <write_data_to_flash_app+0x29e>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000776:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800077a:	2b00      	cmp	r3, #0
 800077c:	d036      	beq.n	80007ec <write_data_to_flash_app+0xb8>
    {
       ota_state = ETX_OTA_STATE_FLASHING;
 800077e:	4a9a      	ldr	r2, [pc, #616]	; (80009e8 <write_data_to_flash_app+0x2b4>)
 8000780:	2302      	movs	r3, #2
 8000782:	7013      	strb	r3, [r2, #0]
       printf("Erasing the Flash memory...\r\n");
 8000784:	4899      	ldr	r0, [pc, #612]	; (80009ec <write_data_to_flash_app+0x2b8>)
 8000786:	f004 fd83 	bl	8005290 <puts>

       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800078a:	4a99      	ldr	r2, [pc, #612]	; (80009f0 <write_data_to_flash_app+0x2bc>)
 800078c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000790:	6113      	str	r3, [r2, #16]

       FirstPage = GetPage(FLASH_USER_START_ADDR);
 8000792:	4898      	ldr	r0, [pc, #608]	; (80009f4 <write_data_to_flash_app+0x2c0>)
 8000794:	f000 f93a 	bl	8000a0c <GetPage>
 8000798:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

       NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 800079c:	4896      	ldr	r0, [pc, #600]	; (80009f8 <write_data_to_flash_app+0x2c4>)
 800079e:	f000 f935 	bl	8000a0c <GetPage>
 80007a2:	4602      	mov	r2, r0
 80007a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


       FLASH_EraseInitTypeDef EraseInitStruct;
       uint32_t SectorError;

       EraseInitStruct.TypeErase       = FLASH_TYPEERASE_PAGES;
 80007b0:	2302      	movs	r3, #2
 80007b2:	677b      	str	r3, [r7, #116]	; 0x74
       EraseInitStruct.Page            = FirstPage;
 80007b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007b8:	67bb      	str	r3, [r7, #120]	; 0x78
       EraseInitStruct.NbPages         = NbOfPages;
 80007ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007be:	67fb      	str	r3, [r7, #124]	; 0x7c

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80007c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80007c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 f8dc 	bl	8001988 <HAL_FLASHEx_Erase>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if( ret != HAL_OK )
 80007d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <write_data_to_flash_app+0xb2>
      {
    	  printf("Flash Erase Error\r\n");
 80007de:	4887      	ldr	r0, [pc, #540]	; (80009fc <write_data_to_flash_app+0x2c8>)
 80007e0:	f004 fd56 	bl	8005290 <puts>
 80007e4:	e0f8      	b.n	80009d8 <write_data_to_flash_app+0x2a4>
    	  break;
      }

      printf("Flash memory successfuly erased...\r\n");
 80007e6:	4886      	ldr	r0, [pc, #536]	; (8000a00 <write_data_to_flash_app+0x2cc>)
 80007e8:	f004 fd52 	bl	8005290 <puts>
    }

//    ota_fw_received_size += data_len;
    for(int i = 0; i <= data_len-8; i += 8 )
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007f2:	e0d9      	b.n	80009a8 <write_data_to_flash_app+0x274>
    {
      data_temp = (uint64_t)data[i+7]<<56 |
 80007f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007f8:	1dda      	adds	r2, r3, #7
 80007fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2200      	movs	r2, #0
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
 8000806:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	f04f 0100 	mov.w	r1, #0
 8000810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000812:	0619      	lsls	r1, r3, #24
 8000814:	2000      	movs	r0, #0
    		  	  (uint64_t)data[i+6]<<48 |
 8000816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800081a:	1d9a      	adds	r2, r3, #6
 800081c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2200      	movs	r2, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
 8000828:	637a      	str	r2, [r7, #52]	; 0x34
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8000834:	0433      	lsls	r3, r6, #16
 8000836:	2200      	movs	r2, #0
      data_temp = (uint64_t)data[i+7]<<56 |
 8000838:	ea40 0602 	orr.w	r6, r0, r2
 800083c:	653e      	str	r6, [r7, #80]	; 0x50
 800083e:	430b      	orrs	r3, r1
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
				  (uint64_t)data[i+5]<<40 |
 8000842:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000846:	1d5a      	adds	r2, r3, #5
 8000848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2200      	movs	r2, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
 8000854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000860:	020b      	lsls	r3, r1, #8
 8000862:	2200      	movs	r2, #0
    		  	  (uint64_t)data[i+6]<<48 |
 8000864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000866:	4311      	orrs	r1, r2
 8000868:	64b9      	str	r1, [r7, #72]	; 0x48
 800086a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800086c:	430b      	orrs	r3, r1
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
				  (uint64_t)data[i+4]<<32 |
 8000870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000874:	1d1a      	adds	r2, r3, #4
 8000876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2200      	movs	r2, #0
 8000880:	623b      	str	r3, [r7, #32]
 8000882:	627a      	str	r2, [r7, #36]	; 0x24
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	6a39      	ldr	r1, [r7, #32]
 800088e:	000b      	movs	r3, r1
 8000890:	2200      	movs	r2, #0
				  (uint64_t)data[i+5]<<40 |
 8000892:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000894:	4311      	orrs	r1, r2
 8000896:	6439      	str	r1, [r7, #64]	; 0x40
 8000898:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800089a:	430b      	orrs	r3, r1
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
				  (uint64_t)data[i+3]<<24 |
 800089e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008a2:	1cda      	adds	r2, r3, #3
 80008a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	61fa      	str	r2, [r7, #28]
 80008b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80008b6:	460b      	mov	r3, r1
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	460b      	mov	r3, r1
 80008be:	061b      	lsls	r3, r3, #24
 80008c0:	613b      	str	r3, [r7, #16]
				  (uint64_t)data[i+4]<<32 |
 80008c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008c8:	4602      	mov	r2, r0
 80008ca:	ea43 0a02 	orr.w	sl, r3, r2
 80008ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008d0:	460a      	mov	r2, r1
 80008d2:	ea43 0b02 	orr.w	fp, r3, r2
				  (uint64_t)data[i+2]<<16 |
 80008d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008da:	1c9a      	adds	r2, r3, #2
 80008dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2200      	movs	r2, #0
 80008e6:	663b      	str	r3, [r7, #96]	; 0x60
 80008e8:	667a      	str	r2, [r7, #100]	; 0x64
 80008ea:	f04f 0200 	mov.w	r2, #0
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80008f4:	040b      	lsls	r3, r1, #16
 80008f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80008f8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80008fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80008fe:	040a      	lsls	r2, r1, #16
				  (uint64_t)data[i+3]<<24 |
 8000900:	ea4a 0802 	orr.w	r8, sl, r2
 8000904:	ea4b 0903 	orr.w	r9, fp, r3
				  (uint64_t)data[i+1]<<8  |
 8000908:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2200      	movs	r2, #0
 8000918:	65bb      	str	r3, [r7, #88]	; 0x58
 800091a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000926:	020b      	lsls	r3, r1, #8
 8000928:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800092a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800092e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000930:	020a      	lsls	r2, r1, #8
				  (uint64_t)data[i+2]<<16 |
 8000932:	ea48 0402 	orr.w	r4, r8, r2
 8000936:	ea49 0503 	orr.w	r5, r9, r3
				  (uint64_t)data[i]  <<0  ;
 800093a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800093e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2200      	movs	r2, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	60fa      	str	r2, [r7, #12]
      data_temp = (uint64_t)data[i+7]<<56 |
 800094c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000950:	460b      	mov	r3, r1
 8000952:	4323      	orrs	r3, r4
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4613      	mov	r3, r2
 8000958:	432b      	orrs	r3, r5
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000960:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <write_data_to_flash_app+0x2d0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800096c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8000970:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8000974:	2001      	movs	r0, #1
 8000976:	f000 fef1 	bl	800175c <HAL_FLASH_Program>
 800097a:	4603      	mov	r3, r0
 800097c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
							   data_temp
                             );
      if( ret == HAL_OK )
 8000980:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <write_data_to_flash_app+0x262>
      {
        //update the data count
        ota_fw_received_size += 8;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <write_data_to_flash_app+0x2d0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f103 0208 	add.w	r2, r3, #8
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <write_data_to_flash_app+0x2d0>)
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e003      	b.n	800099e <write_data_to_flash_app+0x26a>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <write_data_to_flash_app+0x2d4>)
 8000998:	f004 fc7a 	bl	8005290 <puts>
        break;
 800099c:	e00c      	b.n	80009b8 <write_data_to_flash_app+0x284>
    for(int i = 0; i <= data_len-8; i += 8 )
 800099e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009a2:	3308      	adds	r3, #8
 80009a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80009a8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009ac:	1fda      	subs	r2, r3, #7
 80009ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009b2:	4293      	cmp	r3, r2
 80009b4:	f6ff af1e 	blt.w	80007f4 <write_data_to_flash_app+0xc0>
      }
    }

    if( ret != HAL_OK )
 80009b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10a      	bne.n	80009d6 <write_data_to_flash_app+0x2a2>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 80009c0:	f000 ff32 	bl	8001828 <HAL_FLASH_Lock>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if( ret != HAL_OK )
 80009ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	e002      	b.n	80009d8 <write_data_to_flash_app+0x2a4>
      break;
 80009d2:	bf00      	nop
 80009d4:	e000      	b.n	80009d8 <write_data_to_flash_app+0x2a4>
      break;
 80009d6:	bf00      	nop
      break;
    }

  }while( false );

  return ret;
 80009d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80009dc:	4618      	mov	r0, r3
 80009de:	379c      	adds	r7, #156	; 0x9c
 80009e0:	46bd      	mov	sp, r7
 80009e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e6:	bf00      	nop
 80009e8:	20000508 	.word	0x20000508
 80009ec:	08006058 	.word	0x08006058
 80009f0:	58004000 	.word	0x58004000
 80009f4:	08040000 	.word	0x08040000
 80009f8:	0807ffff 	.word	0x0807ffff
 80009fc:	08006078 	.word	0x08006078
 8000a00:	0800608c 	.word	0x0800608c
 8000a04:	20000510 	.word	0x20000510
 8000a08:	080060b0 	.word	0x080060b0

08000a0c <GetPage>:

static uint32_t GetPage(uint32_t Addr)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000a1a:	0b1b      	lsrs	r3, r3, #12
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a70:	2004      	movs	r0, #4
 8000a72:	f7ff ffd9 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff ffd6 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ffd3 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2008      	movs	r0, #8
 8000a84:	f7ff ffd0 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_GREEN_Pin|LD3_RED_Pin|LD1_BLUE_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2123      	movs	r1, #35	; 0x23
 8000a8c:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_GPIO_Init+0x84>)
 8000a8e:	f001 f9af 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a92:	2310      	movs	r3, #16
 8000a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <MX_GPIO_Init+0x88>)
 8000aa4:	f001 f834 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_GREEN_Pin|LD3_RED_Pin|LD1_BLUE_Pin;
 8000aa8:	2323      	movs	r3, #35	; 0x23
 8000aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPIO_Init+0x84>)
 8000abe:	f001 f827 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0x8c>)
 8000ad4:	f001 f81c 	bl	8001b10 <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000c00 	.word	0x48000c00

08000aec <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch,FILE *f)
#endif
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)&ch,1,100);
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2201      	movs	r2, #1
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <__io_putchar+0x20>)
 8000afc:	f002 ffcc 	bl	8003a98 <HAL_UART_Transmit>
	return ch;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000051c 	.word	0x2000051c

08000b10 <go_to_application>:

static void go_to_application(void){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	printf("Starting the application  ...\n");
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <go_to_application+0x28>)
 8000b18:	f004 fbba 	bl	8005290 <puts>

	void (*app_reset_handler)(void) = (void*) (*(volatile uint32_t*)(0x08040000 + 4));
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <go_to_application+0x2c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(LD2_GREEN_GPIO_Port,LD2_GREEN_Pin,GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <go_to_application+0x30>)
 8000b28:	f001 f962 	bl	8001df0 <HAL_GPIO_WritePin>

	app_reset_handler(); //call the app reset handler
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4798      	blx	r3

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	080060c4 	.word	0x080060c4
 8000b3c:	08040004 	.word	0x08040004
 8000b40:	48000400 	.word	0x48000400

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fb90 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f834 	bl	8000bb8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b50:	f000 f888 	bl	8000c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f7ff ff82 	bl	8000a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b58:	f000 fa7c 	bl	8001054 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000b5c:	f000 fa2c 	bl	8000fb8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_Buffer, sizeof(Rx_Buffer));
//  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);

  printf("Bootloader %d.%d start\n",BL_VERSION,BL_PATCH);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <main+0x60>)
 8000b66:	f004 fb2d 	bl	80051c4 <iprintf>
  HAL_GPIO_WritePin(LD2_GREEN_GPIO_Port,LD2_GREEN_Pin,GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <main+0x64>)
 8000b70:	f001 f93e 	bl	8001df0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b78:	f000 fbfe 	bl	8001378 <HAL_Delay>

//  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET )
//    {}
      printf("Starting Firmware Download!!!\r\n");
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <main+0x68>)
 8000b7e:	f004 fb87 	bl	8005290 <puts>
      /* OTA Request. Receive the data from the UART4 and flash */
      if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000b82:	f7ff fccb 	bl	800051c <etx_ota_download_and_flash>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <main+0x50>
      {
        /* Error. Don't process. */
        printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <main+0x6c>)
 8000b8e:	f004 fb7f 	bl	8005290 <puts>
        while( 1 );
 8000b92:	e7fe      	b.n	8000b92 <main+0x4e>
      }
      else
      {
        /* Reset to load the new application */
        printf("Firmware update is done!!! Rebooting...\r\n");
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <main+0x70>)
 8000b96:	f004 fb7b 	bl	8005290 <puts>
        go_to_application();
 8000b9a:	f7ff ffb9 	bl	8000b10 <go_to_application>
//        HAL_NVIC_SystemReset();
      }

      go_to_application();
 8000b9e:	f7ff ffb7 	bl	8000b10 <go_to_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <main+0x5e>
 8000ba4:	080060e4 	.word	0x080060e4
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	080060fc 	.word	0x080060fc
 8000bb0:	0800611c 	.word	0x0800611c
 8000bb4:	0800613c 	.word	0x0800613c

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09a      	sub	sp, #104	; 0x68
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	2248      	movs	r2, #72	; 0x48
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fc42 	bl	8005450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <SystemClock_Config+0xa8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <SystemClock_Config+0xa8>)
 8000be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <SystemClock_Config+0xa8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fc96 	bl	8002548 <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c22:	f000 f83c 	bl	8000c9e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c26:	236f      	movs	r3, #111	; 0x6f
 8000c28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fff2 	bl	8002c30 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c52:	f000 f824 	bl	8000c9e <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3768      	adds	r7, #104	; 0x68
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58000400 	.word	0x58000400

08000c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2250      	movs	r2, #80	; 0x50
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 fbed 	bl	8005450 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fc0f 	bl	80034aa <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000c92:	f000 f804 	bl	8000c9e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000c96:	bf00      	nop
 8000c98:	3750      	adds	r7, #80	; 0x50
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca2:	b672      	cpsid	i
}
 8000ca4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cba:	e7fe      	b.n	8000cba <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <BusFault_Handler+0x4>

08000cce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <UsageFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 fb0d 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <USART1_IRQHandler+0x10>)
 8000d12:	f003 f817 	bl	8003d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200005b0 	.word	0x200005b0

08000d20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <LPUART1_IRQHandler+0x10>)
 8000d26:	f003 f80d 	bl	8003d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000051c 	.word	0x2000051c

08000d34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
  }

  return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff feaf 	bl	8000aec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
  }
  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f004 fb54 	bl	80054ec <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20030000 	.word	0x20030000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000518 	.word	0x20000518
 8000e78:	200007b0 	.word	0x200007b0

08000e7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <SystemInit+0x98>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <SystemInit+0x98>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ea8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <SystemInit+0x9c>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec6:	f023 0305 	bic.w	r3, r3, #5
 8000eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <SystemInit+0xa0>)
 8000ee8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <SystemInit+0xa0>)
 8000ef0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00
 8000f18:	faf6fefb 	.word	0xfaf6fefb
 8000f1c:	22041000 	.word	0x22041000

08000f20 <LL_AHB2_GRP1_EnableClock>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f44:	68fb      	ldr	r3, [r7, #12]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fbe:	4a24      	ldr	r2, [pc, #144]	; (8001050 <MX_LPUART1_UART_Init+0x98>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8001002:	f002 fcf9 	bl	80039f8 <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800100c:	f7ff fe47 	bl	8000c9e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001010:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 8001016:	f003 feb8 	bl	8004d8a <HAL_UARTEx_SetTxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001020:	f7ff fe3d 	bl	8000c9e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001024:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 800102a:	f003 feec 	bl	8004e06 <HAL_UARTEx_SetRxFifoThreshold>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8001034:	f7ff fe33 	bl	8000c9e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_LPUART1_UART_Init+0x94>)
 800103a:	f003 fe6d 	bl	8004d18 <HAL_UARTEx_DisableFifoMode>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 8001044:	f7ff fe2b 	bl	8000c9e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000051c 	.word	0x2000051c
 8001050:	40008000 	.word	0x40008000

08001054 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 800105a:	4a24      	ldr	r2, [pc, #144]	; (80010ec <MX_USART1_UART_Init+0x98>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109c:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 800109e:	f002 fcab 	bl	80039f8 <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010a8:	f7ff fdf9 	bl	8000c9e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80010ac:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 80010b2:	f003 fe6a 	bl	8004d8a <HAL_UARTEx_SetTxFifoThreshold>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80010bc:	f7ff fdef 	bl	8000c9e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80010c0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 80010c6:	f003 fe9e 	bl	8004e06 <HAL_UARTEx_SetRxFifoThreshold>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80010d0:	f7ff fde5 	bl	8000c9e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_USART1_UART_Init+0x94>)
 80010d6:	f003 fe1f 	bl	8004d18 <HAL_UARTEx_DisableFifoMode>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80010e0:	f7ff fddd 	bl	8000c9e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200005b0 	.word	0x200005b0
 80010ec:	40013800 	.word	0x40013800

080010f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09c      	sub	sp, #112	; 0x70
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2250      	movs	r2, #80	; 0x50
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f004 f99d 	bl	8005450 <memset>
  if(uartHandle->Instance==LPUART1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a33      	ldr	r2, [pc, #204]	; (80011e8 <HAL_UART_MspInit+0xf8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d12c      	bne.n	800117a <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001120:	2302      	movs	r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f9bc 	bl	80034aa <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff fdb1 	bl	8000c9e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff ff08 	bl	8000f52 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2004      	movs	r0, #4
 8001144:	f7ff feec 	bl	8000f20 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001148:	2303      	movs	r3, #3
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001158:	2308      	movs	r3, #8
 800115a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001160:	4619      	mov	r1, r3
 8001162:	4822      	ldr	r0, [pc, #136]	; (80011ec <HAL_UART_MspInit+0xfc>)
 8001164:	f000 fcd4 	bl	8001b10 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2025      	movs	r0, #37	; 0x25
 800116e:	f000 fa02 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001172:	2025      	movs	r0, #37	; 0x25
 8001174:	f000 fa19 	bl	80015aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001178:	e031      	b.n	80011de <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_UART_MspInit+0x100>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d12c      	bne.n	80011de <HAL_UART_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001184:	2301      	movs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f98a 	bl	80034aa <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 800119c:	f7ff fd7f 	bl	8000c9e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011a4:	f7ff feee 	bl	8000f84 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff feb9 	bl	8000f20 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011be:	2307      	movs	r3, #7
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011c6:	4619      	mov	r1, r3
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <HAL_UART_MspInit+0x104>)
 80011ca:	f000 fca1 	bl	8001b10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2024      	movs	r0, #36	; 0x24
 80011d4:	f000 f9cf 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011d8:	2024      	movs	r0, #36	; 0x24
 80011da:	f000 f9e6 	bl	80015aa <HAL_NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3770      	adds	r7, #112	; 0x70
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40008000 	.word	0x40008000
 80011ec:	48000800 	.word	0x48000800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	48000400 	.word	0x48000400

080011f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fc:	3304      	adds	r3, #4

080011fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001200:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001202:	d3f9      	bcc.n	80011f8 <CopyDataInit>
  bx lr
 8001204:	4770      	bx	lr

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001206:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001208:	3004      	adds	r0, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800120a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>
  bx lr
 800120e:	4770      	bx	lr

08001210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001214:	f7ff fe32 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <LoopForever+0x6>)
 800121a:	490c      	ldr	r1, [pc, #48]	; (800124c <LoopForever+0xa>)
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <LoopForever+0xe>)
 800121e:	2300      	movs	r3, #0
 8001220:	f7ff ffed 	bl	80011fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopForever+0x12>)
 8001226:	490c      	ldr	r1, [pc, #48]	; (8001258 <LoopForever+0x16>)
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <LoopForever+0x1a>)
 800122a:	2300      	movs	r3, #0
 800122c:	f7ff ffe7 	bl	80011fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <LoopForever+0x1e>)
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <LoopForever+0x22>)
 8001234:	2300      	movs	r3, #0
 8001236:	f7ff ffe8 	bl	800120a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123a:	f004 f95d 	bl	80054f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800123e:	f7ff fc81 	bl	8000b44 <main>

08001242 <LoopForever>:

LoopForever:
  b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001248:	20000008 	.word	0x20000008
 800124c:	200000ec 	.word	0x200000ec
 8001250:	080063a0 	.word	0x080063a0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001254:	20030000 	.word	0x20030000
 8001258:	20030000 	.word	0x20030000
 800125c:	08006484 	.word	0x08006484
  INIT_BSS _sbss, _ebss
 8001260:	200000ec 	.word	0x200000ec
 8001264:	200007ac 	.word	0x200007ac

08001268 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_Init+0x3c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_Init+0x3c>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	2003      	movs	r0, #3
 8001284:	f000 f96c 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f80f 	bl	80012ac <HAL_InitTick>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	e001      	b.n	800129e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800129a:	f7ff fd05 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800129e:	79fb      	ldrb	r3, [r7, #7]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58004000 	.word	0x58004000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_InitTick+0x6c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d024      	beq.n	800130a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c0:	f001 fe62 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_InitTick+0x6c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f974 	bl	80015c6 <HAL_SYSTICK_Config>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d809      	bhi.n	80012fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295
 80012f2:	f000 f940 	bl	8001576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_InitTick+0x70>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e007      	b.n	800130e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e004      	b.n	800130e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000010 	.word	0x20000010
 800131c:	2000000c 	.word	0x2000000c

08001320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000010 	.word	0x20000010
 8001344:	20000644 	.word	0x20000644

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000644 	.word	0x20000644

08001360 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTickPrio+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000000c 	.word	0x2000000c

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffe2 	bl	8001348 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffd2 	bl	8001348 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000010 	.word	0x20000010

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff40 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff90 	bl	80014b4 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff33 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa4 	bl	800151c <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e04f      	b.n	8001690 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e040      	b.n	8001690 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020e 	bic.w	r2, r2, #14
 800161c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 021c 	and.w	r2, r3, #28
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800165a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001672:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800167c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d005      	beq.n	80016c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2204      	movs	r2, #4
 80016b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e047      	b.n	8001750 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 020e 	bic.w	r2, r2, #14
 80016ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f003 021c 	and.w	r2, r3, #28
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800170c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001724:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800172e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
    }
  }
  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_FLASH_Program+0x80>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_FLASH_Program+0x1a>
 8001772:	2302      	movs	r3, #2
 8001774:	e02d      	b.n	80017d2 <HAL_FLASH_Program+0x76>
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_FLASH_Program+0x80>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_FLASH_Program+0x80>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001786:	f000 f869 	bl	800185c <FLASH_WaitForLastOperation>
 800178a:	4603      	mov	r3, r0
 800178c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11a      	bne.n	80017ca <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d105      	bne.n	80017a6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800179a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800179e:	68b8      	ldr	r0, [r7, #8]
 80017a0:	f000 f8cc 	bl	800193c <FLASH_Program_DoubleWord>
 80017a4:	e004      	b.n	80017b0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	68b8      	ldr	r0, [r7, #8]
 80017ac:	f004 fbe8 	bl	8005f80 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b4:	f000 f852 	bl	800185c <FLASH_WaitForLastOperation>
 80017b8:	4603      	mov	r3, r0
 80017ba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_FLASH_Program+0x84>)
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4906      	ldr	r1, [pc, #24]	; (80017e0 <HAL_FLASH_Program+0x84>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_FLASH_Program+0x80>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000648 	.word	0x20000648
 80017e0:	58004000 	.word	0x58004000

080017e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_FLASH_Unlock+0x38>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da0b      	bge.n	800180e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_FLASH_Unlock+0x38>)
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_FLASH_Unlock+0x3c>)
 80017fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_FLASH_Unlock+0x38>)
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_FLASH_Unlock+0x40>)
 8001800:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_FLASH_Unlock+0x38>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da01      	bge.n	800180e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800180e:	79fb      	ldrb	r3, [r7, #7]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58004000 	.word	0x58004000
 8001820:	45670123 	.word	0x45670123
 8001824:	cdef89ab 	.word	0xcdef89ab

08001828 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_FLASH_Lock+0x30>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_FLASH_Lock+0x30>)
 8001838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800183c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_FLASH_Lock+0x30>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db01      	blt.n	800184a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800184a:	79fb      	ldrb	r3, [r7, #7]
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	58004000 	.word	0x58004000

0800185c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fd70 	bl	8001348 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800186a:	e009      	b.n	8001880 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800186c:	f7ff fd6c 	bl	8001348 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d801      	bhi.n	8001880 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e054      	b.n	800192a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001880:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188c:	d0ee      	beq.n	800186c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 80018b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b4:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <FLASH_WaitForLastOperation+0x86>
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80018dc:	4915      	ldr	r1, [pc, #84]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	618b      	str	r3, [r1, #24]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <FLASH_WaitForLastOperation+0x9a>
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80018f4:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <FLASH_WaitForLastOperation+0xdc>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e011      	b.n	800192a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001906:	f7ff fd1f 	bl	8001348 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	d801      	bhi.n	800191a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e007      	b.n	800192a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <FLASH_WaitForLastOperation+0xd8>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001926:	d0ee      	beq.n	8001906 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	58004000 	.word	0x58004000
 8001938:	20000648 	.word	0x20000648

0800193c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <FLASH_Program_DoubleWord+0x48>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <FLASH_Program_DoubleWord+0x48>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	000a      	movs	r2, r1
 800196e:	2300      	movs	r3, #0
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	3104      	adds	r1, #4
 8001974:	4613      	mov	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	58004000 	.word	0x58004000

08001988 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_FLASHEx_Erase+0x9c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_FLASHEx_Erase+0x16>
 800199a:	2302      	movs	r3, #2
 800199c:	e03d      	b.n	8001a1a <HAL_FLASHEx_Erase+0x92>
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_FLASHEx_Erase+0x9c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_FLASHEx_Erase+0x9c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ae:	f7ff ff55 	bl	800185c <FLASH_WaitForLastOperation>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d12a      	bne.n	8001a12 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d124      	bne.n	8001a0e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ca:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	e012      	b.n	80019fa <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f000 f827 	bl	8001a28 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019de:	f7ff ff3d 	bl	800185c <FLASH_WaitForLastOperation>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	601a      	str	r2, [r3, #0]
          break;
 80019f2:	e00a      	b.n	8001a0a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3301      	adds	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4413      	add	r3, r2
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3e4      	bcc.n	80019d4 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001a0a:	f000 f86f 	bl	8001aec <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001a0e:	f000 f825 	bl	8001a5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_FLASHEx_Erase+0x9c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]

  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000648 	.word	0x20000648

08001a28 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <FLASH_PageErase+0x30>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <FLASH_PageErase+0x30>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6153      	str	r3, [r2, #20]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	58004000 	.word	0x58004000

08001a5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6c:	d117      	bne.n	8001a9e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a78:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a90:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d117      	bne.n	8001adc <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ab6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ace:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <FLASH_FlushCaches+0x8c>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
  }
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	58004000 	.word	0x58004000

08001aec <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <FLASH_AcknowledgePageErase+0x20>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <FLASH_AcknowledgePageErase+0x20>)
 8001af6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001afa:	f023 0302 	bic.w	r3, r3, #2
 8001afe:	6153      	str	r3, [r2, #20]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	58004000 	.word	0x58004000

08001b10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	e14c      	b.n	8001dba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 813e 	beq.w	8001db4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d005      	beq.n	8001b50 <HAL_GPIO_Init+0x40>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d130      	bne.n	8001bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b86:	2201      	movs	r2, #1
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 0201 	and.w	r2, r3, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d017      	beq.n	8001bee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d123      	bne.n	8001c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	6939      	ldr	r1, [r7, #16]
 8001c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0203 	and.w	r2, r3, #3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8098 	beq.w	8001db4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c84:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <HAL_GPIO_Init+0x2c8>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cae:	d019      	beq.n	8001ce4 <HAL_GPIO_Init+0x1d4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <HAL_GPIO_Init+0x2cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d013      	beq.n	8001ce0 <HAL_GPIO_Init+0x1d0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00d      	beq.n	8001cdc <HAL_GPIO_Init+0x1cc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2d4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d007      	beq.n	8001cd8 <HAL_GPIO_Init+0x1c8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_GPIO_Init+0x2d8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_GPIO_Init+0x1c4>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e008      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf6:	4938      	ldr	r1, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x2c8>)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dac:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f47f aeab 	bne.w	8001b20 <HAL_GPIO_Init+0x10>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	48000800 	.word	0x48000800
 8001de4:	48000c00 	.word	0x48000c00
 8001de8:	48001000 	.word	0x48001000
 8001dec:	58000800 	.word	0x58000800

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58000400 	.word	0x58000400

08001e40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	58000400 	.word	0x58000400

08001e5c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e6e:	d101      	bne.n	8001e74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ece:	d101      	bne.n	8001ed4 <LL_RCC_HSE_IsReady+0x18>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <LL_RCC_HSE_IsReady+0x1a>
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2e:	d101      	bne.n	8001f34 <LL_RCC_HSI_IsReady+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_RCC_HSI_IsReady+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d101      	bne.n	8001fc6 <LL_RCC_HSI48_IsReady+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_RCC_HSI48_IsReady+0x1a>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d101      	bne.n	8002072 <LL_RCC_LSE_IsReady+0x18>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_RCC_LSE_IsReady+0x1a>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d101      	bne.n	80020da <LL_RCC_LSI1_IsReady+0x18>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_RCC_LSI1_IsReady+0x1a>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b08      	cmp	r3, #8
 800213c:	d101      	bne.n	8002142 <LL_RCC_LSI2_IsReady+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_RCC_LSI2_IsReady+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d101      	bne.n	80021ce <LL_RCC_MSI_IsReady+0x16>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_RCC_MSI_IsReady+0x18>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002212:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2bb0      	cmp	r3, #176	; 0xb0
 8002218:	d901      	bls.n	800221e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800221a:	23b0      	movs	r3, #176	; 0xb0
 800221c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 0203 	bic.w	r2, r3, #3
 8002268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022fa:	f023 020f 	bic.w	r2, r3, #15
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	608b      	str	r3, [r1, #8]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800241a:	d101      	bne.n	8002420 <LL_RCC_PLL_IsReady+0x18>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <LL_RCC_PLL_IsReady+0x1a>
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d101      	bne.n	80024a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c6:	d101      	bne.n	80024cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d101      	bne.n	80024f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002510:	d101      	bne.n	8002516 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002534:	d101      	bne.n	800253a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b08d      	sub	sp, #52	; 0x34
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e363      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808d 	beq.w	8002682 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	f7ff fe89 	bl	800227e <LL_RCC_GetSysClkSource>
 800256c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800256e:	f7ff ff82 	bl	8002476 <LL_RCC_PLL_GetMainSource>
 8002572:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x3e>
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d147      	bne.n	8002610 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	2b01      	cmp	r3, #1
 8002584:	d144      	bne.n	8002610 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e347      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002596:	f7ff fe34 	bl	8002202 <LL_RCC_MSI_GetRange>
 800259a:	4603      	mov	r3, r0
 800259c:	429c      	cmp	r4, r3
 800259e:	d914      	bls.n	80025ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fd2f 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e336      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fe0e 	bl	80021da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fe32 	bl	800222c <LL_RCC_MSI_SetCalibTrimming>
 80025c8:	e013      	b.n	80025f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fe03 	bl	80021da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fe27 	bl	800222c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fd10 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e317      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025f2:	f000 fcc9 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4aa4      	ldr	r2, [pc, #656]	; (800288c <HAL_RCC_OscConfig+0x344>)
 80025fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025fc:	4ba4      	ldr	r3, [pc, #656]	; (8002890 <HAL_RCC_OscConfig+0x348>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fe53 	bl	80012ac <HAL_InitTick>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d039      	beq.n	8002680 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e308      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01e      	beq.n	8002656 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002618:	f7ff fdb0 	bl	800217c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800261c:	f7fe fe94 	bl	8001348 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002624:	f7fe fe90 	bl	8001348 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e2f5      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002636:	f7ff fdbf 	bl	80021b8 <LL_RCC_MSI_IsReady>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f1      	beq.n	8002624 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fdc8 	bl	80021da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fdec 	bl	800222c <LL_RCC_MSI_SetCalibTrimming>
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002656:	f7ff fda0 	bl	800219a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800265a:	f7fe fe75 	bl	8001348 <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002662:	f7fe fe71 	bl	8001348 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e2d6      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002674:	f7ff fda0 	bl	80021b8 <LL_RCC_MSI_IsReady>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f1      	bne.n	8002662 <HAL_RCC_OscConfig+0x11a>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002680:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d047      	beq.n	800271e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268e:	f7ff fdf6 	bl	800227e <LL_RCC_GetSysClkSource>
 8002692:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002694:	f7ff feef 	bl	8002476 <LL_RCC_PLL_GetMainSource>
 8002698:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x164>
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d108      	bne.n	80026b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d134      	bne.n	800271e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e2b4      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0x180>
 80026c2:	f7ff fbdd 	bl	8001e80 <LL_RCC_HSE_Enable>
 80026c6:	e001      	b.n	80026cc <HAL_RCC_OscConfig+0x184>
 80026c8:	f7ff fbe9 	bl	8001e9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe38 	bl	8001348 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fe34 	bl	8001348 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e299      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80026ee:	f7ff fbe5 	bl	8001ebc <LL_RCC_HSE_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f1      	beq.n	80026dc <HAL_RCC_OscConfig+0x194>
 80026f8:	e011      	b.n	800271e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fe25 	bl	8001348 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002702:	f7fe fe21 	bl	8001348 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e286      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002714:	f7ff fbd2 	bl	8001ebc <LL_RCC_HSE_IsReady>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f1      	bne.n	8002702 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d04c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272a:	f7ff fda8 	bl	800227e <LL_RCC_GetSysClkSource>
 800272e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	f7ff fea1 	bl	8002476 <LL_RCC_PLL_GetMainSource>
 8002734:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x200>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d10e      	bne.n	8002760 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d10b      	bne.n	8002760 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e266      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fbf1 	bl	8001f40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800275e:	e031      	b.n	80027c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d019      	beq.n	800279c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	f7ff fbba 	bl	8001ee0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fdec 	bl	8001348 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe fde8 	bl	8001348 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e24d      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002786:	f7ff fbc9 	bl	8001f1c <LL_RCC_HSI_IsReady>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f1      	beq.n	8002774 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fbd3 	bl	8001f40 <LL_RCC_HSI_SetCalibTrimming>
 800279a:	e013      	b.n	80027c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279c:	f7ff fbaf 	bl	8001efe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fdd2 	bl	8001348 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fdce 	bl	8001348 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e233      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80027ba:	f7ff fbaf 	bl	8001f1c <LL_RCC_HSI_IsReady>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f1      	bne.n	80027a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a3 	beq.w	8002924 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d076      	beq.n	80028d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d046      	beq.n	8002880 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80027f2:	f7ff fc66 	bl	80020c2 <LL_RCC_LSI1_IsReady>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d113      	bne.n	8002824 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80027fc:	f7ff fc3f 	bl	800207e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002800:	f7fe fda2 	bl	8001348 <HAL_GetTick>
 8002804:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002808:	f7fe fd9e 	bl	8001348 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e203      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800281a:	f7ff fc52 	bl	80020c2 <LL_RCC_LSI1_IsReady>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f1      	beq.n	8002808 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002824:	f7ff fc5f 	bl	80020e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fd8e 	bl	8001348 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002830:	f7fe fd8a 	bl	8001348 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b03      	cmp	r3, #3
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1ef      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002842:	f7ff fc72 	bl	800212a <LL_RCC_LSI2_IsReady>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f1      	beq.n	8002830 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc7c 	bl	800214e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002856:	f7ff fc23 	bl	80020a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fd75 	bl	8001348 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002862:	f7fe fd71 	bl	8001348 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1d6      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002874:	f7ff fc25 	bl	80020c2 <LL_RCC_LSI1_IsReady>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f1      	bne.n	8002862 <HAL_RCC_OscConfig+0x31a>
 800287e:	e051      	b.n	8002924 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002880:	f7ff fbfd 	bl	800207e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd60 	bl	8001348 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800288a:	e00c      	b.n	80028a6 <HAL_RCC_OscConfig+0x35e>
 800288c:	20000008 	.word	0x20000008
 8002890:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002894:	f7fe fd58 	bl	8001348 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e1bd      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028a6:	f7ff fc0c 	bl	80020c2 <LL_RCC_LSI1_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f1      	beq.n	8002894 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80028b0:	f7ff fc2a 	bl	8002108 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028b6:	f7fe fd47 	bl	8001348 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1ac      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028c8:	f7ff fc2f 	bl	800212a <LL_RCC_LSI2_IsReady>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f1      	bne.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 80028d2:	e027      	b.n	8002924 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80028d4:	f7ff fc18 	bl	8002108 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fd36 	bl	8001348 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028e0:	f7fe fd32 	bl	8001348 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e197      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028f2:	f7ff fc1a 	bl	800212a <LL_RCC_LSI2_IsReady>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f1      	bne.n	80028e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80028fc:	f7ff fbd0 	bl	80020a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fd22 	bl	8001348 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002908:	f7fe fd1e 	bl	8001348 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e183      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800291a:	f7ff fbd2 	bl	80020c2 <LL_RCC_LSI1_IsReady>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f1      	bne.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05b      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002930:	4ba7      	ldr	r3, [pc, #668]	; (8002bd0 <HAL_RCC_OscConfig+0x688>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d114      	bne.n	8002966 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800293c:	f7ff fa70 	bl	8001e20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002940:	f7fe fd02 	bl	8001348 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe fcfe 	bl	8001348 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e163      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295a:	4b9d      	ldr	r3, [pc, #628]	; (8002bd0 <HAL_RCC_OscConfig+0x688>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_OscConfig+0x42c>
 800296e:	f7ff fb30 	bl	8001fd2 <LL_RCC_LSE_Enable>
 8002972:	e00c      	b.n	800298e <HAL_RCC_OscConfig+0x446>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d104      	bne.n	8002986 <HAL_RCC_OscConfig+0x43e>
 800297c:	f7ff fb4b 	bl	8002016 <LL_RCC_LSE_EnableBypass>
 8002980:	f7ff fb27 	bl	8001fd2 <LL_RCC_LSE_Enable>
 8002984:	e003      	b.n	800298e <HAL_RCC_OscConfig+0x446>
 8002986:	f7ff fb35 	bl	8001ff4 <LL_RCC_LSE_Disable>
 800298a:	f7ff fb55 	bl	8002038 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d014      	beq.n	80029c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe fcd7 	bl	8001348 <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fcd3 	bl	8001348 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e136      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029b4:	f7ff fb51 	bl	800205a <LL_RCC_LSE_IsReady>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ef      	beq.n	800299e <HAL_RCC_OscConfig+0x456>
 80029be:	e013      	b.n	80029e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fcc2 	bl	8001348 <HAL_GetTick>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe fcbe 	bl	8001348 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e121      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80029de:	f7ff fb3c 	bl	800205a <LL_RCC_LSE_IsReady>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ef      	bne.n	80029c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d014      	beq.n	8002a26 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029fc:	f7ff fab5 	bl	8001f6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fca2 	bl	8001348 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a08:	f7fe fc9e 	bl	8001348 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e103      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a1a:	f7ff fac8 	bl	8001fae <LL_RCC_HSI48_IsReady>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f1      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4c0>
 8002a24:	e013      	b.n	8002a4e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a26:	f7ff fab1 	bl	8001f8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fc8d 	bl	8001348 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a32:	f7fe fc89 	bl	8001348 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0ee      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a44:	f7ff fab3 	bl	8001fae <LL_RCC_HSI48_IsReady>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f1      	bne.n	8002a32 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80e4 	beq.w	8002c20 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a58:	f7ff fc11 	bl	800227e <LL_RCC_GetSysClkSource>
 8002a5c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	f040 80b4 	bne.w	8002bd8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0203 	and.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d123      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d11c      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d114      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d05d      	beq.n	8002b82 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d058      	beq.n	8002b7e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0a1      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ade:	f7ff fc84 	bl	80023ea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae2:	f7fe fc31 	bl	8001348 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fc2d 	bl	8001348 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e092      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ef      	bne.n	8002aea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_RCC_OscConfig+0x68c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b36:	430a      	orrs	r2, r1
 8002b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b40:	f7ff fc44 	bl	80023cc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b54:	f7fe fbf8 	bl	8001348 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fbf4 	bl	8001348 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e059      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ef      	beq.n	8002b5c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	e050      	b.n	8002c20 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e04f      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d147      	bne.n	8002c20 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b90:	f7ff fc1c 	bl	80023cc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba4:	f7fe fbd0 	bl	8001348 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fbcc 	bl	8001348 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e031      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x664>
 8002bcc:	e028      	b.n	8002c20 <HAL_RCC_OscConfig+0x6d8>
 8002bce:	bf00      	nop
 8002bd0:	58000400 	.word	0x58000400
 8002bd4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d01e      	beq.n	8002c1c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	f7ff fc04 	bl	80023ea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fbb1 	bl	8001348 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe fbad 	bl	8001348 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e012      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ef      	bne.n	8002bea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_OscConfig+0x6e4>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
 8002c1a:	e001      	b.n	8002c20 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3734      	adds	r7, #52	; 0x34
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	eefefffc 	.word	0xeefefffc

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e12d      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b98      	ldr	r3, [pc, #608]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d91b      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b95      	ldr	r3, [pc, #596]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0207 	bic.w	r2, r3, #7
 8002c5a:	4993      	ldr	r1, [pc, #588]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c62:	f7fe fb71 	bl	8001348 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c6a:	f7fe fb6d 	bl	8001348 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e111      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7c:	4b8a      	ldr	r3, [pc, #552]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d1ef      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fafb 	bl	8002296 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fb52 	bl	8001348 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ca8:	f7fe fb4e 	bl	8001348 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0f2      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cba:	f7ff fbe8 	bl	800248e <LL_RCC_IsActiveFlag_HPRE>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f1      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff faf2 	bl	80022be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cda:	f7fe fb35 	bl	8001348 <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ce2:	f7fe fb31 	bl	8001348 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0d5      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cf4:	f7ff fbdd 	bl	80024b2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f1      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff faeb 	bl	80022ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fb18 	bl	8001348 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d1c:	f7fe fb14 	bl	8001348 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0b8      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d2e:	f7ff fbd3 	bl	80024d8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f1      	beq.n	8002d1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d016      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fae5 	bl	8002318 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe fafb 	bl	8001348 <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d56:	f7fe faf7 	bl	8001348 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e09b      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d68:	f7ff fbc9 	bl	80024fe <LL_RCC_IsActiveFlag_PPRE1>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f1      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d017      	beq.n	8002dae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fadb 	bl	8002340 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d8a:	f7fe fadd 	bl	8001348 <HAL_GetTick>
 8002d8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d92:	f7fe fad9 	bl	8001348 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e07d      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002da4:	f7ff fbbd 	bl	8002522 <LL_RCC_IsActiveFlag_PPRE2>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f1      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d043      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002dc2:	f7ff f87b 	bl	8001ebc <LL_RCC_HSE_IsReady>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11e      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e067      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002dd8:	f7ff fb16 	bl	8002408 <LL_RCC_PLL_IsReady>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d113      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e05c      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002dee:	f7ff f9e3 	bl	80021b8 <LL_RCC_MSI_IsReady>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e051      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002dfc:	f7ff f88e 	bl	8001f1c <LL_RCC_HSI_IsReady>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e04a      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fa21 	bl	8002256 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe fa98 	bl	8001348 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7fe fa94 	bl	8001348 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e036      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	f7ff fa24 	bl	800227e <LL_RCC_GetSysClkSource>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d1ec      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d21b      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 0207 	bic.w	r2, r3, #7
 8002e58:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe fa72 	bl	8001348 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e68:	f7fe fa6e 	bl	8001348 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e012      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x278>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1ef      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e88:	f000 f87e 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_RCC_ClockConfig+0x27c>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e92:	f7fe fa65 	bl	8001360 <HAL_GetTickPrio>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fa07 	bl	80012ac <HAL_InitTick>
 8002e9e:	4603      	mov	r3, r0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	58004000 	.word	0x58004000
 8002eac:	20000008 	.word	0x20000008

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb6:	f7ff f9e2 	bl	800227e <LL_RCC_GetSysClkSource>
 8002eba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ec2:	f7ff f99e 	bl	8002202 <LL_RCC_MSI_GetRange>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e04b      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e045      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d10a      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002eea:	f7fe ffb7 	bl	8001e5c <LL_RCC_HSE_IsEnabledDiv2>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e03a      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e037      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f00:	f7ff fab9 	bl	8002476 <LL_RCC_PLL_GetMainSource>
 8002f04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x64>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x6a>
 8002f12:	e00d      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f16:	60bb      	str	r3, [r7, #8]
        break;
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f1a:	f7fe ff9f 	bl	8001e5c <LL_RCC_HSE_IsEnabledDiv2>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f26:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f28:	e00d      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f2c:	60bb      	str	r3, [r7, #8]
        break;
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f30:	f7ff f967 	bl	8002202 <LL_RCC_MSI_GetRange>
 8002f34:	4603      	mov	r3, r0
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	60bb      	str	r3, [r7, #8]
        break;
 8002f44:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002f46:	f7ff fa71 	bl	800242c <LL_RCC_PLL_GetN>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	fb03 f402 	mul.w	r4, r3, r2
 8002f52:	f7ff fa84 	bl	800245e <LL_RCC_PLL_GetDivider>
 8002f56:	4603      	mov	r3, r0
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002f60:	f7ff fa71 	bl	8002446 <LL_RCC_PLL_GetR>
 8002f64:	4603      	mov	r3, r0
 8002f66:	0f5b      	lsrs	r3, r3, #29
 8002f68:	3301      	adds	r3, #1
 8002f6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	080061f4 	.word	0x080061f4
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	01e84800 	.word	0x01e84800

08002f88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f88:	b598      	push	{r3, r4, r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002f8c:	f7ff ff90 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002f90:	4604      	mov	r4, r0
 8002f92:	f7ff f9e9 	bl	8002368 <LL_RCC_GetAHBPrescaler>
 8002f96:	4603      	mov	r3, r0
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	4a03      	ldr	r2, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x24>)
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd98      	pop	{r3, r4, r7, pc}
 8002fac:	08006194 	.word	0x08006194

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b598      	push	{r3, r4, r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fb4:	f7ff ffe8 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	f7ff f9ef 	bl	800239c <LL_RCC_GetAPB1Prescaler>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd98      	pop	{r3, r4, r7, pc}
 8002fd8:	080061d4 	.word	0x080061d4

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b598      	push	{r3, r4, r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002fe0:	f7ff ffd2 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	f7ff f9e5 	bl	80023b4 <LL_RCC_GetAPB2Prescaler>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0adb      	lsrs	r3, r3, #11
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd98      	pop	{r3, r4, r7, pc}
 8003004:	080061d4 	.word	0x080061d4

08003008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2bb0      	cmp	r3, #176	; 0xb0
 8003014:	d903      	bls.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e007      	b.n	800302e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	4a11      	ldr	r2, [pc, #68]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800302e:	f7ff f9a7 	bl	8002380 <LL_RCC_GetAHB4Prescaler>
 8003032:	4603      	mov	r3, r0
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	0c9c      	lsrs	r4, r3, #18
 8003052:	f7fe fef5 	bl	8001e40 <HAL_PWREx_GetVoltageRange>
 8003056:	4603      	mov	r3, r0
 8003058:	4619      	mov	r1, r3
 800305a:	4620      	mov	r0, r4
 800305c:	f000 f80c 	bl	8003078 <RCC_SetFlashLatency>
 8003060:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	080061f4 	.word	0x080061f4
 8003070:	08006194 	.word	0x08006194
 8003074:	431bde83 	.word	0x431bde83

08003078 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b093      	sub	sp, #76	; 0x4c
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <RCC_SetFlashLatency+0xe8>)
 8003084:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800308a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800308e:	4a35      	ldr	r2, [pc, #212]	; (8003164 <RCC_SetFlashLatency+0xec>)
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	ca07      	ldmia	r2, {r0, r1, r2}
 8003096:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <RCC_SetFlashLatency+0xf0>)
 800309c:	f107 040c 	add.w	r4, r7, #12
 80030a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030a6:	2300      	movs	r3, #0
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b0:	d11a      	bne.n	80030e8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
 80030b6:	e013      	b.n	80030e0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	3348      	adds	r3, #72	; 0x48
 80030be:	443b      	add	r3, r7
 80030c0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d807      	bhi.n	80030da <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3348      	adds	r3, #72	; 0x48
 80030d0:	443b      	add	r3, r7
 80030d2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80030d6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80030d8:	e020      	b.n	800311c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030dc:	3301      	adds	r3, #1
 80030de:	643b      	str	r3, [r7, #64]	; 0x40
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d9e8      	bls.n	80030b8 <RCC_SetFlashLatency+0x40>
 80030e6:	e019      	b.n	800311c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	e013      	b.n	8003116 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	3348      	adds	r3, #72	; 0x48
 80030f4:	443b      	add	r3, r7
 80030f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d807      	bhi.n	8003110 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3348      	adds	r3, #72	; 0x48
 8003106:	443b      	add	r3, r7
 8003108:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800310e:	e005      	b.n	800311c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	3301      	adds	r3, #1
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	2b02      	cmp	r3, #2
 800311a:	d9e8      	bls.n	80030ee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <RCC_SetFlashLatency+0xf4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	4911      	ldr	r1, [pc, #68]	; (800316c <RCC_SetFlashLatency+0xf4>)
 8003126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800312c:	f7fe f90c 	bl	8001348 <HAL_GetTick>
 8003130:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003132:	e008      	b.n	8003146 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003134:	f7fe f908 	bl	8001348 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e007      	b.n	8003156 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <RCC_SetFlashLatency+0xf4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003150:	429a      	cmp	r2, r3
 8003152:	d1ef      	bne.n	8003134 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	374c      	adds	r7, #76	; 0x4c
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	08006168 	.word	0x08006168
 8003164:	08006178 	.word	0x08006178
 8003168:	08006184 	.word	0x08006184
 800316c:	58004000 	.word	0x58004000

08003170 <LL_RCC_LSE_IsEnabled>:
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <LL_RCC_LSE_IsEnabled+0x18>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <LL_RCC_LSE_IsEnabled+0x1a>
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_RCC_LSE_IsReady>:
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d101      	bne.n	80031ac <LL_RCC_LSE_IsReady+0x18>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_RCC_LSE_IsReady+0x1a>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_SetRFWKPClockSource>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_SetSMPSClockSource>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_RCC_SetSMPSPrescaler>:
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800321e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4313      	orrs	r3, r2
 8003226:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_RCC_SetUSARTClockSource>:
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 0203 	bic.w	r2, r3, #3
 8003248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_RCC_SetLPUARTClockSource>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_RCC_SetI2CClockSource>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_RCC_SetLPTIMClockSource>:
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_RCC_SetSAIClockSource>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_RCC_SetRNGClockSource>:
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800333a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_RCC_SetCLK48ClockSource>:
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_RCC_SetUSBClockSource>:
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ffe3 	bl	8003352 <LL_RCC_SetCLK48ClockSource>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <LL_RCC_SetADCClockSource>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_RCC_SetRTCClockSource>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_GetRTCClockSource>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_RCC_ForceBackupDomainReset>:
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <LL_RCC_PLLSAI1_Enable>:
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800345c:	6013      	str	r3, [r2, #0]
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_RCC_PLLSAI1_Disable>:
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800346c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_RCC_PLLSAI1_IsReady>:
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003498:	d101      	bne.n	800349e <LL_RCC_PLLSAI1_IsReady+0x18>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b088      	sub	sp, #32
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80034b6:	2300      	movs	r3, #0
 80034b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d034      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ce:	d021      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80034d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d4:	d81b      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034da:	d01d      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80034dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e0:	d815      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x54>
 80034e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ea:	d110      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80034fc:	e00d      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f947 	bl	8003796 <RCCEx_PLLSAI1_ConfigNP>
 8003508:	4603      	mov	r3, r0
 800350a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800350c:	e005      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	77fb      	strb	r3, [r7, #31]
        break;
 8003512:	e002      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fee8 	bl	80032fa <LL_RCC_SetSAIClockSource>
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7ffb      	ldrb	r3, [r7, #31]
 800352e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d046      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800353c:	f7ff ff56 	bl	80033ec <LL_RCC_GetRTCClockSource>
 8003540:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	d03c      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800354c:	f7fe fc68 	bl	8001e20 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ff30 	bl	80033c0 <LL_RCC_SetRTCClockSource>
 8003560:	e02e      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800356c:	f7ff ff4b 	bl	8003406 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003570:	f7ff ff5a 	bl	8003428 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800358c:	f7ff fdf0 	bl	8003170 <LL_RCC_LSE_IsEnabled>
 8003590:	4603      	mov	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d114      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003596:	f7fd fed7 	bl	8001348 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800359c:	e00b      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fed3 	bl	8001348 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d902      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	77fb      	strb	r3, [r7, #31]
              break;
 80035b4:	e004      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80035b6:	f7ff fded 	bl	8003194 <LL_RCC_LSE_IsReady>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d1ee      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80035c0:	7ffb      	ldrb	r3, [r7, #31]
 80035c2:	77bb      	strb	r3, [r7, #30]
 80035c4:	e001      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	7ffb      	ldrb	r3, [r7, #31]
 80035c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe2a 	bl	8003234 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fe35 	bl	8003260 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fe5d 	bl	80032c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fe52 	bl	80032c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d004      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe2a 	bl	800328c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fe1f 	bl	800328c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d022      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fe8d 	bl	800337e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366c:	d107      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f8dd 	bl	800384c <RCCEx_PLLSAI1_ConfigNQ>
 8003692:	4603      	mov	r3, r0
 8003694:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800369c:	7ffb      	ldrb	r3, [r7, #31]
 800369e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d02b      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d008      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036be:	d003      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fe2a 	bl	8003326 <LL_RCC_SetRNGClockSource>
 80036d2:	e00a      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	2000      	movs	r0, #0
 80036e0:	f7ff fe21 	bl	8003326 <LL_RCC_SetRNGClockSource>
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fe34 	bl	8003352 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80036f2:	d107      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003702:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d022      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fe3d 	bl	8003394 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003722:	d107      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373c:	d10b      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f8dd 	bl	8003902 <RCCEx_PLLSAI1_ConfigNR>
 8003748:	4603      	mov	r3, r0
 800374a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800374c:	7ffb      	ldrb	r3, [r7, #31]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003752:	7ffb      	ldrb	r3, [r7, #31]
 8003754:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fd26 	bl	80031b8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fd45 	bl	800320c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fd2c 	bl	80031e4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800378c:	7fbb      	ldrb	r3, [r7, #30]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037a2:	f7ff fe61 	bl	8003468 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037a6:	f7fd fdcf 	bl	8001348 <HAL_GetTick>
 80037aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037ac:	e009      	b.n	80037c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ae:	f7fd fdcb 	bl	8001348 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e004      	b.n	80037cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037c2:	f7ff fe60 	bl	8003486 <LL_RCC_PLLSAI1_IsReady>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d137      	bne.n	8003842 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e6:	4313      	orrs	r3, r2
 80037e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003800:	f7ff fe23 	bl	800344a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fda0 	bl	8001348 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800380a:	e009      	b.n	8003820 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800380c:	f7fd fd9c 	bl	8001348 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d902      	bls.n	8003820 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	73fb      	strb	r3, [r7, #15]
        break;
 800381e:	e004      	b.n	800382a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003820:	f7ff fe31 	bl	8003486 <LL_RCC_PLLSAI1_IsReady>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d1f0      	bne.n	800380c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d108      	bne.n	8003842 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003858:	f7ff fe06 	bl	8003468 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800385c:	f7fd fd74 	bl	8001348 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003864:	f7fd fd70 	bl	8001348 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
      break;
 8003876:	e004      	b.n	8003882 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003878:	f7ff fe05 	bl	8003486 <LL_RCC_PLLSAI1_IsReady>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d137      	bne.n	80038f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b2:	4313      	orrs	r3, r2
 80038b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038b6:	f7ff fdc8 	bl	800344a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ba:	f7fd fd45 	bl	8001348 <HAL_GetTick>
 80038be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038c0:	e009      	b.n	80038d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c2:	f7fd fd41 	bl	8001348 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	73fb      	strb	r3, [r7, #15]
        break;
 80038d4:	e004      	b.n	80038e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038d6:	f7ff fdd6 	bl	8003486 <LL_RCC_PLLSAI1_IsReady>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d1f0      	bne.n	80038c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f4:	4313      	orrs	r3, r2
 80038f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800390e:	f7ff fdab 	bl	8003468 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003912:	f7fd fd19 	bl	8001348 <HAL_GetTick>
 8003916:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003918:	e009      	b.n	800392e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800391a:	f7fd fd15 	bl	8001348 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d902      	bls.n	800392e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e004      	b.n	8003938 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800392e:	f7ff fdaa 	bl	8003486 <LL_RCC_PLLSAI1_IsReady>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d137      	bne.n	80039ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003952:	4313      	orrs	r3, r2
 8003954:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800396c:	f7ff fd6d 	bl	800344a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fcea 	bl	8001348 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003976:	e009      	b.n	800398c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003978:	f7fd fce6 	bl	8001348 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d902      	bls.n	800398c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	73fb      	strb	r3, [r7, #15]
        break;
 800398a:	e004      	b.n	8003996 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800398c:	f7ff fd7b 	bl	8003486 <LL_RCC_PLLSAI1_IsReady>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d1f0      	bne.n	8003978 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <LL_RCC_GetUSARTClockSource>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4013      	ands	r3, r2
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_RCC_GetLPUARTClockSource>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4013      	ands	r3, r2
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e042      	b.n	8003a90 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd fb67 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2224      	movs	r2, #36	; 0x24
 8003a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 feea 	bl	800481c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fcbf 	bl	80043cc <UART_SetConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e01b      	b.n	8003a90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 ff69 	bl	8004960 <UART_CheckIdleState>
 8003a8e:	4603      	mov	r3, r0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d17b      	bne.n	8003baa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_UART_Transmit+0x26>
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e074      	b.n	8003bac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2221      	movs	r2, #33	; 0x21
 8003ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad2:	f7fd fc39 	bl	8001348 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d108      	bne.n	8003b04 <HAL_UART_Transmit+0x6c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e003      	b.n	8003b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b0c:	e030      	b.n	8003b70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 ffcb 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e03d      	b.n	8003bac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	3302      	adds	r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	e007      	b.n	8003b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1c8      	bne.n	8003b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2140      	movs	r1, #64	; 0x40
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 ff94 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e006      	b.n	8003bac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f040 80b5 	bne.w	8003d3a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Receive+0x28>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ad      	b.n	8003d3c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2222      	movs	r2, #34	; 0x22
 8003bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd fba7 	bl	8001348 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d10e      	bne.n	8003c34 <HAL_UART_Receive+0x80>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_UART_Receive+0x76>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c28:	e02d      	b.n	8003c86 <HAL_UART_Receive+0xd2>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c32:	e028      	b.n	8003c86 <HAL_UART_Receive+0xd2>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_UART_Receive+0xa4>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_UART_Receive+0x9a>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	22ff      	movs	r2, #255	; 0xff
 8003c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c4c:	e01b      	b.n	8003c86 <HAL_UART_Receive+0xd2>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	227f      	movs	r2, #127	; 0x7f
 8003c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c56:	e016      	b.n	8003c86 <HAL_UART_Receive+0xd2>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c60:	d10d      	bne.n	8003c7e <HAL_UART_Receive+0xca>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_Receive+0xc0>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	227f      	movs	r2, #127	; 0x7f
 8003c6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c72:	e008      	b.n	8003c86 <HAL_UART_Receive+0xd2>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	223f      	movs	r2, #63	; 0x3f
 8003c78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c7c:	e003      	b.n	8003c86 <HAL_UART_Receive+0xd2>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003c8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d108      	bne.n	8003caa <HAL_UART_Receive+0xf6>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	e003      	b.n	8003cb2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003cb2:	e036      	b.n	8003d22 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2120      	movs	r1, #32
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fef8 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e032      	b.n	8003d3c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10c      	bne.n	8003cf6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	8a7b      	ldrh	r3, [r7, #18]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e00c      	b.n	8003d10 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	8a7b      	ldrh	r3, [r7, #18]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4013      	ands	r3, r2
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1c2      	bne.n	8003cb4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b0ba      	sub	sp, #232	; 0xe8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d72:	4013      	ands	r3, r2
 8003d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11b      	bne.n	8003db8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d015      	beq.n	8003db8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 82e3 	beq.w	8004374 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
      }
      return;
 8003db6:	e2dd      	b.n	8004374 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8123 	beq.w	8004008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003dc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <HAL_UART_IRQHandler+0x2b8>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003dce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003dd2:	4b8b      	ldr	r3, [pc, #556]	; (8004000 <HAL_UART_IRQHandler+0x2bc>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8116 	beq.w	8004008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d011      	beq.n	8003e0c <HAL_UART_IRQHandler+0xc8>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <HAL_UART_IRQHandler+0xf8>
 8003e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d011      	beq.n	8003e6c <HAL_UART_IRQHandler+0x128>
 8003e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e88:	4b5c      	ldr	r3, [pc, #368]	; (8003ffc <HAL_UART_IRQHandler+0x2b8>)
 8003e8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2208      	movs	r2, #8
 8003e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f043 0208 	orr.w	r2, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <HAL_UART_IRQHandler+0x196>
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8249 	beq.w	8004378 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d013      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d054      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fe25 	bl	8004b8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d146      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1d9      	bne.n	8003f52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d017      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <HAL_UART_IRQHandler+0x2c0>)
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fd fb6f 	bl	800169c <HAL_DMA_Abort_IT>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd6:	e00f      	b.n	8003ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9e1 	bl	80043a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fde:	e00b      	b.n	8003ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f9dd 	bl	80043a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe6:	e007      	b.n	8003ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f9d9 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003ff6:	e1bf      	b.n	8004378 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	bf00      	nop
    return;
 8003ffa:	e1bd      	b.n	8004378 <HAL_UART_IRQHandler+0x634>
 8003ffc:	10000001 	.word	0x10000001
 8004000:	04000120 	.word	0x04000120
 8004004:	08004c5b 	.word	0x08004c5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 8153 	bne.w	80042b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 814c 	beq.w	80042b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8145 	beq.w	80042b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2210      	movs	r2, #16
 8004034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	f040 80bb 	bne.w	80041bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 818f 	beq.w	800437c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004068:	429a      	cmp	r2, r3
 800406a:	f080 8187 	bcs.w	800437c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 8087 	bne.w	800419a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1da      	bne.n	800408c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004102:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e1      	bne.n	80040d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3308      	adds	r3, #8
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004138:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800413c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e3      	bne.n	8004112 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800417a:	65bb      	str	r3, [r7, #88]	; 0x58
 800417c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e4      	bne.n	8004158 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd fa22 	bl	80015de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8fd 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041ba:	e0df      	b.n	800437c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80d1 	beq.w	8004380 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80041de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80cc 	beq.w	8004380 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
 800420c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e4      	bne.n	80041e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	623b      	str	r3, [r7, #32]
   return(result);
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004246:	633a      	str	r2, [r7, #48]	; 0x30
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800424c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e1      	bne.n	800421e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	60fb      	str	r3, [r7, #12]
   return(result);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0310 	bic.w	r3, r3, #16
 8004282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	617b      	str	r3, [r7, #20]
   return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e4      	bne.n	800426e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f87f 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042b6:	e063      	b.n	8004380 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <HAL_UART_IRQHandler+0x59e>
 80042c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fcfe 	bl	8004cdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042e0:	e051      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d014      	beq.n	8004318 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430a:	2b00      	cmp	r3, #0
 800430c:	d03a      	beq.n	8004384 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
    }
    return;
 8004316:	e035      	b.n	8004384 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <HAL_UART_IRQHandler+0x5f4>
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fca8 	bl	8004c86 <UART_EndTransmit_IT>
    return;
 8004336:	e026      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_UART_IRQHandler+0x614>
 8004344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004348:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fcd7 	bl	8004d04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004356:	e016      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_UART_IRQHandler+0x642>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	2b00      	cmp	r3, #0
 800436a:	da0c      	bge.n	8004386 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fcbf 	bl	8004cf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004372:	e008      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
      return;
 8004374:	bf00      	nop
 8004376:	e006      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
    return;
 8004378:	bf00      	nop
 800437a:	e004      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
      return;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
      return;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_UART_IRQHandler+0x642>
    return;
 8004384:	bf00      	nop
  }
}
 8004386:	37e8      	adds	r7, #232	; 0xe8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b08c      	sub	sp, #48	; 0x30
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4baf      	ldr	r3, [pc, #700]	; (80046b8 <UART_SetConfig+0x2ec>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004404:	430b      	orrs	r3, r1
 8004406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4aa4      	ldr	r2, [pc, #656]	; (80046bc <UART_SetConfig+0x2f0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004434:	4313      	orrs	r3, r2
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004442:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800444c:	430b      	orrs	r3, r1
 800444e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f023 010f 	bic.w	r1, r3, #15
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a95      	ldr	r2, [pc, #596]	; (80046c0 <UART_SetConfig+0x2f4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d125      	bne.n	80044bc <UART_SetConfig+0xf0>
 8004470:	2003      	movs	r0, #3
 8004472:	f7ff faa1 	bl	80039b8 <LL_RCC_GetUSARTClockSource>
 8004476:	4603      	mov	r3, r0
 8004478:	2b03      	cmp	r3, #3
 800447a:	d81b      	bhi.n	80044b4 <UART_SetConfig+0xe8>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0xb8>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a5 	.word	0x080044a5
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044ad 	.word	0x080044ad
 8004494:	2301      	movs	r3, #1
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449a:	e042      	b.n	8004522 <UART_SetConfig+0x156>
 800449c:	2302      	movs	r3, #2
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e03e      	b.n	8004522 <UART_SetConfig+0x156>
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e03a      	b.n	8004522 <UART_SetConfig+0x156>
 80044ac:	2308      	movs	r3, #8
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e036      	b.n	8004522 <UART_SetConfig+0x156>
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ba:	e032      	b.n	8004522 <UART_SetConfig+0x156>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7e      	ldr	r2, [pc, #504]	; (80046bc <UART_SetConfig+0x2f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d12a      	bne.n	800451c <UART_SetConfig+0x150>
 80044c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80044ca:	f7ff fa85 	bl	80039d8 <LL_RCC_GetLPUARTClockSource>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d4:	d01a      	beq.n	800450c <UART_SetConfig+0x140>
 80044d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044da:	d81b      	bhi.n	8004514 <UART_SetConfig+0x148>
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e0:	d00c      	beq.n	80044fc <UART_SetConfig+0x130>
 80044e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e6:	d815      	bhi.n	8004514 <UART_SetConfig+0x148>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <UART_SetConfig+0x128>
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	d008      	beq.n	8004504 <UART_SetConfig+0x138>
 80044f2:	e00f      	b.n	8004514 <UART_SetConfig+0x148>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fa:	e012      	b.n	8004522 <UART_SetConfig+0x156>
 80044fc:	2302      	movs	r3, #2
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004502:	e00e      	b.n	8004522 <UART_SetConfig+0x156>
 8004504:	2304      	movs	r3, #4
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450a:	e00a      	b.n	8004522 <UART_SetConfig+0x156>
 800450c:	2308      	movs	r3, #8
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004512:	e006      	b.n	8004522 <UART_SetConfig+0x156>
 8004514:	2310      	movs	r3, #16
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451a:	e002      	b.n	8004522 <UART_SetConfig+0x156>
 800451c:	2310      	movs	r3, #16
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a65      	ldr	r2, [pc, #404]	; (80046bc <UART_SetConfig+0x2f0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	f040 8097 	bne.w	800465c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800452e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004532:	2b08      	cmp	r3, #8
 8004534:	d823      	bhi.n	800457e <UART_SetConfig+0x1b2>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0x170>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004561 	.word	0x08004561
 8004540:	0800457f 	.word	0x0800457f
 8004544:	08004569 	.word	0x08004569
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800456f 	.word	0x0800456f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800457f 	.word	0x0800457f
 800455c:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004560:	f7fe fd26 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004566:	e010      	b.n	800458a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b56      	ldr	r3, [pc, #344]	; (80046c4 <UART_SetConfig+0x2f8>)
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800456c:	e00d      	b.n	800458a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fe fc9f 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004574:	e009      	b.n	800458a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800457c:	e005      	b.n	800458a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 812b 	beq.w	80047e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <UART_SetConfig+0x2fc>)
 8004598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459c:	461a      	mov	r2, r3
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d305      	bcc.n	80045c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d903      	bls.n	80045ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045c8:	e10e      	b.n	80047e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	2200      	movs	r2, #0
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	60fa      	str	r2, [r7, #12]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	4a3c      	ldr	r2, [pc, #240]	; (80046c8 <UART_SetConfig+0x2fc>)
 80045d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2200      	movs	r2, #0
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ec:	f7fb fe18 	bl	8000220 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	020b      	lsls	r3, r1, #8
 8004602:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004606:	0202      	lsls	r2, r0, #8
 8004608:	6979      	ldr	r1, [r7, #20]
 800460a:	6849      	ldr	r1, [r1, #4]
 800460c:	0849      	lsrs	r1, r1, #1
 800460e:	2000      	movs	r0, #0
 8004610:	460c      	mov	r4, r1
 8004612:	4605      	mov	r5, r0
 8004614:	eb12 0804 	adds.w	r8, r2, r4
 8004618:	eb43 0905 	adc.w	r9, r3, r5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	469a      	mov	sl, r3
 8004624:	4693      	mov	fp, r2
 8004626:	4652      	mov	r2, sl
 8004628:	465b      	mov	r3, fp
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fb fdf7 	bl	8000220 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4613      	mov	r3, r2
 8004638:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004640:	d308      	bcc.n	8004654 <UART_SetConfig+0x288>
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004648:	d204      	bcs.n	8004654 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a3a      	ldr	r2, [r7, #32]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	e0c9      	b.n	80047e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800465a:	e0c5      	b.n	80047e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d16d      	bne.n	8004742 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800466a:	3b01      	subs	r3, #1
 800466c:	2b07      	cmp	r3, #7
 800466e:	d82d      	bhi.n	80046cc <UART_SetConfig+0x300>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <UART_SetConfig+0x2ac>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	08004699 	.word	0x08004699
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046cd 	.word	0x080046cd
 8004684:	080046a7 	.word	0x080046a7
 8004688:	080046cd 	.word	0x080046cd
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fe fca0 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800469e:	e01b      	b.n	80046d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <UART_SetConfig+0x2f8>)
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046a4:	e018      	b.n	80046d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7fe fc03 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ac:	e014      	b.n	80046d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046b4:	e010      	b.n	80046d8 <UART_SetConfig+0x30c>
 80046b6:	bf00      	nop
 80046b8:	cfff69f3 	.word	0xcfff69f3
 80046bc:	40008000 	.word	0x40008000
 80046c0:	40013800 	.word	0x40013800
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	08006234 	.word	0x08006234
      default:
        pclk = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8084 	beq.w	80047e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	4a4b      	ldr	r2, [pc, #300]	; (8004814 <UART_SetConfig+0x448>)
 80046e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ea:	461a      	mov	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80046f2:	005a      	lsls	r2, r3, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	441a      	add	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d916      	bls.n	800473a <UART_SetConfig+0x36e>
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d212      	bcs.n	800473a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f023 030f 	bic.w	r3, r3, #15
 800471c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	b29a      	uxth	r2, r3
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	4313      	orrs	r3, r2
 800472e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	8bfa      	ldrh	r2, [r7, #30]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	e056      	b.n	80047e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004740:	e052      	b.n	80047e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004746:	3b01      	subs	r3, #1
 8004748:	2b07      	cmp	r3, #7
 800474a:	d822      	bhi.n	8004792 <UART_SetConfig+0x3c6>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0x388>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004775 	.word	0x08004775
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004793 	.word	0x08004793
 8004760:	08004783 	.word	0x08004783
 8004764:	08004793 	.word	0x08004793
 8004768:	08004793 	.word	0x08004793
 800476c:	08004793 	.word	0x08004793
 8004770:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fc32 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800477a:	e010      	b.n	800479e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b26      	ldr	r3, [pc, #152]	; (8004818 <UART_SetConfig+0x44c>)
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004780:	e00d      	b.n	800479e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fb95 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004788:	e009      	b.n	800479e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004790:	e005      	b.n	800479e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800479c:	bf00      	nop
    }

    if (pclk != 0U)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d021      	beq.n	80047e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <UART_SetConfig+0x448>)
 80047aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ae:	461a      	mov	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	441a      	add	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d909      	bls.n	80047e2 <UART_SetConfig+0x416>
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d205      	bcs.n	80047e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
 80047e0:	e002      	b.n	80047e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2200      	movs	r2, #0
 80047fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004804:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004808:	4618      	mov	r0, r3
 800480a:	3730      	adds	r7, #48	; 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004812:	bf00      	nop
 8004814:	08006234 	.word	0x08006234
 8004818:	00f42400 	.word	0x00f42400

0800481c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01a      	beq.n	8004932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491a:	d10a      	bne.n	8004932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b098      	sub	sp, #96	; 0x60
 8004964:	af02      	add	r7, sp, #8
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004970:	f7fc fcea 	bl	8001348 <HAL_GetTick>
 8004974:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d12f      	bne.n	80049e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f88e 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d022      	beq.n	80049e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b2:	653b      	str	r3, [r7, #80]	; 0x50
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049bc:	647b      	str	r3, [r7, #68]	; 0x44
 80049be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e063      	b.n	8004aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d149      	bne.n	8004a86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fa:	2200      	movs	r2, #0
 80049fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f857 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03c      	beq.n	8004a86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	623b      	str	r3, [r7, #32]
   return(result);
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5e:	61fa      	str	r2, [r7, #28]
 8004a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	69b9      	ldr	r1, [r7, #24]
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e5      	bne.n	8004a3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e012      	b.n	8004aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3758      	adds	r7, #88	; 0x58
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac4:	e04f      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d04b      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fc fc3b 	bl	8001348 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e04e      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d037      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d034      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d031      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d110      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2208      	movs	r2, #8
 8004b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f838 	bl	8004b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2208      	movs	r2, #8
 8004b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e029      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b40:	d111      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f81e 	bl	8004b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e00f      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d0a0      	beq.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b095      	sub	sp, #84	; 0x54
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e6      	bne.n	8004b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3308      	adds	r3, #8
 8004bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e3      	bne.n	8004bc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d118      	bne.n	8004c3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f023 0310 	bic.w	r3, r3, #16
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6979      	ldr	r1, [r7, #20]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	613b      	str	r3, [r7, #16]
   return(result);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e6      	bne.n	8004c08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c4e:	bf00      	nop
 8004c50:	3754      	adds	r7, #84	; 0x54
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff fb91 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b088      	sub	sp, #32
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e6      	bne.n	8004c8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fb5c 	bl	800438c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd4:	bf00      	nop
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e027      	b.n	8004d7e <HAL_UARTEx_DisableFifoMode+0x66>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2224      	movs	r2, #36	; 0x24
 8004d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e02d      	b.n	8004dfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f850 	bl	8004e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e02d      	b.n	8004e7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2224      	movs	r2, #36	; 0x24
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f812 	bl	8004e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ea4:	e031      	b.n	8004f0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eaa:	2308      	movs	r3, #8
 8004eac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0e5b      	lsrs	r3, r3, #25
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	0f5b      	lsrs	r3, r3, #29
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	7b3a      	ldrb	r2, [r7, #12]
 8004ed2:	4911      	ldr	r1, [pc, #68]	; (8004f18 <UARTEx_SetNbDataToProcess+0x94>)
 8004ed4:	5c8a      	ldrb	r2, [r1, r2]
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eda:	7b3a      	ldrb	r2, [r7, #12]
 8004edc:	490f      	ldr	r1, [pc, #60]	; (8004f1c <UARTEx_SetNbDataToProcess+0x98>)
 8004ede:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	7b7a      	ldrb	r2, [r7, #13]
 8004ef0:	4909      	ldr	r1, [pc, #36]	; (8004f18 <UARTEx_SetNbDataToProcess+0x94>)
 8004ef2:	5c8a      	ldrb	r2, [r1, r2]
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ef8:	7b7a      	ldrb	r2, [r7, #13]
 8004efa:	4908      	ldr	r1, [pc, #32]	; (8004f1c <UARTEx_SetNbDataToProcess+0x98>)
 8004efc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004efe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	0800624c 	.word	0x0800624c
 8004f1c:	08006254 	.word	0x08006254

08004f20 <atoi>:
 8004f20:	220a      	movs	r2, #10
 8004f22:	2100      	movs	r1, #0
 8004f24:	f000 b882 	b.w	800502c <strtol>

08004f28 <_strtol_l.constprop.0>:
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2e:	d001      	beq.n	8004f34 <_strtol_l.constprop.0+0xc>
 8004f30:	2b24      	cmp	r3, #36	; 0x24
 8004f32:	d906      	bls.n	8004f42 <_strtol_l.constprop.0+0x1a>
 8004f34:	f000 fada 	bl	80054ec <__errno>
 8004f38:	2316      	movs	r3, #22
 8004f3a:	6003      	str	r3, [r0, #0]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005028 <_strtol_l.constprop.0+0x100>
 8004f46:	460d      	mov	r5, r1
 8004f48:	462e      	mov	r6, r5
 8004f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f4e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004f52:	f017 0708 	ands.w	r7, r7, #8
 8004f56:	d1f7      	bne.n	8004f48 <_strtol_l.constprop.0+0x20>
 8004f58:	2c2d      	cmp	r4, #45	; 0x2d
 8004f5a:	d132      	bne.n	8004fc2 <_strtol_l.constprop.0+0x9a>
 8004f5c:	782c      	ldrb	r4, [r5, #0]
 8004f5e:	2701      	movs	r7, #1
 8004f60:	1cb5      	adds	r5, r6, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d05b      	beq.n	800501e <_strtol_l.constprop.0+0xf6>
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d109      	bne.n	8004f7e <_strtol_l.constprop.0+0x56>
 8004f6a:	2c30      	cmp	r4, #48	; 0x30
 8004f6c:	d107      	bne.n	8004f7e <_strtol_l.constprop.0+0x56>
 8004f6e:	782c      	ldrb	r4, [r5, #0]
 8004f70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004f74:	2c58      	cmp	r4, #88	; 0x58
 8004f76:	d14d      	bne.n	8005014 <_strtol_l.constprop.0+0xec>
 8004f78:	786c      	ldrb	r4, [r5, #1]
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	3502      	adds	r5, #2
 8004f7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f86:	f04f 0e00 	mov.w	lr, #0
 8004f8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004f8e:	4676      	mov	r6, lr
 8004f90:	fb03 8a19 	mls	sl, r3, r9, r8
 8004f94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004f98:	f1bc 0f09 	cmp.w	ip, #9
 8004f9c:	d816      	bhi.n	8004fcc <_strtol_l.constprop.0+0xa4>
 8004f9e:	4664      	mov	r4, ip
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	dd24      	ble.n	8004fee <_strtol_l.constprop.0+0xc6>
 8004fa4:	f1be 3fff 	cmp.w	lr, #4294967295
 8004fa8:	d008      	beq.n	8004fbc <_strtol_l.constprop.0+0x94>
 8004faa:	45b1      	cmp	r9, r6
 8004fac:	d31c      	bcc.n	8004fe8 <_strtol_l.constprop.0+0xc0>
 8004fae:	d101      	bne.n	8004fb4 <_strtol_l.constprop.0+0x8c>
 8004fb0:	45a2      	cmp	sl, r4
 8004fb2:	db19      	blt.n	8004fe8 <_strtol_l.constprop.0+0xc0>
 8004fb4:	fb06 4603 	mla	r6, r6, r3, r4
 8004fb8:	f04f 0e01 	mov.w	lr, #1
 8004fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fc0:	e7e8      	b.n	8004f94 <_strtol_l.constprop.0+0x6c>
 8004fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8004fc4:	bf04      	itt	eq
 8004fc6:	782c      	ldrbeq	r4, [r5, #0]
 8004fc8:	1cb5      	addeq	r5, r6, #2
 8004fca:	e7ca      	b.n	8004f62 <_strtol_l.constprop.0+0x3a>
 8004fcc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004fd0:	f1bc 0f19 	cmp.w	ip, #25
 8004fd4:	d801      	bhi.n	8004fda <_strtol_l.constprop.0+0xb2>
 8004fd6:	3c37      	subs	r4, #55	; 0x37
 8004fd8:	e7e2      	b.n	8004fa0 <_strtol_l.constprop.0+0x78>
 8004fda:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004fde:	f1bc 0f19 	cmp.w	ip, #25
 8004fe2:	d804      	bhi.n	8004fee <_strtol_l.constprop.0+0xc6>
 8004fe4:	3c57      	subs	r4, #87	; 0x57
 8004fe6:	e7db      	b.n	8004fa0 <_strtol_l.constprop.0+0x78>
 8004fe8:	f04f 3eff 	mov.w	lr, #4294967295
 8004fec:	e7e6      	b.n	8004fbc <_strtol_l.constprop.0+0x94>
 8004fee:	f1be 3fff 	cmp.w	lr, #4294967295
 8004ff2:	d105      	bne.n	8005000 <_strtol_l.constprop.0+0xd8>
 8004ff4:	2322      	movs	r3, #34	; 0x22
 8004ff6:	6003      	str	r3, [r0, #0]
 8004ff8:	4646      	mov	r6, r8
 8004ffa:	b942      	cbnz	r2, 800500e <_strtol_l.constprop.0+0xe6>
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	e79e      	b.n	8004f3e <_strtol_l.constprop.0+0x16>
 8005000:	b107      	cbz	r7, 8005004 <_strtol_l.constprop.0+0xdc>
 8005002:	4276      	negs	r6, r6
 8005004:	2a00      	cmp	r2, #0
 8005006:	d0f9      	beq.n	8004ffc <_strtol_l.constprop.0+0xd4>
 8005008:	f1be 0f00 	cmp.w	lr, #0
 800500c:	d000      	beq.n	8005010 <_strtol_l.constprop.0+0xe8>
 800500e:	1e69      	subs	r1, r5, #1
 8005010:	6011      	str	r1, [r2, #0]
 8005012:	e7f3      	b.n	8004ffc <_strtol_l.constprop.0+0xd4>
 8005014:	2430      	movs	r4, #48	; 0x30
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1b1      	bne.n	8004f7e <_strtol_l.constprop.0+0x56>
 800501a:	2308      	movs	r3, #8
 800501c:	e7af      	b.n	8004f7e <_strtol_l.constprop.0+0x56>
 800501e:	2c30      	cmp	r4, #48	; 0x30
 8005020:	d0a5      	beq.n	8004f6e <_strtol_l.constprop.0+0x46>
 8005022:	230a      	movs	r3, #10
 8005024:	e7ab      	b.n	8004f7e <_strtol_l.constprop.0+0x56>
 8005026:	bf00      	nop
 8005028:	0800625d 	.word	0x0800625d

0800502c <strtol>:
 800502c:	4613      	mov	r3, r2
 800502e:	460a      	mov	r2, r1
 8005030:	4601      	mov	r1, r0
 8005032:	4802      	ldr	r0, [pc, #8]	; (800503c <strtol+0x10>)
 8005034:	6800      	ldr	r0, [r0, #0]
 8005036:	f7ff bf77 	b.w	8004f28 <_strtol_l.constprop.0>
 800503a:	bf00      	nop
 800503c:	2000006c 	.word	0x2000006c

08005040 <std>:
 8005040:	2300      	movs	r3, #0
 8005042:	b510      	push	{r4, lr}
 8005044:	4604      	mov	r4, r0
 8005046:	e9c0 3300 	strd	r3, r3, [r0]
 800504a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800504e:	6083      	str	r3, [r0, #8]
 8005050:	8181      	strh	r1, [r0, #12]
 8005052:	6643      	str	r3, [r0, #100]	; 0x64
 8005054:	81c2      	strh	r2, [r0, #14]
 8005056:	6183      	str	r3, [r0, #24]
 8005058:	4619      	mov	r1, r3
 800505a:	2208      	movs	r2, #8
 800505c:	305c      	adds	r0, #92	; 0x5c
 800505e:	f000 f9f7 	bl	8005450 <memset>
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <std+0x58>)
 8005064:	6263      	str	r3, [r4, #36]	; 0x24
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <std+0x5c>)
 8005068:	62a3      	str	r3, [r4, #40]	; 0x28
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <std+0x60>)
 800506c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <std+0x64>)
 8005070:	6323      	str	r3, [r4, #48]	; 0x30
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <std+0x68>)
 8005074:	6224      	str	r4, [r4, #32]
 8005076:	429c      	cmp	r4, r3
 8005078:	d006      	beq.n	8005088 <std+0x48>
 800507a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800507e:	4294      	cmp	r4, r2
 8005080:	d002      	beq.n	8005088 <std+0x48>
 8005082:	33d0      	adds	r3, #208	; 0xd0
 8005084:	429c      	cmp	r4, r3
 8005086:	d105      	bne.n	8005094 <std+0x54>
 8005088:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	f000 ba56 	b.w	8005540 <__retarget_lock_init_recursive>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	bf00      	nop
 8005098:	080052a1 	.word	0x080052a1
 800509c:	080052c3 	.word	0x080052c3
 80050a0:	080052fb 	.word	0x080052fb
 80050a4:	0800531f 	.word	0x0800531f
 80050a8:	20000660 	.word	0x20000660

080050ac <stdio_exit_handler>:
 80050ac:	4a02      	ldr	r2, [pc, #8]	; (80050b8 <stdio_exit_handler+0xc>)
 80050ae:	4903      	ldr	r1, [pc, #12]	; (80050bc <stdio_exit_handler+0x10>)
 80050b0:	4803      	ldr	r0, [pc, #12]	; (80050c0 <stdio_exit_handler+0x14>)
 80050b2:	f000 b869 	b.w	8005188 <_fwalk_sglue>
 80050b6:	bf00      	nop
 80050b8:	20000014 	.word	0x20000014
 80050bc:	08005ded 	.word	0x08005ded
 80050c0:	20000020 	.word	0x20000020

080050c4 <cleanup_stdio>:
 80050c4:	6841      	ldr	r1, [r0, #4]
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <cleanup_stdio+0x34>)
 80050c8:	4299      	cmp	r1, r3
 80050ca:	b510      	push	{r4, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	d001      	beq.n	80050d4 <cleanup_stdio+0x10>
 80050d0:	f000 fe8c 	bl	8005dec <_fflush_r>
 80050d4:	68a1      	ldr	r1, [r4, #8]
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <cleanup_stdio+0x38>)
 80050d8:	4299      	cmp	r1, r3
 80050da:	d002      	beq.n	80050e2 <cleanup_stdio+0x1e>
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 fe85 	bl	8005dec <_fflush_r>
 80050e2:	68e1      	ldr	r1, [r4, #12]
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <cleanup_stdio+0x3c>)
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d004      	beq.n	80050f4 <cleanup_stdio+0x30>
 80050ea:	4620      	mov	r0, r4
 80050ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f0:	f000 be7c 	b.w	8005dec <_fflush_r>
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	20000660 	.word	0x20000660
 80050fc:	200006c8 	.word	0x200006c8
 8005100:	20000730 	.word	0x20000730

08005104 <global_stdio_init.part.0>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <global_stdio_init.part.0+0x30>)
 8005108:	4c0b      	ldr	r4, [pc, #44]	; (8005138 <global_stdio_init.part.0+0x34>)
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <global_stdio_init.part.0+0x38>)
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	4620      	mov	r0, r4
 8005110:	2200      	movs	r2, #0
 8005112:	2104      	movs	r1, #4
 8005114:	f7ff ff94 	bl	8005040 <std>
 8005118:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800511c:	2201      	movs	r2, #1
 800511e:	2109      	movs	r1, #9
 8005120:	f7ff ff8e 	bl	8005040 <std>
 8005124:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005128:	2202      	movs	r2, #2
 800512a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512e:	2112      	movs	r1, #18
 8005130:	f7ff bf86 	b.w	8005040 <std>
 8005134:	20000798 	.word	0x20000798
 8005138:	20000660 	.word	0x20000660
 800513c:	080050ad 	.word	0x080050ad

08005140 <__sfp_lock_acquire>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__sfp_lock_acquire+0x8>)
 8005142:	f000 b9fe 	b.w	8005542 <__retarget_lock_acquire_recursive>
 8005146:	bf00      	nop
 8005148:	200007a1 	.word	0x200007a1

0800514c <__sfp_lock_release>:
 800514c:	4801      	ldr	r0, [pc, #4]	; (8005154 <__sfp_lock_release+0x8>)
 800514e:	f000 b9f9 	b.w	8005544 <__retarget_lock_release_recursive>
 8005152:	bf00      	nop
 8005154:	200007a1 	.word	0x200007a1

08005158 <__sinit>:
 8005158:	b510      	push	{r4, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	f7ff fff0 	bl	8005140 <__sfp_lock_acquire>
 8005160:	6a23      	ldr	r3, [r4, #32]
 8005162:	b11b      	cbz	r3, 800516c <__sinit+0x14>
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f7ff bff0 	b.w	800514c <__sfp_lock_release>
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <__sinit+0x28>)
 800516e:	6223      	str	r3, [r4, #32]
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <__sinit+0x2c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f5      	bne.n	8005164 <__sinit+0xc>
 8005178:	f7ff ffc4 	bl	8005104 <global_stdio_init.part.0>
 800517c:	e7f2      	b.n	8005164 <__sinit+0xc>
 800517e:	bf00      	nop
 8005180:	080050c5 	.word	0x080050c5
 8005184:	20000798 	.word	0x20000798

08005188 <_fwalk_sglue>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4607      	mov	r7, r0
 800518e:	4688      	mov	r8, r1
 8005190:	4614      	mov	r4, r2
 8005192:	2600      	movs	r6, #0
 8005194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005198:	f1b9 0901 	subs.w	r9, r9, #1
 800519c:	d505      	bpl.n	80051aa <_fwalk_sglue+0x22>
 800519e:	6824      	ldr	r4, [r4, #0]
 80051a0:	2c00      	cmp	r4, #0
 80051a2:	d1f7      	bne.n	8005194 <_fwalk_sglue+0xc>
 80051a4:	4630      	mov	r0, r6
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d907      	bls.n	80051c0 <_fwalk_sglue+0x38>
 80051b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b4:	3301      	adds	r3, #1
 80051b6:	d003      	beq.n	80051c0 <_fwalk_sglue+0x38>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4638      	mov	r0, r7
 80051bc:	47c0      	blx	r8
 80051be:	4306      	orrs	r6, r0
 80051c0:	3568      	adds	r5, #104	; 0x68
 80051c2:	e7e9      	b.n	8005198 <_fwalk_sglue+0x10>

080051c4 <iprintf>:
 80051c4:	b40f      	push	{r0, r1, r2, r3}
 80051c6:	b507      	push	{r0, r1, r2, lr}
 80051c8:	4906      	ldr	r1, [pc, #24]	; (80051e4 <iprintf+0x20>)
 80051ca:	ab04      	add	r3, sp, #16
 80051cc:	6808      	ldr	r0, [r1, #0]
 80051ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d2:	6881      	ldr	r1, [r0, #8]
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	f000 fad9 	bl	800578c <_vfiprintf_r>
 80051da:	b003      	add	sp, #12
 80051dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e0:	b004      	add	sp, #16
 80051e2:	4770      	bx	lr
 80051e4:	2000006c 	.word	0x2000006c

080051e8 <_puts_r>:
 80051e8:	6a03      	ldr	r3, [r0, #32]
 80051ea:	b570      	push	{r4, r5, r6, lr}
 80051ec:	6884      	ldr	r4, [r0, #8]
 80051ee:	4605      	mov	r5, r0
 80051f0:	460e      	mov	r6, r1
 80051f2:	b90b      	cbnz	r3, 80051f8 <_puts_r+0x10>
 80051f4:	f7ff ffb0 	bl	8005158 <__sinit>
 80051f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051fa:	07db      	lsls	r3, r3, #31
 80051fc:	d405      	bmi.n	800520a <_puts_r+0x22>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	0598      	lsls	r0, r3, #22
 8005202:	d402      	bmi.n	800520a <_puts_r+0x22>
 8005204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005206:	f000 f99c 	bl	8005542 <__retarget_lock_acquire_recursive>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	0719      	lsls	r1, r3, #28
 800520e:	d513      	bpl.n	8005238 <_puts_r+0x50>
 8005210:	6923      	ldr	r3, [r4, #16]
 8005212:	b18b      	cbz	r3, 8005238 <_puts_r+0x50>
 8005214:	3e01      	subs	r6, #1
 8005216:	68a3      	ldr	r3, [r4, #8]
 8005218:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800521c:	3b01      	subs	r3, #1
 800521e:	60a3      	str	r3, [r4, #8]
 8005220:	b9e9      	cbnz	r1, 800525e <_puts_r+0x76>
 8005222:	2b00      	cmp	r3, #0
 8005224:	da2e      	bge.n	8005284 <_puts_r+0x9c>
 8005226:	4622      	mov	r2, r4
 8005228:	210a      	movs	r1, #10
 800522a:	4628      	mov	r0, r5
 800522c:	f000 f87b 	bl	8005326 <__swbuf_r>
 8005230:	3001      	adds	r0, #1
 8005232:	d007      	beq.n	8005244 <_puts_r+0x5c>
 8005234:	250a      	movs	r5, #10
 8005236:	e007      	b.n	8005248 <_puts_r+0x60>
 8005238:	4621      	mov	r1, r4
 800523a:	4628      	mov	r0, r5
 800523c:	f000 f8b0 	bl	80053a0 <__swsetup_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	d0e7      	beq.n	8005214 <_puts_r+0x2c>
 8005244:	f04f 35ff 	mov.w	r5, #4294967295
 8005248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524a:	07da      	lsls	r2, r3, #31
 800524c:	d405      	bmi.n	800525a <_puts_r+0x72>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	059b      	lsls	r3, r3, #22
 8005252:	d402      	bmi.n	800525a <_puts_r+0x72>
 8005254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005256:	f000 f975 	bl	8005544 <__retarget_lock_release_recursive>
 800525a:	4628      	mov	r0, r5
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	2b00      	cmp	r3, #0
 8005260:	da04      	bge.n	800526c <_puts_r+0x84>
 8005262:	69a2      	ldr	r2, [r4, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	dc06      	bgt.n	8005276 <_puts_r+0x8e>
 8005268:	290a      	cmp	r1, #10
 800526a:	d004      	beq.n	8005276 <_puts_r+0x8e>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	6022      	str	r2, [r4, #0]
 8005272:	7019      	strb	r1, [r3, #0]
 8005274:	e7cf      	b.n	8005216 <_puts_r+0x2e>
 8005276:	4622      	mov	r2, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f854 	bl	8005326 <__swbuf_r>
 800527e:	3001      	adds	r0, #1
 8005280:	d1c9      	bne.n	8005216 <_puts_r+0x2e>
 8005282:	e7df      	b.n	8005244 <_puts_r+0x5c>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	250a      	movs	r5, #10
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	701d      	strb	r5, [r3, #0]
 800528e:	e7db      	b.n	8005248 <_puts_r+0x60>

08005290 <puts>:
 8005290:	4b02      	ldr	r3, [pc, #8]	; (800529c <puts+0xc>)
 8005292:	4601      	mov	r1, r0
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f7ff bfa7 	b.w	80051e8 <_puts_r>
 800529a:	bf00      	nop
 800529c:	2000006c 	.word	0x2000006c

080052a0 <__sread>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	f000 f8fc 	bl	80054a4 <_read_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	bfab      	itete	ge
 80052b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052b2:	89a3      	ldrhlt	r3, [r4, #12]
 80052b4:	181b      	addge	r3, r3, r0
 80052b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ba:	bfac      	ite	ge
 80052bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80052be:	81a3      	strhlt	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__swrite>:
 80052c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	461f      	mov	r7, r3
 80052c8:	898b      	ldrh	r3, [r1, #12]
 80052ca:	05db      	lsls	r3, r3, #23
 80052cc:	4605      	mov	r5, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	4616      	mov	r6, r2
 80052d2:	d505      	bpl.n	80052e0 <__swrite+0x1e>
 80052d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d8:	2302      	movs	r3, #2
 80052da:	2200      	movs	r2, #0
 80052dc:	f000 f8d0 	bl	8005480 <_lseek_r>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	4632      	mov	r2, r6
 80052ee:	463b      	mov	r3, r7
 80052f0:	4628      	mov	r0, r5
 80052f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052f6:	f000 b8e7 	b.w	80054c8 <_write_r>

080052fa <__sseek>:
 80052fa:	b510      	push	{r4, lr}
 80052fc:	460c      	mov	r4, r1
 80052fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005302:	f000 f8bd 	bl	8005480 <_lseek_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	bf15      	itete	ne
 800530c:	6560      	strne	r0, [r4, #84]	; 0x54
 800530e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005316:	81a3      	strheq	r3, [r4, #12]
 8005318:	bf18      	it	ne
 800531a:	81a3      	strhne	r3, [r4, #12]
 800531c:	bd10      	pop	{r4, pc}

0800531e <__sclose>:
 800531e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005322:	f000 b89d 	b.w	8005460 <_close_r>

08005326 <__swbuf_r>:
 8005326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005328:	460e      	mov	r6, r1
 800532a:	4614      	mov	r4, r2
 800532c:	4605      	mov	r5, r0
 800532e:	b118      	cbz	r0, 8005338 <__swbuf_r+0x12>
 8005330:	6a03      	ldr	r3, [r0, #32]
 8005332:	b90b      	cbnz	r3, 8005338 <__swbuf_r+0x12>
 8005334:	f7ff ff10 	bl	8005158 <__sinit>
 8005338:	69a3      	ldr	r3, [r4, #24]
 800533a:	60a3      	str	r3, [r4, #8]
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	071a      	lsls	r2, r3, #28
 8005340:	d525      	bpl.n	800538e <__swbuf_r+0x68>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	b31b      	cbz	r3, 800538e <__swbuf_r+0x68>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	6922      	ldr	r2, [r4, #16]
 800534a:	1a98      	subs	r0, r3, r2
 800534c:	6963      	ldr	r3, [r4, #20]
 800534e:	b2f6      	uxtb	r6, r6
 8005350:	4283      	cmp	r3, r0
 8005352:	4637      	mov	r7, r6
 8005354:	dc04      	bgt.n	8005360 <__swbuf_r+0x3a>
 8005356:	4621      	mov	r1, r4
 8005358:	4628      	mov	r0, r5
 800535a:	f000 fd47 	bl	8005dec <_fflush_r>
 800535e:	b9e0      	cbnz	r0, 800539a <__swbuf_r+0x74>
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	3b01      	subs	r3, #1
 8005364:	60a3      	str	r3, [r4, #8]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	6022      	str	r2, [r4, #0]
 800536c:	701e      	strb	r6, [r3, #0]
 800536e:	6962      	ldr	r2, [r4, #20]
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	429a      	cmp	r2, r3
 8005374:	d004      	beq.n	8005380 <__swbuf_r+0x5a>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	07db      	lsls	r3, r3, #31
 800537a:	d506      	bpl.n	800538a <__swbuf_r+0x64>
 800537c:	2e0a      	cmp	r6, #10
 800537e:	d104      	bne.n	800538a <__swbuf_r+0x64>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 fd32 	bl	8005dec <_fflush_r>
 8005388:	b938      	cbnz	r0, 800539a <__swbuf_r+0x74>
 800538a:	4638      	mov	r0, r7
 800538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f805 	bl	80053a0 <__swsetup_r>
 8005396:	2800      	cmp	r0, #0
 8005398:	d0d5      	beq.n	8005346 <__swbuf_r+0x20>
 800539a:	f04f 37ff 	mov.w	r7, #4294967295
 800539e:	e7f4      	b.n	800538a <__swbuf_r+0x64>

080053a0 <__swsetup_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4b2a      	ldr	r3, [pc, #168]	; (800544c <__swsetup_r+0xac>)
 80053a4:	4605      	mov	r5, r0
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	460c      	mov	r4, r1
 80053aa:	b118      	cbz	r0, 80053b4 <__swsetup_r+0x14>
 80053ac:	6a03      	ldr	r3, [r0, #32]
 80053ae:	b90b      	cbnz	r3, 80053b4 <__swsetup_r+0x14>
 80053b0:	f7ff fed2 	bl	8005158 <__sinit>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053ba:	0718      	lsls	r0, r3, #28
 80053bc:	d422      	bmi.n	8005404 <__swsetup_r+0x64>
 80053be:	06d9      	lsls	r1, r3, #27
 80053c0:	d407      	bmi.n	80053d2 <__swsetup_r+0x32>
 80053c2:	2309      	movs	r3, #9
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	e034      	b.n	800543c <__swsetup_r+0x9c>
 80053d2:	0758      	lsls	r0, r3, #29
 80053d4:	d512      	bpl.n	80053fc <__swsetup_r+0x5c>
 80053d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d8:	b141      	cbz	r1, 80053ec <__swsetup_r+0x4c>
 80053da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053de:	4299      	cmp	r1, r3
 80053e0:	d002      	beq.n	80053e8 <__swsetup_r+0x48>
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f8b0 	bl	8005548 <_free_r>
 80053e8:	2300      	movs	r3, #0
 80053ea:	6363      	str	r3, [r4, #52]	; 0x34
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	2300      	movs	r3, #0
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	f043 0308 	orr.w	r3, r3, #8
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	b94b      	cbnz	r3, 800541c <__swsetup_r+0x7c>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005412:	d003      	beq.n	800541c <__swsetup_r+0x7c>
 8005414:	4621      	mov	r1, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f000 fd36 	bl	8005e88 <__smakebuf_r>
 800541c:	89a0      	ldrh	r0, [r4, #12]
 800541e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005422:	f010 0301 	ands.w	r3, r0, #1
 8005426:	d00a      	beq.n	800543e <__swsetup_r+0x9e>
 8005428:	2300      	movs	r3, #0
 800542a:	60a3      	str	r3, [r4, #8]
 800542c:	6963      	ldr	r3, [r4, #20]
 800542e:	425b      	negs	r3, r3
 8005430:	61a3      	str	r3, [r4, #24]
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	b943      	cbnz	r3, 8005448 <__swsetup_r+0xa8>
 8005436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800543a:	d1c4      	bne.n	80053c6 <__swsetup_r+0x26>
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	0781      	lsls	r1, r0, #30
 8005440:	bf58      	it	pl
 8005442:	6963      	ldrpl	r3, [r4, #20]
 8005444:	60a3      	str	r3, [r4, #8]
 8005446:	e7f4      	b.n	8005432 <__swsetup_r+0x92>
 8005448:	2000      	movs	r0, #0
 800544a:	e7f7      	b.n	800543c <__swsetup_r+0x9c>
 800544c:	2000006c 	.word	0x2000006c

08005450 <memset>:
 8005450:	4402      	add	r2, r0
 8005452:	4603      	mov	r3, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <_close_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d06      	ldr	r5, [pc, #24]	; (800547c <_close_r+0x1c>)
 8005464:	2300      	movs	r3, #0
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	f7fb fc9b 	bl	8000da6 <_close>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_close_r+0x1a>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_close_r+0x1a>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	2000079c 	.word	0x2000079c

08005480 <_lseek_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4d07      	ldr	r5, [pc, #28]	; (80054a0 <_lseek_r+0x20>)
 8005484:	4604      	mov	r4, r0
 8005486:	4608      	mov	r0, r1
 8005488:	4611      	mov	r1, r2
 800548a:	2200      	movs	r2, #0
 800548c:	602a      	str	r2, [r5, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	f7fb fcb0 	bl	8000df4 <_lseek>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_lseek_r+0x1e>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b103      	cbz	r3, 800549e <_lseek_r+0x1e>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	2000079c 	.word	0x2000079c

080054a4 <_read_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d07      	ldr	r5, [pc, #28]	; (80054c4 <_read_r+0x20>)
 80054a8:	4604      	mov	r4, r0
 80054aa:	4608      	mov	r0, r1
 80054ac:	4611      	mov	r1, r2
 80054ae:	2200      	movs	r2, #0
 80054b0:	602a      	str	r2, [r5, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f7fb fc3e 	bl	8000d34 <_read>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_read_r+0x1e>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_read_r+0x1e>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	2000079c 	.word	0x2000079c

080054c8 <_write_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d07      	ldr	r5, [pc, #28]	; (80054e8 <_write_r+0x20>)
 80054cc:	4604      	mov	r4, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	602a      	str	r2, [r5, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7fb fc49 	bl	8000d6e <_write>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_write_r+0x1e>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_write_r+0x1e>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	2000079c 	.word	0x2000079c

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000006c 	.word	0x2000006c

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4d0d      	ldr	r5, [pc, #52]	; (8005530 <__libc_init_array+0x38>)
 80054fc:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	2600      	movs	r6, #0
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	4d0b      	ldr	r5, [pc, #44]	; (8005538 <__libc_init_array+0x40>)
 800550a:	4c0c      	ldr	r4, [pc, #48]	; (800553c <__libc_init_array+0x44>)
 800550c:	f000 fd2a 	bl	8005f64 <_init>
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	2600      	movs	r6, #0
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08006398 	.word	0x08006398
 8005534:	08006398 	.word	0x08006398
 8005538:	08006398 	.word	0x08006398
 800553c:	0800639c 	.word	0x0800639c

08005540 <__retarget_lock_init_recursive>:
 8005540:	4770      	bx	lr

08005542 <__retarget_lock_acquire_recursive>:
 8005542:	4770      	bx	lr

08005544 <__retarget_lock_release_recursive>:
 8005544:	4770      	bx	lr
	...

08005548 <_free_r>:
 8005548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800554a:	2900      	cmp	r1, #0
 800554c:	d044      	beq.n	80055d8 <_free_r+0x90>
 800554e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005552:	9001      	str	r0, [sp, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f1a1 0404 	sub.w	r4, r1, #4
 800555a:	bfb8      	it	lt
 800555c:	18e4      	addlt	r4, r4, r3
 800555e:	f000 f8df 	bl	8005720 <__malloc_lock>
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <_free_r+0x94>)
 8005564:	9801      	ldr	r0, [sp, #4]
 8005566:	6813      	ldr	r3, [r2, #0]
 8005568:	b933      	cbnz	r3, 8005578 <_free_r+0x30>
 800556a:	6063      	str	r3, [r4, #4]
 800556c:	6014      	str	r4, [r2, #0]
 800556e:	b003      	add	sp, #12
 8005570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005574:	f000 b8da 	b.w	800572c <__malloc_unlock>
 8005578:	42a3      	cmp	r3, r4
 800557a:	d908      	bls.n	800558e <_free_r+0x46>
 800557c:	6825      	ldr	r5, [r4, #0]
 800557e:	1961      	adds	r1, r4, r5
 8005580:	428b      	cmp	r3, r1
 8005582:	bf01      	itttt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	1949      	addeq	r1, r1, r5
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	e7ed      	b.n	800556a <_free_r+0x22>
 800558e:	461a      	mov	r2, r3
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b10b      	cbz	r3, 8005598 <_free_r+0x50>
 8005594:	42a3      	cmp	r3, r4
 8005596:	d9fa      	bls.n	800558e <_free_r+0x46>
 8005598:	6811      	ldr	r1, [r2, #0]
 800559a:	1855      	adds	r5, r2, r1
 800559c:	42a5      	cmp	r5, r4
 800559e:	d10b      	bne.n	80055b8 <_free_r+0x70>
 80055a0:	6824      	ldr	r4, [r4, #0]
 80055a2:	4421      	add	r1, r4
 80055a4:	1854      	adds	r4, r2, r1
 80055a6:	42a3      	cmp	r3, r4
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	d1e0      	bne.n	800556e <_free_r+0x26>
 80055ac:	681c      	ldr	r4, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	6053      	str	r3, [r2, #4]
 80055b2:	440c      	add	r4, r1
 80055b4:	6014      	str	r4, [r2, #0]
 80055b6:	e7da      	b.n	800556e <_free_r+0x26>
 80055b8:	d902      	bls.n	80055c0 <_free_r+0x78>
 80055ba:	230c      	movs	r3, #12
 80055bc:	6003      	str	r3, [r0, #0]
 80055be:	e7d6      	b.n	800556e <_free_r+0x26>
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	1961      	adds	r1, r4, r5
 80055c4:	428b      	cmp	r3, r1
 80055c6:	bf04      	itt	eq
 80055c8:	6819      	ldreq	r1, [r3, #0]
 80055ca:	685b      	ldreq	r3, [r3, #4]
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	bf04      	itt	eq
 80055d0:	1949      	addeq	r1, r1, r5
 80055d2:	6021      	streq	r1, [r4, #0]
 80055d4:	6054      	str	r4, [r2, #4]
 80055d6:	e7ca      	b.n	800556e <_free_r+0x26>
 80055d8:	b003      	add	sp, #12
 80055da:	bd30      	pop	{r4, r5, pc}
 80055dc:	200007a4 	.word	0x200007a4

080055e0 <sbrk_aligned>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4e0e      	ldr	r6, [pc, #56]	; (800561c <sbrk_aligned+0x3c>)
 80055e4:	460c      	mov	r4, r1
 80055e6:	6831      	ldr	r1, [r6, #0]
 80055e8:	4605      	mov	r5, r0
 80055ea:	b911      	cbnz	r1, 80055f2 <sbrk_aligned+0x12>
 80055ec:	f000 fcaa 	bl	8005f44 <_sbrk_r>
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	4621      	mov	r1, r4
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 fca5 	bl	8005f44 <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d00a      	beq.n	8005614 <sbrk_aligned+0x34>
 80055fe:	1cc4      	adds	r4, r0, #3
 8005600:	f024 0403 	bic.w	r4, r4, #3
 8005604:	42a0      	cmp	r0, r4
 8005606:	d007      	beq.n	8005618 <sbrk_aligned+0x38>
 8005608:	1a21      	subs	r1, r4, r0
 800560a:	4628      	mov	r0, r5
 800560c:	f000 fc9a 	bl	8005f44 <_sbrk_r>
 8005610:	3001      	adds	r0, #1
 8005612:	d101      	bne.n	8005618 <sbrk_aligned+0x38>
 8005614:	f04f 34ff 	mov.w	r4, #4294967295
 8005618:	4620      	mov	r0, r4
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	200007a8 	.word	0x200007a8

08005620 <_malloc_r>:
 8005620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005624:	1ccd      	adds	r5, r1, #3
 8005626:	f025 0503 	bic.w	r5, r5, #3
 800562a:	3508      	adds	r5, #8
 800562c:	2d0c      	cmp	r5, #12
 800562e:	bf38      	it	cc
 8005630:	250c      	movcc	r5, #12
 8005632:	2d00      	cmp	r5, #0
 8005634:	4607      	mov	r7, r0
 8005636:	db01      	blt.n	800563c <_malloc_r+0x1c>
 8005638:	42a9      	cmp	r1, r5
 800563a:	d905      	bls.n	8005648 <_malloc_r+0x28>
 800563c:	230c      	movs	r3, #12
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	2600      	movs	r6, #0
 8005642:	4630      	mov	r0, r6
 8005644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005648:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800571c <_malloc_r+0xfc>
 800564c:	f000 f868 	bl	8005720 <__malloc_lock>
 8005650:	f8d8 3000 	ldr.w	r3, [r8]
 8005654:	461c      	mov	r4, r3
 8005656:	bb5c      	cbnz	r4, 80056b0 <_malloc_r+0x90>
 8005658:	4629      	mov	r1, r5
 800565a:	4638      	mov	r0, r7
 800565c:	f7ff ffc0 	bl	80055e0 <sbrk_aligned>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	4604      	mov	r4, r0
 8005664:	d155      	bne.n	8005712 <_malloc_r+0xf2>
 8005666:	f8d8 4000 	ldr.w	r4, [r8]
 800566a:	4626      	mov	r6, r4
 800566c:	2e00      	cmp	r6, #0
 800566e:	d145      	bne.n	80056fc <_malloc_r+0xdc>
 8005670:	2c00      	cmp	r4, #0
 8005672:	d048      	beq.n	8005706 <_malloc_r+0xe6>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	4631      	mov	r1, r6
 8005678:	4638      	mov	r0, r7
 800567a:	eb04 0903 	add.w	r9, r4, r3
 800567e:	f000 fc61 	bl	8005f44 <_sbrk_r>
 8005682:	4581      	cmp	r9, r0
 8005684:	d13f      	bne.n	8005706 <_malloc_r+0xe6>
 8005686:	6821      	ldr	r1, [r4, #0]
 8005688:	1a6d      	subs	r5, r5, r1
 800568a:	4629      	mov	r1, r5
 800568c:	4638      	mov	r0, r7
 800568e:	f7ff ffa7 	bl	80055e0 <sbrk_aligned>
 8005692:	3001      	adds	r0, #1
 8005694:	d037      	beq.n	8005706 <_malloc_r+0xe6>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	442b      	add	r3, r5
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	f8d8 3000 	ldr.w	r3, [r8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d038      	beq.n	8005716 <_malloc_r+0xf6>
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	42a2      	cmp	r2, r4
 80056a8:	d12b      	bne.n	8005702 <_malloc_r+0xe2>
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e00f      	b.n	80056d0 <_malloc_r+0xb0>
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	1b52      	subs	r2, r2, r5
 80056b4:	d41f      	bmi.n	80056f6 <_malloc_r+0xd6>
 80056b6:	2a0b      	cmp	r2, #11
 80056b8:	d917      	bls.n	80056ea <_malloc_r+0xca>
 80056ba:	1961      	adds	r1, r4, r5
 80056bc:	42a3      	cmp	r3, r4
 80056be:	6025      	str	r5, [r4, #0]
 80056c0:	bf18      	it	ne
 80056c2:	6059      	strne	r1, [r3, #4]
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	bf08      	it	eq
 80056c8:	f8c8 1000 	streq.w	r1, [r8]
 80056cc:	5162      	str	r2, [r4, r5]
 80056ce:	604b      	str	r3, [r1, #4]
 80056d0:	4638      	mov	r0, r7
 80056d2:	f104 060b 	add.w	r6, r4, #11
 80056d6:	f000 f829 	bl	800572c <__malloc_unlock>
 80056da:	f026 0607 	bic.w	r6, r6, #7
 80056de:	1d23      	adds	r3, r4, #4
 80056e0:	1af2      	subs	r2, r6, r3
 80056e2:	d0ae      	beq.n	8005642 <_malloc_r+0x22>
 80056e4:	1b9b      	subs	r3, r3, r6
 80056e6:	50a3      	str	r3, [r4, r2]
 80056e8:	e7ab      	b.n	8005642 <_malloc_r+0x22>
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	6862      	ldr	r2, [r4, #4]
 80056ee:	d1dd      	bne.n	80056ac <_malloc_r+0x8c>
 80056f0:	f8c8 2000 	str.w	r2, [r8]
 80056f4:	e7ec      	b.n	80056d0 <_malloc_r+0xb0>
 80056f6:	4623      	mov	r3, r4
 80056f8:	6864      	ldr	r4, [r4, #4]
 80056fa:	e7ac      	b.n	8005656 <_malloc_r+0x36>
 80056fc:	4634      	mov	r4, r6
 80056fe:	6876      	ldr	r6, [r6, #4]
 8005700:	e7b4      	b.n	800566c <_malloc_r+0x4c>
 8005702:	4613      	mov	r3, r2
 8005704:	e7cc      	b.n	80056a0 <_malloc_r+0x80>
 8005706:	230c      	movs	r3, #12
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4638      	mov	r0, r7
 800570c:	f000 f80e 	bl	800572c <__malloc_unlock>
 8005710:	e797      	b.n	8005642 <_malloc_r+0x22>
 8005712:	6025      	str	r5, [r4, #0]
 8005714:	e7dc      	b.n	80056d0 <_malloc_r+0xb0>
 8005716:	605b      	str	r3, [r3, #4]
 8005718:	deff      	udf	#255	; 0xff
 800571a:	bf00      	nop
 800571c:	200007a4 	.word	0x200007a4

08005720 <__malloc_lock>:
 8005720:	4801      	ldr	r0, [pc, #4]	; (8005728 <__malloc_lock+0x8>)
 8005722:	f7ff bf0e 	b.w	8005542 <__retarget_lock_acquire_recursive>
 8005726:	bf00      	nop
 8005728:	200007a0 	.word	0x200007a0

0800572c <__malloc_unlock>:
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <__malloc_unlock+0x8>)
 800572e:	f7ff bf09 	b.w	8005544 <__retarget_lock_release_recursive>
 8005732:	bf00      	nop
 8005734:	200007a0 	.word	0x200007a0

08005738 <__sfputc_r>:
 8005738:	6893      	ldr	r3, [r2, #8]
 800573a:	3b01      	subs	r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	b410      	push	{r4}
 8005740:	6093      	str	r3, [r2, #8]
 8005742:	da08      	bge.n	8005756 <__sfputc_r+0x1e>
 8005744:	6994      	ldr	r4, [r2, #24]
 8005746:	42a3      	cmp	r3, r4
 8005748:	db01      	blt.n	800574e <__sfputc_r+0x16>
 800574a:	290a      	cmp	r1, #10
 800574c:	d103      	bne.n	8005756 <__sfputc_r+0x1e>
 800574e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005752:	f7ff bde8 	b.w	8005326 <__swbuf_r>
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	1c58      	adds	r0, r3, #1
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	7019      	strb	r1, [r3, #0]
 800575e:	4608      	mov	r0, r1
 8005760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005764:	4770      	bx	lr

08005766 <__sfputs_r>:
 8005766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005768:	4606      	mov	r6, r0
 800576a:	460f      	mov	r7, r1
 800576c:	4614      	mov	r4, r2
 800576e:	18d5      	adds	r5, r2, r3
 8005770:	42ac      	cmp	r4, r5
 8005772:	d101      	bne.n	8005778 <__sfputs_r+0x12>
 8005774:	2000      	movs	r0, #0
 8005776:	e007      	b.n	8005788 <__sfputs_r+0x22>
 8005778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577c:	463a      	mov	r2, r7
 800577e:	4630      	mov	r0, r6
 8005780:	f7ff ffda 	bl	8005738 <__sfputc_r>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d1f3      	bne.n	8005770 <__sfputs_r+0xa>
 8005788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800578c <_vfiprintf_r>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	460d      	mov	r5, r1
 8005792:	b09d      	sub	sp, #116	; 0x74
 8005794:	4614      	mov	r4, r2
 8005796:	4698      	mov	r8, r3
 8005798:	4606      	mov	r6, r0
 800579a:	b118      	cbz	r0, 80057a4 <_vfiprintf_r+0x18>
 800579c:	6a03      	ldr	r3, [r0, #32]
 800579e:	b90b      	cbnz	r3, 80057a4 <_vfiprintf_r+0x18>
 80057a0:	f7ff fcda 	bl	8005158 <__sinit>
 80057a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_vfiprintf_r+0x2a>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_vfiprintf_r+0x2a>
 80057b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b2:	f7ff fec6 	bl	8005542 <__retarget_lock_acquire_recursive>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	d501      	bpl.n	80057c0 <_vfiprintf_r+0x34>
 80057bc:	692b      	ldr	r3, [r5, #16]
 80057be:	b99b      	cbnz	r3, 80057e8 <_vfiprintf_r+0x5c>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff fdec 	bl	80053a0 <__swsetup_r>
 80057c8:	b170      	cbz	r0, 80057e8 <_vfiprintf_r+0x5c>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057cc:	07dc      	lsls	r4, r3, #31
 80057ce:	d504      	bpl.n	80057da <_vfiprintf_r+0x4e>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	b01d      	add	sp, #116	; 0x74
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	0598      	lsls	r0, r3, #22
 80057de:	d4f7      	bmi.n	80057d0 <_vfiprintf_r+0x44>
 80057e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e2:	f7ff feaf 	bl	8005544 <__retarget_lock_release_recursive>
 80057e6:	e7f3      	b.n	80057d0 <_vfiprintf_r+0x44>
 80057e8:	2300      	movs	r3, #0
 80057ea:	9309      	str	r3, [sp, #36]	; 0x24
 80057ec:	2320      	movs	r3, #32
 80057ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f6:	2330      	movs	r3, #48	; 0x30
 80057f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80059ac <_vfiprintf_r+0x220>
 80057fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005800:	f04f 0901 	mov.w	r9, #1
 8005804:	4623      	mov	r3, r4
 8005806:	469a      	mov	sl, r3
 8005808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800580c:	b10a      	cbz	r2, 8005812 <_vfiprintf_r+0x86>
 800580e:	2a25      	cmp	r2, #37	; 0x25
 8005810:	d1f9      	bne.n	8005806 <_vfiprintf_r+0x7a>
 8005812:	ebba 0b04 	subs.w	fp, sl, r4
 8005816:	d00b      	beq.n	8005830 <_vfiprintf_r+0xa4>
 8005818:	465b      	mov	r3, fp
 800581a:	4622      	mov	r2, r4
 800581c:	4629      	mov	r1, r5
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ffa1 	bl	8005766 <__sfputs_r>
 8005824:	3001      	adds	r0, #1
 8005826:	f000 80a9 	beq.w	800597c <_vfiprintf_r+0x1f0>
 800582a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800582c:	445a      	add	r2, fp
 800582e:	9209      	str	r2, [sp, #36]	; 0x24
 8005830:	f89a 3000 	ldrb.w	r3, [sl]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80a1 	beq.w	800597c <_vfiprintf_r+0x1f0>
 800583a:	2300      	movs	r3, #0
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005844:	f10a 0a01 	add.w	sl, sl, #1
 8005848:	9304      	str	r3, [sp, #16]
 800584a:	9307      	str	r3, [sp, #28]
 800584c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005850:	931a      	str	r3, [sp, #104]	; 0x68
 8005852:	4654      	mov	r4, sl
 8005854:	2205      	movs	r2, #5
 8005856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585a:	4854      	ldr	r0, [pc, #336]	; (80059ac <_vfiprintf_r+0x220>)
 800585c:	f7fa fc90 	bl	8000180 <memchr>
 8005860:	9a04      	ldr	r2, [sp, #16]
 8005862:	b9d8      	cbnz	r0, 800589c <_vfiprintf_r+0x110>
 8005864:	06d1      	lsls	r1, r2, #27
 8005866:	bf44      	itt	mi
 8005868:	2320      	movmi	r3, #32
 800586a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800586e:	0713      	lsls	r3, r2, #28
 8005870:	bf44      	itt	mi
 8005872:	232b      	movmi	r3, #43	; 0x2b
 8005874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005878:	f89a 3000 	ldrb.w	r3, [sl]
 800587c:	2b2a      	cmp	r3, #42	; 0x2a
 800587e:	d015      	beq.n	80058ac <_vfiprintf_r+0x120>
 8005880:	9a07      	ldr	r2, [sp, #28]
 8005882:	4654      	mov	r4, sl
 8005884:	2000      	movs	r0, #0
 8005886:	f04f 0c0a 	mov.w	ip, #10
 800588a:	4621      	mov	r1, r4
 800588c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005890:	3b30      	subs	r3, #48	; 0x30
 8005892:	2b09      	cmp	r3, #9
 8005894:	d94d      	bls.n	8005932 <_vfiprintf_r+0x1a6>
 8005896:	b1b0      	cbz	r0, 80058c6 <_vfiprintf_r+0x13a>
 8005898:	9207      	str	r2, [sp, #28]
 800589a:	e014      	b.n	80058c6 <_vfiprintf_r+0x13a>
 800589c:	eba0 0308 	sub.w	r3, r0, r8
 80058a0:	fa09 f303 	lsl.w	r3, r9, r3
 80058a4:	4313      	orrs	r3, r2
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	46a2      	mov	sl, r4
 80058aa:	e7d2      	b.n	8005852 <_vfiprintf_r+0xc6>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	1d19      	adds	r1, r3, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	9103      	str	r1, [sp, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bfbb      	ittet	lt
 80058b8:	425b      	neglt	r3, r3
 80058ba:	f042 0202 	orrlt.w	r2, r2, #2
 80058be:	9307      	strge	r3, [sp, #28]
 80058c0:	9307      	strlt	r3, [sp, #28]
 80058c2:	bfb8      	it	lt
 80058c4:	9204      	strlt	r2, [sp, #16]
 80058c6:	7823      	ldrb	r3, [r4, #0]
 80058c8:	2b2e      	cmp	r3, #46	; 0x2e
 80058ca:	d10c      	bne.n	80058e6 <_vfiprintf_r+0x15a>
 80058cc:	7863      	ldrb	r3, [r4, #1]
 80058ce:	2b2a      	cmp	r3, #42	; 0x2a
 80058d0:	d134      	bne.n	800593c <_vfiprintf_r+0x1b0>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	1d1a      	adds	r2, r3, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	9203      	str	r2, [sp, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfb8      	it	lt
 80058de:	f04f 33ff 	movlt.w	r3, #4294967295
 80058e2:	3402      	adds	r4, #2
 80058e4:	9305      	str	r3, [sp, #20]
 80058e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80059bc <_vfiprintf_r+0x230>
 80058ea:	7821      	ldrb	r1, [r4, #0]
 80058ec:	2203      	movs	r2, #3
 80058ee:	4650      	mov	r0, sl
 80058f0:	f7fa fc46 	bl	8000180 <memchr>
 80058f4:	b138      	cbz	r0, 8005906 <_vfiprintf_r+0x17a>
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	eba0 000a 	sub.w	r0, r0, sl
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	4082      	lsls	r2, r0
 8005900:	4313      	orrs	r3, r2
 8005902:	3401      	adds	r4, #1
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590a:	4829      	ldr	r0, [pc, #164]	; (80059b0 <_vfiprintf_r+0x224>)
 800590c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005910:	2206      	movs	r2, #6
 8005912:	f7fa fc35 	bl	8000180 <memchr>
 8005916:	2800      	cmp	r0, #0
 8005918:	d03f      	beq.n	800599a <_vfiprintf_r+0x20e>
 800591a:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <_vfiprintf_r+0x228>)
 800591c:	bb1b      	cbnz	r3, 8005966 <_vfiprintf_r+0x1da>
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	3307      	adds	r3, #7
 8005922:	f023 0307 	bic.w	r3, r3, #7
 8005926:	3308      	adds	r3, #8
 8005928:	9303      	str	r3, [sp, #12]
 800592a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592c:	443b      	add	r3, r7
 800592e:	9309      	str	r3, [sp, #36]	; 0x24
 8005930:	e768      	b.n	8005804 <_vfiprintf_r+0x78>
 8005932:	fb0c 3202 	mla	r2, ip, r2, r3
 8005936:	460c      	mov	r4, r1
 8005938:	2001      	movs	r0, #1
 800593a:	e7a6      	b.n	800588a <_vfiprintf_r+0xfe>
 800593c:	2300      	movs	r3, #0
 800593e:	3401      	adds	r4, #1
 8005940:	9305      	str	r3, [sp, #20]
 8005942:	4619      	mov	r1, r3
 8005944:	f04f 0c0a 	mov.w	ip, #10
 8005948:	4620      	mov	r0, r4
 800594a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594e:	3a30      	subs	r2, #48	; 0x30
 8005950:	2a09      	cmp	r2, #9
 8005952:	d903      	bls.n	800595c <_vfiprintf_r+0x1d0>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0c6      	beq.n	80058e6 <_vfiprintf_r+0x15a>
 8005958:	9105      	str	r1, [sp, #20]
 800595a:	e7c4      	b.n	80058e6 <_vfiprintf_r+0x15a>
 800595c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005960:	4604      	mov	r4, r0
 8005962:	2301      	movs	r3, #1
 8005964:	e7f0      	b.n	8005948 <_vfiprintf_r+0x1bc>
 8005966:	ab03      	add	r3, sp, #12
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	462a      	mov	r2, r5
 800596c:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <_vfiprintf_r+0x22c>)
 800596e:	a904      	add	r1, sp, #16
 8005970:	4630      	mov	r0, r6
 8005972:	f3af 8000 	nop.w
 8005976:	4607      	mov	r7, r0
 8005978:	1c78      	adds	r0, r7, #1
 800597a:	d1d6      	bne.n	800592a <_vfiprintf_r+0x19e>
 800597c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800597e:	07d9      	lsls	r1, r3, #31
 8005980:	d405      	bmi.n	800598e <_vfiprintf_r+0x202>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	059a      	lsls	r2, r3, #22
 8005986:	d402      	bmi.n	800598e <_vfiprintf_r+0x202>
 8005988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800598a:	f7ff fddb 	bl	8005544 <__retarget_lock_release_recursive>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	065b      	lsls	r3, r3, #25
 8005992:	f53f af1d 	bmi.w	80057d0 <_vfiprintf_r+0x44>
 8005996:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005998:	e71c      	b.n	80057d4 <_vfiprintf_r+0x48>
 800599a:	ab03      	add	r3, sp, #12
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	462a      	mov	r2, r5
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <_vfiprintf_r+0x22c>)
 80059a2:	a904      	add	r1, sp, #16
 80059a4:	4630      	mov	r0, r6
 80059a6:	f000 f879 	bl	8005a9c <_printf_i>
 80059aa:	e7e4      	b.n	8005976 <_vfiprintf_r+0x1ea>
 80059ac:	0800635d 	.word	0x0800635d
 80059b0:	08006367 	.word	0x08006367
 80059b4:	00000000 	.word	0x00000000
 80059b8:	08005767 	.word	0x08005767
 80059bc:	08006363 	.word	0x08006363

080059c0 <_printf_common>:
 80059c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	4616      	mov	r6, r2
 80059c6:	4699      	mov	r9, r3
 80059c8:	688a      	ldr	r2, [r1, #8]
 80059ca:	690b      	ldr	r3, [r1, #16]
 80059cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d0:	4293      	cmp	r3, r2
 80059d2:	bfb8      	it	lt
 80059d4:	4613      	movlt	r3, r2
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059dc:	4607      	mov	r7, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	b10a      	cbz	r2, 80059e6 <_printf_common+0x26>
 80059e2:	3301      	adds	r3, #1
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	0699      	lsls	r1, r3, #26
 80059ea:	bf42      	ittt	mi
 80059ec:	6833      	ldrmi	r3, [r6, #0]
 80059ee:	3302      	addmi	r3, #2
 80059f0:	6033      	strmi	r3, [r6, #0]
 80059f2:	6825      	ldr	r5, [r4, #0]
 80059f4:	f015 0506 	ands.w	r5, r5, #6
 80059f8:	d106      	bne.n	8005a08 <_printf_common+0x48>
 80059fa:	f104 0a19 	add.w	sl, r4, #25
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	6832      	ldr	r2, [r6, #0]
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	dc26      	bgt.n	8005a56 <_printf_common+0x96>
 8005a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a0c:	1e13      	subs	r3, r2, #0
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	bf18      	it	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	0692      	lsls	r2, r2, #26
 8005a16:	d42b      	bmi.n	8005a70 <_printf_common+0xb0>
 8005a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	4638      	mov	r0, r7
 8005a20:	47c0      	blx	r8
 8005a22:	3001      	adds	r0, #1
 8005a24:	d01e      	beq.n	8005a64 <_printf_common+0xa4>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	6922      	ldr	r2, [r4, #16]
 8005a2a:	f003 0306 	and.w	r3, r3, #6
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	bf02      	ittt	eq
 8005a32:	68e5      	ldreq	r5, [r4, #12]
 8005a34:	6833      	ldreq	r3, [r6, #0]
 8005a36:	1aed      	subeq	r5, r5, r3
 8005a38:	68a3      	ldr	r3, [r4, #8]
 8005a3a:	bf0c      	ite	eq
 8005a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a40:	2500      	movne	r5, #0
 8005a42:	4293      	cmp	r3, r2
 8005a44:	bfc4      	itt	gt
 8005a46:	1a9b      	subgt	r3, r3, r2
 8005a48:	18ed      	addgt	r5, r5, r3
 8005a4a:	2600      	movs	r6, #0
 8005a4c:	341a      	adds	r4, #26
 8005a4e:	42b5      	cmp	r5, r6
 8005a50:	d11a      	bne.n	8005a88 <_printf_common+0xc8>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e008      	b.n	8005a68 <_printf_common+0xa8>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4652      	mov	r2, sl
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	47c0      	blx	r8
 8005a60:	3001      	adds	r0, #1
 8005a62:	d103      	bne.n	8005a6c <_printf_common+0xac>
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6c:	3501      	adds	r5, #1
 8005a6e:	e7c6      	b.n	80059fe <_printf_common+0x3e>
 8005a70:	18e1      	adds	r1, r4, r3
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	2030      	movs	r0, #48	; 0x30
 8005a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7a:	4422      	add	r2, r4
 8005a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a84:	3302      	adds	r3, #2
 8005a86:	e7c7      	b.n	8005a18 <_printf_common+0x58>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4638      	mov	r0, r7
 8005a90:	47c0      	blx	r8
 8005a92:	3001      	adds	r0, #1
 8005a94:	d0e6      	beq.n	8005a64 <_printf_common+0xa4>
 8005a96:	3601      	adds	r6, #1
 8005a98:	e7d9      	b.n	8005a4e <_printf_common+0x8e>
	...

08005a9c <_printf_i>:
 8005a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	7e0f      	ldrb	r7, [r1, #24]
 8005aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa4:	2f78      	cmp	r7, #120	; 0x78
 8005aa6:	4691      	mov	r9, r2
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	469a      	mov	sl, r3
 8005aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab2:	d807      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ab4:	2f62      	cmp	r7, #98	; 0x62
 8005ab6:	d80a      	bhi.n	8005ace <_printf_i+0x32>
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	f000 80d4 	beq.w	8005c66 <_printf_i+0x1ca>
 8005abe:	2f58      	cmp	r7, #88	; 0x58
 8005ac0:	f000 80c0 	beq.w	8005c44 <_printf_i+0x1a8>
 8005ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005acc:	e03a      	b.n	8005b44 <_printf_i+0xa8>
 8005ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad2:	2b15      	cmp	r3, #21
 8005ad4:	d8f6      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ad6:	a101      	add	r1, pc, #4	; (adr r1, 8005adc <_printf_i+0x40>)
 8005ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b49 	.word	0x08005b49
 8005ae4:	08005ac5 	.word	0x08005ac5
 8005ae8:	08005ac5 	.word	0x08005ac5
 8005aec:	08005ac5 	.word	0x08005ac5
 8005af0:	08005ac5 	.word	0x08005ac5
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005ac5 	.word	0x08005ac5
 8005afc:	08005ac5 	.word	0x08005ac5
 8005b00:	08005ac5 	.word	0x08005ac5
 8005b04:	08005ac5 	.word	0x08005ac5
 8005b08:	08005c4d 	.word	0x08005c4d
 8005b0c:	08005b75 	.word	0x08005b75
 8005b10:	08005c07 	.word	0x08005c07
 8005b14:	08005ac5 	.word	0x08005ac5
 8005b18:	08005ac5 	.word	0x08005ac5
 8005b1c:	08005c6f 	.word	0x08005c6f
 8005b20:	08005ac5 	.word	0x08005ac5
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005ac5 	.word	0x08005ac5
 8005b2c:	08005ac5 	.word	0x08005ac5
 8005b30:	08005c0f 	.word	0x08005c0f
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	602a      	str	r2, [r5, #0]
 8005b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b44:	2301      	movs	r3, #1
 8005b46:	e09f      	b.n	8005c88 <_printf_i+0x1ec>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	0607      	lsls	r7, r0, #24
 8005b4e:	f103 0104 	add.w	r1, r3, #4
 8005b52:	6029      	str	r1, [r5, #0]
 8005b54:	d501      	bpl.n	8005b5a <_printf_i+0xbe>
 8005b56:	681e      	ldr	r6, [r3, #0]
 8005b58:	e003      	b.n	8005b62 <_printf_i+0xc6>
 8005b5a:	0646      	lsls	r6, r0, #25
 8005b5c:	d5fb      	bpl.n	8005b56 <_printf_i+0xba>
 8005b5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	da03      	bge.n	8005b6e <_printf_i+0xd2>
 8005b66:	232d      	movs	r3, #45	; 0x2d
 8005b68:	4276      	negs	r6, r6
 8005b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6e:	485a      	ldr	r0, [pc, #360]	; (8005cd8 <_printf_i+0x23c>)
 8005b70:	230a      	movs	r3, #10
 8005b72:	e012      	b.n	8005b9a <_printf_i+0xfe>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	6029      	str	r1, [r5, #0]
 8005b7c:	0605      	lsls	r5, r0, #24
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0xe8>
 8005b80:	681e      	ldr	r6, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0xee>
 8005b84:	0641      	lsls	r1, r0, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0xe4>
 8005b88:	881e      	ldrh	r6, [r3, #0]
 8005b8a:	4853      	ldr	r0, [pc, #332]	; (8005cd8 <_printf_i+0x23c>)
 8005b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b8e:	bf0c      	ite	eq
 8005b90:	2308      	moveq	r3, #8
 8005b92:	230a      	movne	r3, #10
 8005b94:	2100      	movs	r1, #0
 8005b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9a:	6865      	ldr	r5, [r4, #4]
 8005b9c:	60a5      	str	r5, [r4, #8]
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	bfa2      	ittt	ge
 8005ba2:	6821      	ldrge	r1, [r4, #0]
 8005ba4:	f021 0104 	bicge.w	r1, r1, #4
 8005ba8:	6021      	strge	r1, [r4, #0]
 8005baa:	b90e      	cbnz	r6, 8005bb0 <_printf_i+0x114>
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	d04b      	beq.n	8005c48 <_printf_i+0x1ac>
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bb6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bba:	5dc7      	ldrb	r7, [r0, r7]
 8005bbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	42bb      	cmp	r3, r7
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	d9f4      	bls.n	8005bb2 <_printf_i+0x116>
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d10b      	bne.n	8005be4 <_printf_i+0x148>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07de      	lsls	r6, r3, #31
 8005bd0:	d508      	bpl.n	8005be4 <_printf_i+0x148>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6861      	ldr	r1, [r4, #4]
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	bfde      	ittt	le
 8005bda:	2330      	movle	r3, #48	; 0x30
 8005bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005be4:	1b52      	subs	r2, r2, r5
 8005be6:	6122      	str	r2, [r4, #16]
 8005be8:	f8cd a000 	str.w	sl, [sp]
 8005bec:	464b      	mov	r3, r9
 8005bee:	aa03      	add	r2, sp, #12
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f7ff fee4 	bl	80059c0 <_printf_common>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d14a      	bne.n	8005c92 <_printf_i+0x1f6>
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	b004      	add	sp, #16
 8005c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	f043 0320 	orr.w	r3, r3, #32
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	4833      	ldr	r0, [pc, #204]	; (8005cdc <_printf_i+0x240>)
 8005c10:	2778      	movs	r7, #120	; 0x78
 8005c12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	6829      	ldr	r1, [r5, #0]
 8005c1a:	061f      	lsls	r7, r3, #24
 8005c1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c20:	d402      	bmi.n	8005c28 <_printf_i+0x18c>
 8005c22:	065f      	lsls	r7, r3, #25
 8005c24:	bf48      	it	mi
 8005c26:	b2b6      	uxthmi	r6, r6
 8005c28:	07df      	lsls	r7, r3, #31
 8005c2a:	bf48      	it	mi
 8005c2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c30:	6029      	str	r1, [r5, #0]
 8005c32:	bf48      	it	mi
 8005c34:	6023      	strmi	r3, [r4, #0]
 8005c36:	b91e      	cbnz	r6, 8005c40 <_printf_i+0x1a4>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	f023 0320 	bic.w	r3, r3, #32
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	2310      	movs	r3, #16
 8005c42:	e7a7      	b.n	8005b94 <_printf_i+0xf8>
 8005c44:	4824      	ldr	r0, [pc, #144]	; (8005cd8 <_printf_i+0x23c>)
 8005c46:	e7e4      	b.n	8005c12 <_printf_i+0x176>
 8005c48:	4615      	mov	r5, r2
 8005c4a:	e7bd      	b.n	8005bc8 <_printf_i+0x12c>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	6826      	ldr	r6, [r4, #0]
 8005c50:	6961      	ldr	r1, [r4, #20]
 8005c52:	1d18      	adds	r0, r3, #4
 8005c54:	6028      	str	r0, [r5, #0]
 8005c56:	0635      	lsls	r5, r6, #24
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	d501      	bpl.n	8005c60 <_printf_i+0x1c4>
 8005c5c:	6019      	str	r1, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <_printf_i+0x1ca>
 8005c60:	0670      	lsls	r0, r6, #25
 8005c62:	d5fb      	bpl.n	8005c5c <_printf_i+0x1c0>
 8005c64:	8019      	strh	r1, [r3, #0]
 8005c66:	2300      	movs	r3, #0
 8005c68:	6123      	str	r3, [r4, #16]
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	e7bc      	b.n	8005be8 <_printf_i+0x14c>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	1d1a      	adds	r2, r3, #4
 8005c72:	602a      	str	r2, [r5, #0]
 8005c74:	681d      	ldr	r5, [r3, #0]
 8005c76:	6862      	ldr	r2, [r4, #4]
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7fa fa80 	bl	8000180 <memchr>
 8005c80:	b108      	cbz	r0, 8005c86 <_printf_i+0x1ea>
 8005c82:	1b40      	subs	r0, r0, r5
 8005c84:	6060      	str	r0, [r4, #4]
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c90:	e7aa      	b.n	8005be8 <_printf_i+0x14c>
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	462a      	mov	r2, r5
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	47d0      	blx	sl
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d0ad      	beq.n	8005bfc <_printf_i+0x160>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	079b      	lsls	r3, r3, #30
 8005ca4:	d413      	bmi.n	8005cce <_printf_i+0x232>
 8005ca6:	68e0      	ldr	r0, [r4, #12]
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	4298      	cmp	r0, r3
 8005cac:	bfb8      	it	lt
 8005cae:	4618      	movlt	r0, r3
 8005cb0:	e7a6      	b.n	8005c00 <_printf_i+0x164>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4640      	mov	r0, r8
 8005cba:	47d0      	blx	sl
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d09d      	beq.n	8005bfc <_printf_i+0x160>
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	9903      	ldr	r1, [sp, #12]
 8005cc6:	1a5b      	subs	r3, r3, r1
 8005cc8:	42ab      	cmp	r3, r5
 8005cca:	dcf2      	bgt.n	8005cb2 <_printf_i+0x216>
 8005ccc:	e7eb      	b.n	8005ca6 <_printf_i+0x20a>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	f104 0619 	add.w	r6, r4, #25
 8005cd4:	e7f5      	b.n	8005cc2 <_printf_i+0x226>
 8005cd6:	bf00      	nop
 8005cd8:	0800636e 	.word	0x0800636e
 8005cdc:	0800637f 	.word	0x0800637f

08005ce0 <__sflush_r>:
 8005ce0:	898a      	ldrh	r2, [r1, #12]
 8005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	0710      	lsls	r0, r2, #28
 8005cea:	460c      	mov	r4, r1
 8005cec:	d458      	bmi.n	8005da0 <__sflush_r+0xc0>
 8005cee:	684b      	ldr	r3, [r1, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dc05      	bgt.n	8005d00 <__sflush_r+0x20>
 8005cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dc02      	bgt.n	8005d00 <__sflush_r+0x20>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d02:	2e00      	cmp	r6, #0
 8005d04:	d0f9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d0c:	682f      	ldr	r7, [r5, #0]
 8005d0e:	6a21      	ldr	r1, [r4, #32]
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	d032      	beq.n	8005d7a <__sflush_r+0x9a>
 8005d14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	075a      	lsls	r2, r3, #29
 8005d1a:	d505      	bpl.n	8005d28 <__sflush_r+0x48>
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	1ac0      	subs	r0, r0, r3
 8005d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d22:	b10b      	cbz	r3, 8005d28 <__sflush_r+0x48>
 8005d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d26:	1ac0      	subs	r0, r0, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d2e:	6a21      	ldr	r1, [r4, #32]
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b0      	blx	r6
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	d106      	bne.n	8005d48 <__sflush_r+0x68>
 8005d3a:	6829      	ldr	r1, [r5, #0]
 8005d3c:	291d      	cmp	r1, #29
 8005d3e:	d82b      	bhi.n	8005d98 <__sflush_r+0xb8>
 8005d40:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <__sflush_r+0x108>)
 8005d42:	410a      	asrs	r2, r1
 8005d44:	07d6      	lsls	r6, r2, #31
 8005d46:	d427      	bmi.n	8005d98 <__sflush_r+0xb8>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6062      	str	r2, [r4, #4]
 8005d4c:	04d9      	lsls	r1, r3, #19
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	d504      	bpl.n	8005d5e <__sflush_r+0x7e>
 8005d54:	1c42      	adds	r2, r0, #1
 8005d56:	d101      	bne.n	8005d5c <__sflush_r+0x7c>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b903      	cbnz	r3, 8005d5e <__sflush_r+0x7e>
 8005d5c:	6560      	str	r0, [r4, #84]	; 0x54
 8005d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d60:	602f      	str	r7, [r5, #0]
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d0c9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	d002      	beq.n	8005d74 <__sflush_r+0x94>
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f7ff fbea 	bl	8005548 <_free_r>
 8005d74:	2000      	movs	r0, #0
 8005d76:	6360      	str	r0, [r4, #52]	; 0x34
 8005d78:	e7c0      	b.n	8005cfc <__sflush_r+0x1c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b0      	blx	r6
 8005d80:	1c41      	adds	r1, r0, #1
 8005d82:	d1c8      	bne.n	8005d16 <__sflush_r+0x36>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0c5      	beq.n	8005d16 <__sflush_r+0x36>
 8005d8a:	2b1d      	cmp	r3, #29
 8005d8c:	d001      	beq.n	8005d92 <__sflush_r+0xb2>
 8005d8e:	2b16      	cmp	r3, #22
 8005d90:	d101      	bne.n	8005d96 <__sflush_r+0xb6>
 8005d92:	602f      	str	r7, [r5, #0]
 8005d94:	e7b1      	b.n	8005cfa <__sflush_r+0x1a>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	e7ad      	b.n	8005cfc <__sflush_r+0x1c>
 8005da0:	690f      	ldr	r7, [r1, #16]
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	d0a9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005da6:	0793      	lsls	r3, r2, #30
 8005da8:	680e      	ldr	r6, [r1, #0]
 8005daa:	bf08      	it	eq
 8005dac:	694b      	ldreq	r3, [r1, #20]
 8005dae:	600f      	str	r7, [r1, #0]
 8005db0:	bf18      	it	ne
 8005db2:	2300      	movne	r3, #0
 8005db4:	eba6 0807 	sub.w	r8, r6, r7
 8005db8:	608b      	str	r3, [r1, #8]
 8005dba:	f1b8 0f00 	cmp.w	r8, #0
 8005dbe:	dd9c      	ble.n	8005cfa <__sflush_r+0x1a>
 8005dc0:	6a21      	ldr	r1, [r4, #32]
 8005dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dc4:	4643      	mov	r3, r8
 8005dc6:	463a      	mov	r2, r7
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	dc06      	bgt.n	8005dde <__sflush_r+0xfe>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	e78e      	b.n	8005cfc <__sflush_r+0x1c>
 8005dde:	4407      	add	r7, r0
 8005de0:	eba8 0800 	sub.w	r8, r8, r0
 8005de4:	e7e9      	b.n	8005dba <__sflush_r+0xda>
 8005de6:	bf00      	nop
 8005de8:	dfbffffe 	.word	0xdfbffffe

08005dec <_fflush_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	4605      	mov	r5, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	b913      	cbnz	r3, 8005dfc <_fflush_r+0x10>
 8005df6:	2500      	movs	r5, #0
 8005df8:	4628      	mov	r0, r5
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	b118      	cbz	r0, 8005e06 <_fflush_r+0x1a>
 8005dfe:	6a03      	ldr	r3, [r0, #32]
 8005e00:	b90b      	cbnz	r3, 8005e06 <_fflush_r+0x1a>
 8005e02:	f7ff f9a9 	bl	8005158 <__sinit>
 8005e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f3      	beq.n	8005df6 <_fflush_r+0xa>
 8005e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e10:	07d0      	lsls	r0, r2, #31
 8005e12:	d404      	bmi.n	8005e1e <_fflush_r+0x32>
 8005e14:	0599      	lsls	r1, r3, #22
 8005e16:	d402      	bmi.n	8005e1e <_fflush_r+0x32>
 8005e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e1a:	f7ff fb92 	bl	8005542 <__retarget_lock_acquire_recursive>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	4621      	mov	r1, r4
 8005e22:	f7ff ff5d 	bl	8005ce0 <__sflush_r>
 8005e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e28:	07da      	lsls	r2, r3, #31
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	d4e4      	bmi.n	8005df8 <_fflush_r+0xc>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	059b      	lsls	r3, r3, #22
 8005e32:	d4e1      	bmi.n	8005df8 <_fflush_r+0xc>
 8005e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e36:	f7ff fb85 	bl	8005544 <__retarget_lock_release_recursive>
 8005e3a:	e7dd      	b.n	8005df8 <_fflush_r+0xc>

08005e3c <__swhatbuf_r>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	2900      	cmp	r1, #0
 8005e46:	b096      	sub	sp, #88	; 0x58
 8005e48:	4615      	mov	r5, r2
 8005e4a:	461e      	mov	r6, r3
 8005e4c:	da0d      	bge.n	8005e6a <__swhatbuf_r+0x2e>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	bf0c      	ite	eq
 8005e5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e5e:	2340      	movne	r3, #64	; 0x40
 8005e60:	2000      	movs	r0, #0
 8005e62:	6031      	str	r1, [r6, #0]
 8005e64:	602b      	str	r3, [r5, #0]
 8005e66:	b016      	add	sp, #88	; 0x58
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	466a      	mov	r2, sp
 8005e6c:	f000 f848 	bl	8005f00 <_fstat_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	dbec      	blt.n	8005e4e <__swhatbuf_r+0x12>
 8005e74:	9901      	ldr	r1, [sp, #4]
 8005e76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e7e:	4259      	negs	r1, r3
 8005e80:	4159      	adcs	r1, r3
 8005e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e86:	e7eb      	b.n	8005e60 <__swhatbuf_r+0x24>

08005e88 <__smakebuf_r>:
 8005e88:	898b      	ldrh	r3, [r1, #12]
 8005e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e8c:	079d      	lsls	r5, r3, #30
 8005e8e:	4606      	mov	r6, r0
 8005e90:	460c      	mov	r4, r1
 8005e92:	d507      	bpl.n	8005ea4 <__smakebuf_r+0x1c>
 8005e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	6163      	str	r3, [r4, #20]
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	ab01      	add	r3, sp, #4
 8005ea6:	466a      	mov	r2, sp
 8005ea8:	f7ff ffc8 	bl	8005e3c <__swhatbuf_r>
 8005eac:	9900      	ldr	r1, [sp, #0]
 8005eae:	4605      	mov	r5, r0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff fbb5 	bl	8005620 <_malloc_r>
 8005eb6:	b948      	cbnz	r0, 8005ecc <__smakebuf_r+0x44>
 8005eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ebc:	059a      	lsls	r2, r3, #22
 8005ebe:	d4ef      	bmi.n	8005ea0 <__smakebuf_r+0x18>
 8005ec0:	f023 0303 	bic.w	r3, r3, #3
 8005ec4:	f043 0302 	orr.w	r3, r3, #2
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	e7e3      	b.n	8005e94 <__smakebuf_r+0xc>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	6020      	str	r0, [r4, #0]
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	6163      	str	r3, [r4, #20]
 8005eda:	9b01      	ldr	r3, [sp, #4]
 8005edc:	6120      	str	r0, [r4, #16]
 8005ede:	b15b      	cbz	r3, 8005ef8 <__smakebuf_r+0x70>
 8005ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f81d 	bl	8005f24 <_isatty_r>
 8005eea:	b128      	cbz	r0, 8005ef8 <__smakebuf_r+0x70>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	431d      	orrs	r5, r3
 8005efc:	81a5      	strh	r5, [r4, #12]
 8005efe:	e7cf      	b.n	8005ea0 <__smakebuf_r+0x18>

08005f00 <_fstat_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	; (8005f20 <_fstat_r+0x20>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f7fa ff56 	bl	8000dbe <_fstat>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d102      	bne.n	8005f1c <_fstat_r+0x1c>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b103      	cbz	r3, 8005f1c <_fstat_r+0x1c>
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop
 8005f20:	2000079c 	.word	0x2000079c

08005f24 <_isatty_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d06      	ldr	r5, [pc, #24]	; (8005f40 <_isatty_r+0x1c>)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	f7fa ff55 	bl	8000dde <_isatty>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_isatty_r+0x1a>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_isatty_r+0x1a>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	2000079c 	.word	0x2000079c

08005f44 <_sbrk_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d06      	ldr	r5, [pc, #24]	; (8005f60 <_sbrk_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fa ff5e 	bl	8000e10 <_sbrk>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_sbrk_r+0x1a>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_sbrk_r+0x1a>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	2000079c 	.word	0x2000079c

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
 8005f7c:	0000      	movs	r0, r0
	...

08005f80 <__FLASH_Program_Fast_veneer>:
 8005f80:	f85f f000 	ldr.w	pc, [pc]	; 8005f84 <__FLASH_Program_Fast_veneer+0x4>
 8005f84:	20000071 	.word	0x20000071

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <uwTickPrio>:
2000000c:	00000010                                ....

20000010 <uwTickFreq>:
20000010:	00000001                                ....

20000014 <__sglue>:
20000014:	00000000 00000003 20000660              ........`.. 

20000020 <_impure_data>:
20000020:	00000000 20000660 200006c8 20000730     ....`.. ... 0.. 
	...

2000006c <_impure_ptr>:
2000006c:	20000020                                 .. 

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b480      	push	{r7}
20000072:	b089      	sub	sp, #36	; 0x24
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000007a:	2380      	movs	r3, #128	; 0x80
2000007c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000082:	683b      	ldr	r3, [r7, #0]
20000084:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000086:	4b18      	ldr	r3, [pc, #96]	; (200000e8 <FLASH_Program_Fast+0x78>)
20000088:	695b      	ldr	r3, [r3, #20]
2000008a:	4a17      	ldr	r2, [pc, #92]	; (200000e8 <FLASH_Program_Fast+0x78>)
2000008c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000090:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000092:	f3ef 8310 	mrs	r3, PRIMASK
20000096:	60fb      	str	r3, [r7, #12]
  return(result);
20000098:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000009a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000009c:	b672      	cpsid	i
}
2000009e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000a0:	697b      	ldr	r3, [r7, #20]
200000a2:	681a      	ldr	r2, [r3, #0]
200000a4:	69bb      	ldr	r3, [r7, #24]
200000a6:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000a8:	69bb      	ldr	r3, [r7, #24]
200000aa:	3304      	adds	r3, #4
200000ac:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000ae:	697b      	ldr	r3, [r7, #20]
200000b0:	3304      	adds	r3, #4
200000b2:	617b      	str	r3, [r7, #20]
    row_index--;
200000b4:	7ffb      	ldrb	r3, [r7, #31]
200000b6:	3b01      	subs	r3, #1
200000b8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
200000ba:	7ffb      	ldrb	r3, [r7, #31]
200000bc:	2b00      	cmp	r3, #0
200000be:	d1ef      	bne.n	200000a0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000c0:	bf00      	nop
200000c2:	4b09      	ldr	r3, [pc, #36]	; (200000e8 <FLASH_Program_Fast+0x78>)
200000c4:	691b      	ldr	r3, [r3, #16]
200000c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200000ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200000ce:	d0f8      	beq.n	200000c2 <FLASH_Program_Fast+0x52>
200000d0:	693b      	ldr	r3, [r7, #16]
200000d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000d4:	68bb      	ldr	r3, [r7, #8]
200000d6:	f383 8810 	msr	PRIMASK, r3
}
200000da:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000dc:	bf00      	nop
200000de:	3724      	adds	r7, #36	; 0x24
200000e0:	46bd      	mov	sp, r7
200000e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200000e6:	4770      	bx	lr
200000e8:	58004000 	.word	0x58004000
