
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007228  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000008  0800783c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          00000f88  200000ec  08007920  000200ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001074  08007920  00021074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013c01  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003298  00000000  00000000  00033d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001548  00000000  00000000  00036ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001016  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002344d  00000000  00000000  00039556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014683  00000000  00000000  0005c9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d89f0  00000000  00000000  00071026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006114  00000000  00000000  00149a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  0014fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ec 	.word	0x200000ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08007348 	.word	0x08007348

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f0 	.word	0x200000f0
 800017c:	08007348 	.word	0x08007348

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__gedf2>:
 8000598:	f04f 3cff 	mov.w	ip, #4294967295
 800059c:	e006      	b.n	80005ac <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__ledf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	e002      	b.n	80005ac <__cmpdf2+0x4>
 80005a6:	bf00      	nop

080005a8 <__cmpdf2>:
 80005a8:	f04f 0c01 	mov.w	ip, #1
 80005ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005bc:	bf18      	it	ne
 80005be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005c2:	d01b      	beq.n	80005fc <__cmpdf2+0x54>
 80005c4:	b001      	add	sp, #4
 80005c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005ca:	bf0c      	ite	eq
 80005cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005d0:	ea91 0f03 	teqne	r1, r3
 80005d4:	bf02      	ittt	eq
 80005d6:	ea90 0f02 	teqeq	r0, r2
 80005da:	2000      	moveq	r0, #0
 80005dc:	4770      	bxeq	lr
 80005de:	f110 0f00 	cmn.w	r0, #0
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf58      	it	pl
 80005e8:	4299      	cmppl	r1, r3
 80005ea:	bf08      	it	eq
 80005ec:	4290      	cmpeq	r0, r2
 80005ee:	bf2c      	ite	cs
 80005f0:	17d8      	asrcs	r0, r3, #31
 80005f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005f6:	f040 0001 	orr.w	r0, r0, #1
 80005fa:	4770      	bx	lr
 80005fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000604:	d102      	bne.n	800060c <__cmpdf2+0x64>
 8000606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800060a:	d107      	bne.n	800061c <__cmpdf2+0x74>
 800060c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d1d6      	bne.n	80005c4 <__cmpdf2+0x1c>
 8000616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800061a:	d0d3      	beq.n	80005c4 <__cmpdf2+0x1c>
 800061c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <__aeabi_cdrcmple>:
 8000624:	4684      	mov	ip, r0
 8000626:	4610      	mov	r0, r2
 8000628:	4662      	mov	r2, ip
 800062a:	468c      	mov	ip, r1
 800062c:	4619      	mov	r1, r3
 800062e:	4663      	mov	r3, ip
 8000630:	e000      	b.n	8000634 <__aeabi_cdcmpeq>
 8000632:	bf00      	nop

08000634 <__aeabi_cdcmpeq>:
 8000634:	b501      	push	{r0, lr}
 8000636:	f7ff ffb7 	bl	80005a8 <__cmpdf2>
 800063a:	2800      	cmp	r0, #0
 800063c:	bf48      	it	mi
 800063e:	f110 0f00 	cmnmi.w	r0, #0
 8000642:	bd01      	pop	{r0, pc}

08000644 <__aeabi_dcmpeq>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff fff4 	bl	8000634 <__aeabi_cdcmpeq>
 800064c:	bf0c      	ite	eq
 800064e:	2001      	moveq	r0, #1
 8000650:	2000      	movne	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_dcmplt>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffea 	bl	8000634 <__aeabi_cdcmpeq>
 8000660:	bf34      	ite	cc
 8000662:	2001      	movcc	r0, #1
 8000664:	2000      	movcs	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_dcmple>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffe0 	bl	8000634 <__aeabi_cdcmpeq>
 8000674:	bf94      	ite	ls
 8000676:	2001      	movls	r0, #1
 8000678:	2000      	movhi	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <__aeabi_dcmpge>:
 8000680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000684:	f7ff ffce 	bl	8000624 <__aeabi_cdrcmple>
 8000688:	bf94      	ite	ls
 800068a:	2001      	movls	r0, #1
 800068c:	2000      	movhi	r0, #0
 800068e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000692:	bf00      	nop

08000694 <__aeabi_dcmpgt>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff ffc4 	bl	8000624 <__aeabi_cdrcmple>
 800069c:	bf34      	ite	cc
 800069e:	2001      	movcc	r0, #1
 80006a0:	2000      	movcs	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_d2uiz>:
 80006a8:	004a      	lsls	r2, r1, #1
 80006aa:	d211      	bcs.n	80006d0 <__aeabi_d2uiz+0x28>
 80006ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006b0:	d211      	bcs.n	80006d6 <__aeabi_d2uiz+0x2e>
 80006b2:	d50d      	bpl.n	80006d0 <__aeabi_d2uiz+0x28>
 80006b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006bc:	d40e      	bmi.n	80006dc <__aeabi_d2uiz+0x34>
 80006be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006ca:	fa23 f002 	lsr.w	r0, r3, r2
 80006ce:	4770      	bx	lr
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	4770      	bx	lr
 80006d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006da:	d102      	bne.n	80006e2 <__aeabi_d2uiz+0x3a>
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	4770      	bx	lr
 80006e2:	f04f 0000 	mov.w	r0, #0
 80006e6:	4770      	bx	lr

080006e8 <__aeabi_uldivmod>:
 80006e8:	b953      	cbnz	r3, 8000700 <__aeabi_uldivmod+0x18>
 80006ea:	b94a      	cbnz	r2, 8000700 <__aeabi_uldivmod+0x18>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	bf08      	it	eq
 80006f0:	2800      	cmpeq	r0, #0
 80006f2:	bf1c      	itt	ne
 80006f4:	f04f 31ff 	movne.w	r1, #4294967295
 80006f8:	f04f 30ff 	movne.w	r0, #4294967295
 80006fc:	f000 b970 	b.w	80009e0 <__aeabi_idiv0>
 8000700:	f1ad 0c08 	sub.w	ip, sp, #8
 8000704:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000708:	f000 f806 	bl	8000718 <__udivmoddi4>
 800070c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <__udivmoddi4>:
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800071c:	9e08      	ldr	r6, [sp, #32]
 800071e:	460d      	mov	r5, r1
 8000720:	4604      	mov	r4, r0
 8000722:	460f      	mov	r7, r1
 8000724:	2b00      	cmp	r3, #0
 8000726:	d14a      	bne.n	80007be <__udivmoddi4+0xa6>
 8000728:	428a      	cmp	r2, r1
 800072a:	4694      	mov	ip, r2
 800072c:	d965      	bls.n	80007fa <__udivmoddi4+0xe2>
 800072e:	fab2 f382 	clz	r3, r2
 8000732:	b143      	cbz	r3, 8000746 <__udivmoddi4+0x2e>
 8000734:	fa02 fc03 	lsl.w	ip, r2, r3
 8000738:	f1c3 0220 	rsb	r2, r3, #32
 800073c:	409f      	lsls	r7, r3
 800073e:	fa20 f202 	lsr.w	r2, r0, r2
 8000742:	4317      	orrs	r7, r2
 8000744:	409c      	lsls	r4, r3
 8000746:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800074a:	fa1f f58c 	uxth.w	r5, ip
 800074e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000752:	0c22      	lsrs	r2, r4, #16
 8000754:	fb0e 7711 	mls	r7, lr, r1, r7
 8000758:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800075c:	fb01 f005 	mul.w	r0, r1, r5
 8000760:	4290      	cmp	r0, r2
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x62>
 8000764:	eb1c 0202 	adds.w	r2, ip, r2
 8000768:	f101 37ff 	add.w	r7, r1, #4294967295
 800076c:	f080 811c 	bcs.w	80009a8 <__udivmoddi4+0x290>
 8000770:	4290      	cmp	r0, r2
 8000772:	f240 8119 	bls.w	80009a8 <__udivmoddi4+0x290>
 8000776:	3902      	subs	r1, #2
 8000778:	4462      	add	r2, ip
 800077a:	1a12      	subs	r2, r2, r0
 800077c:	b2a4      	uxth	r4, r4
 800077e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000782:	fb0e 2210 	mls	r2, lr, r0, r2
 8000786:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800078a:	fb00 f505 	mul.w	r5, r0, r5
 800078e:	42a5      	cmp	r5, r4
 8000790:	d90a      	bls.n	80007a8 <__udivmoddi4+0x90>
 8000792:	eb1c 0404 	adds.w	r4, ip, r4
 8000796:	f100 32ff 	add.w	r2, r0, #4294967295
 800079a:	f080 8107 	bcs.w	80009ac <__udivmoddi4+0x294>
 800079e:	42a5      	cmp	r5, r4
 80007a0:	f240 8104 	bls.w	80009ac <__udivmoddi4+0x294>
 80007a4:	4464      	add	r4, ip
 80007a6:	3802      	subs	r0, #2
 80007a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ac:	1b64      	subs	r4, r4, r5
 80007ae:	2100      	movs	r1, #0
 80007b0:	b11e      	cbz	r6, 80007ba <__udivmoddi4+0xa2>
 80007b2:	40dc      	lsrs	r4, r3
 80007b4:	2300      	movs	r3, #0
 80007b6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007be:	428b      	cmp	r3, r1
 80007c0:	d908      	bls.n	80007d4 <__udivmoddi4+0xbc>
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	f000 80ed 	beq.w	80009a2 <__udivmoddi4+0x28a>
 80007c8:	2100      	movs	r1, #0
 80007ca:	e9c6 0500 	strd	r0, r5, [r6]
 80007ce:	4608      	mov	r0, r1
 80007d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d4:	fab3 f183 	clz	r1, r3
 80007d8:	2900      	cmp	r1, #0
 80007da:	d149      	bne.n	8000870 <__udivmoddi4+0x158>
 80007dc:	42ab      	cmp	r3, r5
 80007de:	d302      	bcc.n	80007e6 <__udivmoddi4+0xce>
 80007e0:	4282      	cmp	r2, r0
 80007e2:	f200 80f8 	bhi.w	80009d6 <__udivmoddi4+0x2be>
 80007e6:	1a84      	subs	r4, r0, r2
 80007e8:	eb65 0203 	sbc.w	r2, r5, r3
 80007ec:	2001      	movs	r0, #1
 80007ee:	4617      	mov	r7, r2
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d0e2      	beq.n	80007ba <__udivmoddi4+0xa2>
 80007f4:	e9c6 4700 	strd	r4, r7, [r6]
 80007f8:	e7df      	b.n	80007ba <__udivmoddi4+0xa2>
 80007fa:	b902      	cbnz	r2, 80007fe <__udivmoddi4+0xe6>
 80007fc:	deff      	udf	#255	; 0xff
 80007fe:	fab2 f382 	clz	r3, r2
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 8090 	bne.w	8000928 <__udivmoddi4+0x210>
 8000808:	1a8a      	subs	r2, r1, r2
 800080a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080e:	fa1f fe8c 	uxth.w	lr, ip
 8000812:	2101      	movs	r1, #1
 8000814:	fbb2 f5f7 	udiv	r5, r2, r7
 8000818:	fb07 2015 	mls	r0, r7, r5, r2
 800081c:	0c22      	lsrs	r2, r4, #16
 800081e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000822:	fb0e f005 	mul.w	r0, lr, r5
 8000826:	4290      	cmp	r0, r2
 8000828:	d908      	bls.n	800083c <__udivmoddi4+0x124>
 800082a:	eb1c 0202 	adds.w	r2, ip, r2
 800082e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000832:	d202      	bcs.n	800083a <__udivmoddi4+0x122>
 8000834:	4290      	cmp	r0, r2
 8000836:	f200 80cb 	bhi.w	80009d0 <__udivmoddi4+0x2b8>
 800083a:	4645      	mov	r5, r8
 800083c:	1a12      	subs	r2, r2, r0
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb2 f0f7 	udiv	r0, r2, r7
 8000844:	fb07 2210 	mls	r2, r7, r0, r2
 8000848:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084c:	fb0e fe00 	mul.w	lr, lr, r0
 8000850:	45a6      	cmp	lr, r4
 8000852:	d908      	bls.n	8000866 <__udivmoddi4+0x14e>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 32ff 	add.w	r2, r0, #4294967295
 800085c:	d202      	bcs.n	8000864 <__udivmoddi4+0x14c>
 800085e:	45a6      	cmp	lr, r4
 8000860:	f200 80bb 	bhi.w	80009da <__udivmoddi4+0x2c2>
 8000864:	4610      	mov	r0, r2
 8000866:	eba4 040e 	sub.w	r4, r4, lr
 800086a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800086e:	e79f      	b.n	80007b0 <__udivmoddi4+0x98>
 8000870:	f1c1 0720 	rsb	r7, r1, #32
 8000874:	408b      	lsls	r3, r1
 8000876:	fa22 fc07 	lsr.w	ip, r2, r7
 800087a:	ea4c 0c03 	orr.w	ip, ip, r3
 800087e:	fa05 f401 	lsl.w	r4, r5, r1
 8000882:	fa20 f307 	lsr.w	r3, r0, r7
 8000886:	40fd      	lsrs	r5, r7
 8000888:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800088c:	4323      	orrs	r3, r4
 800088e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000892:	fa1f fe8c 	uxth.w	lr, ip
 8000896:	fb09 5518 	mls	r5, r9, r8, r5
 800089a:	0c1c      	lsrs	r4, r3, #16
 800089c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008a0:	fb08 f50e 	mul.w	r5, r8, lr
 80008a4:	42a5      	cmp	r5, r4
 80008a6:	fa02 f201 	lsl.w	r2, r2, r1
 80008aa:	fa00 f001 	lsl.w	r0, r0, r1
 80008ae:	d90b      	bls.n	80008c8 <__udivmoddi4+0x1b0>
 80008b0:	eb1c 0404 	adds.w	r4, ip, r4
 80008b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b8:	f080 8088 	bcs.w	80009cc <__udivmoddi4+0x2b4>
 80008bc:	42a5      	cmp	r5, r4
 80008be:	f240 8085 	bls.w	80009cc <__udivmoddi4+0x2b4>
 80008c2:	f1a8 0802 	sub.w	r8, r8, #2
 80008c6:	4464      	add	r4, ip
 80008c8:	1b64      	subs	r4, r4, r5
 80008ca:	b29d      	uxth	r5, r3
 80008cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008d0:	fb09 4413 	mls	r4, r9, r3, r4
 80008d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008dc:	45a6      	cmp	lr, r4
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x1da>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008e8:	d26c      	bcs.n	80009c4 <__udivmoddi4+0x2ac>
 80008ea:	45a6      	cmp	lr, r4
 80008ec:	d96a      	bls.n	80009c4 <__udivmoddi4+0x2ac>
 80008ee:	3b02      	subs	r3, #2
 80008f0:	4464      	add	r4, ip
 80008f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008f6:	fba3 9502 	umull	r9, r5, r3, r2
 80008fa:	eba4 040e 	sub.w	r4, r4, lr
 80008fe:	42ac      	cmp	r4, r5
 8000900:	46c8      	mov	r8, r9
 8000902:	46ae      	mov	lr, r5
 8000904:	d356      	bcc.n	80009b4 <__udivmoddi4+0x29c>
 8000906:	d053      	beq.n	80009b0 <__udivmoddi4+0x298>
 8000908:	b156      	cbz	r6, 8000920 <__udivmoddi4+0x208>
 800090a:	ebb0 0208 	subs.w	r2, r0, r8
 800090e:	eb64 040e 	sbc.w	r4, r4, lr
 8000912:	fa04 f707 	lsl.w	r7, r4, r7
 8000916:	40ca      	lsrs	r2, r1
 8000918:	40cc      	lsrs	r4, r1
 800091a:	4317      	orrs	r7, r2
 800091c:	e9c6 7400 	strd	r7, r4, [r6]
 8000920:	4618      	mov	r0, r3
 8000922:	2100      	movs	r1, #0
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	f1c3 0120 	rsb	r1, r3, #32
 800092c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000930:	fa20 f201 	lsr.w	r2, r0, r1
 8000934:	fa25 f101 	lsr.w	r1, r5, r1
 8000938:	409d      	lsls	r5, r3
 800093a:	432a      	orrs	r2, r5
 800093c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	fbb1 f0f7 	udiv	r0, r1, r7
 8000948:	fb07 1510 	mls	r5, r7, r0, r1
 800094c:	0c11      	lsrs	r1, r2, #16
 800094e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000952:	fb00 f50e 	mul.w	r5, r0, lr
 8000956:	428d      	cmp	r5, r1
 8000958:	fa04 f403 	lsl.w	r4, r4, r3
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x258>
 800095e:	eb1c 0101 	adds.w	r1, ip, r1
 8000962:	f100 38ff 	add.w	r8, r0, #4294967295
 8000966:	d22f      	bcs.n	80009c8 <__udivmoddi4+0x2b0>
 8000968:	428d      	cmp	r5, r1
 800096a:	d92d      	bls.n	80009c8 <__udivmoddi4+0x2b0>
 800096c:	3802      	subs	r0, #2
 800096e:	4461      	add	r1, ip
 8000970:	1b49      	subs	r1, r1, r5
 8000972:	b292      	uxth	r2, r2
 8000974:	fbb1 f5f7 	udiv	r5, r1, r7
 8000978:	fb07 1115 	mls	r1, r7, r5, r1
 800097c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000980:	fb05 f10e 	mul.w	r1, r5, lr
 8000984:	4291      	cmp	r1, r2
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x282>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000990:	d216      	bcs.n	80009c0 <__udivmoddi4+0x2a8>
 8000992:	4291      	cmp	r1, r2
 8000994:	d914      	bls.n	80009c0 <__udivmoddi4+0x2a8>
 8000996:	3d02      	subs	r5, #2
 8000998:	4462      	add	r2, ip
 800099a:	1a52      	subs	r2, r2, r1
 800099c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009a0:	e738      	b.n	8000814 <__udivmoddi4+0xfc>
 80009a2:	4631      	mov	r1, r6
 80009a4:	4630      	mov	r0, r6
 80009a6:	e708      	b.n	80007ba <__udivmoddi4+0xa2>
 80009a8:	4639      	mov	r1, r7
 80009aa:	e6e6      	b.n	800077a <__udivmoddi4+0x62>
 80009ac:	4610      	mov	r0, r2
 80009ae:	e6fb      	b.n	80007a8 <__udivmoddi4+0x90>
 80009b0:	4548      	cmp	r0, r9
 80009b2:	d2a9      	bcs.n	8000908 <__udivmoddi4+0x1f0>
 80009b4:	ebb9 0802 	subs.w	r8, r9, r2
 80009b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009bc:	3b01      	subs	r3, #1
 80009be:	e7a3      	b.n	8000908 <__udivmoddi4+0x1f0>
 80009c0:	4645      	mov	r5, r8
 80009c2:	e7ea      	b.n	800099a <__udivmoddi4+0x282>
 80009c4:	462b      	mov	r3, r5
 80009c6:	e794      	b.n	80008f2 <__udivmoddi4+0x1da>
 80009c8:	4640      	mov	r0, r8
 80009ca:	e7d1      	b.n	8000970 <__udivmoddi4+0x258>
 80009cc:	46d0      	mov	r8, sl
 80009ce:	e77b      	b.n	80008c8 <__udivmoddi4+0x1b0>
 80009d0:	3d02      	subs	r5, #2
 80009d2:	4462      	add	r2, ip
 80009d4:	e732      	b.n	800083c <__udivmoddi4+0x124>
 80009d6:	4608      	mov	r0, r1
 80009d8:	e70a      	b.n	80007f0 <__udivmoddi4+0xd8>
 80009da:	4464      	add	r4, ip
 80009dc:	3802      	subs	r0, #2
 80009de:	e742      	b.n	8000866 <__udivmoddi4+0x14e>

080009e0 <__aeabi_idiv0>:
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a08:	68fb      	ldr	r3, [r7, #12]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f7ff ffe1 	bl	80009e4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff ffde 	bl	80009e4 <LL_AHB1_GRP1_EnableClock>

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_DMA_Init+0x84>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_HIGH;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_DMA_Init+0x80>)
 8000a64:	f001 fa60 	bl	8001f28 <HAL_DMA_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_DMA_Init+0x5a>
  {
    Error_Handler();
 8000a6e:	f000 fd20 	bl	80014b2 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200b      	movs	r0, #11
 8000a78:	f001 fa21 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a7c:	200b      	movs	r0, #11
 8000a7e:	f001 fa38 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	200c      	movs	r0, #12
 8000a88:	f001 fa19 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f001 fa30 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000108 	.word	0x20000108
 8000a9c:	4002001c 	.word	0x4002001c

08000aa0 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_OK if no error, otherwise ETX_OTA_EX_ERR
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
	ETX_OTA_EX_ ret = ETX_OTA_EX_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
	uint16_t len = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	81bb      	strh	r3, [r7, #12]
	char* ota_response[2] = {"ACK0","NACK"} ;
 8000aae:	4a57      	ldr	r2, [pc, #348]	; (8000c0c <etx_ota_download_and_flash+0x16c>)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab6:	e883 0003 	stmia.w	r3, {r0, r1}

	printf("Reading the file size...\r\n");
 8000aba:	4855      	ldr	r0, [pc, #340]	; (8000c10 <etx_ota_download_and_flash+0x170>)
 8000abc:	f005 fd5a 	bl	8006574 <puts>

	HAL_UART_Receive(&huart1, Rx_Buffer, 10, HAL_MAX_DELAY );
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	4953      	ldr	r1, [pc, #332]	; (8000c14 <etx_ota_download_and_flash+0x174>)
 8000ac8:	4853      	ldr	r0, [pc, #332]	; (8000c18 <etx_ota_download_and_flash+0x178>)
 8000aca:	f003 ffbd 	bl	8004a48 <HAL_UART_Receive>

	if((ota_fw_total_size = (uint32_t)atoi((char*)Rx_Buffer)) > 0)
 8000ace:	4851      	ldr	r0, [pc, #324]	; (8000c14 <etx_ota_download_and_flash+0x174>)
 8000ad0:	f005 fb98 	bl	8006204 <atoi>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <etx_ota_download_and_flash+0x17c>)
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <etx_ota_download_and_flash+0x17c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d03a      	beq.n	8000b5a <etx_ota_download_and_flash+0xba>
	{
	  max_num_of_chunks =  (uint32_t)floor((double)((float)ota_fw_total_size/ETX_OTA_CHUNK_MAX_SIZE));
 8000ae4:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <etx_ota_download_and_flash+0x17c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000c20 <etx_ota_download_and_flash+0x180>
 8000af4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000af8:	ee16 0a90 	vmov	r0, s13
 8000afc:	f7ff fcf4 	bl	80004e8 <__aeabi_f2d>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	ec43 2b10 	vmov	d0, r2, r3
 8000b08:	f006 fb9e 	bl	8007248 <floor>
 8000b0c:	ec53 2b10 	vmov	r2, r3, d0
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	f7ff fdc8 	bl	80006a8 <__aeabi_d2uiz>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <etx_ota_download_and_flash+0x184>)
 8000b1c:	6013      	str	r3, [r2, #0]
	  printf("Total file size %ld + 46 Bytes\r\n",ota_fw_total_size-46); //46 bytes of file end boundary web mark
 8000b1e:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <etx_ota_download_and_flash+0x17c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3b2e      	subs	r3, #46	; 0x2e
 8000b24:	4619      	mov	r1, r3
 8000b26:	4840      	ldr	r0, [pc, #256]	; (8000c28 <etx_ota_download_and_flash+0x188>)
 8000b28:	f005 fcbe 	bl	80064a8 <iprintf>
	  printf("Sending ACK...\r\n");
 8000b2c:	483f      	ldr	r0, [pc, #252]	; (8000c2c <etx_ota_download_and_flash+0x18c>)
 8000b2e:	f005 fd21 	bl	8006574 <puts>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ota_response[0], sizeof(ota_response[0]), 1000 );//send the ACK
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4837      	ldr	r0, [pc, #220]	; (8000c18 <etx_ota_download_and_flash+0x178>)
 8000b3c:	f003 fef6 	bl	800492c <HAL_UART_Transmit>
	  printf("Waiting for the chunks...\r\n");
 8000b40:	483b      	ldr	r0, [pc, #236]	; (8000c30 <etx_ota_download_and_flash+0x190>)
 8000b42:	f005 fd17 	bl	8006574 <puts>

	  HAL_UART_Receive_DMA(&huart1, temp_Buffer, sizeof(temp_Buffer));
 8000b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4a:	493a      	ldr	r1, [pc, #232]	; (8000c34 <etx_ota_download_and_flash+0x194>)
 8000b4c:	4832      	ldr	r0, [pc, #200]	; (8000c18 <etx_ota_download_and_flash+0x178>)
 8000b4e:	f004 f843 	bl	8004bd8 <HAL_UART_Receive_DMA>

	  ota_state = ETX_OTA_STATE_AWAITING_CHUNK;
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <etx_ota_download_and_flash+0x198>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	e00a      	b.n	8000b70 <etx_ota_download_and_flash+0xd0>

	}
	else
	{
	  printf("Zero size file received. Sending NACK...\r\n");
 8000b5a:	4838      	ldr	r0, [pc, #224]	; (8000c3c <etx_ota_download_and_flash+0x19c>)
 8000b5c:	f005 fd0a 	bl	8006574 <puts>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ota_response[1], sizeof(ota_response[1]), 100 );
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	2204      	movs	r2, #4
 8000b66:	482c      	ldr	r0, [pc, #176]	; (8000c18 <etx_ota_download_and_flash+0x178>)
 8000b68:	f003 fee0 	bl	800492c <HAL_UART_Transmit>
	  return ETX_OTA_EX_ERR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e049      	b.n	8000c04 <etx_ota_download_and_flash+0x164>
	}

	do
	{
		if(!is_the_last_chunk)
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <etx_ota_download_and_flash+0x1a0>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <etx_ota_download_and_flash+0xf0>
		{
			while(ota_state != ETX_OTA_STATE_RECEIVED_CHUNK)
 8000b7e:	bf00      	nop
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <etx_ota_download_and_flash+0x198>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d1fb      	bne.n	8000b80 <etx_ota_download_and_flash+0xe0>
			{}
			len = (uint16_t)sizeof(Rx_Buffer);
 8000b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8c:	81bb      	strh	r3, [r7, #12]
 8000b8e:	e028      	b.n	8000be2 <etx_ota_download_and_flash+0x142>
		}
		else
		{
			HAL_Delay(2000); //wait for the last chunk to be available on dma buffer
 8000b90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b94:	f001 f894 	bl	8001cc0 <HAL_Delay>
			ota_state = ETX_OTA_STATE_RECEIVED_CHUNK;
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <etx_ota_download_and_flash+0x198>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	701a      	strb	r2, [r3, #0]
			len = ota_fw_total_size - ota_fw_received_size;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <etx_ota_download_and_flash+0x17c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <etx_ota_download_and_flash+0x1a4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	81bb      	strh	r3, [r7, #12]
			printf("Received chunk of length %d\r\n",len);
 8000bae:	89bb      	ldrh	r3, [r7, #12]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4825      	ldr	r0, [pc, #148]	; (8000c48 <etx_ota_download_and_flash+0x1a8>)
 8000bb4:	f005 fc78 	bl	80064a8 <iprintf>

			if(dma_rec_half == FIRST_HALF)
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <etx_ota_download_and_flash+0x1ac>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d108      	bne.n	8000bd2 <etx_ota_download_and_flash+0x132>
				ret = etx_process_data( temp_Buffer+ETX_OTA_CHUNK_MAX_SIZE, len );
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <etx_ota_download_and_flash+0x1b0>)
 8000bc2:	89bb      	ldrh	r3, [r7, #12]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	f000 f844 	bl	8000c54 <etx_process_data>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]
			else
				ret = etx_process_data( temp_Buffer, len );

			break;
 8000bd0:	e017      	b.n	8000c02 <etx_ota_download_and_flash+0x162>
				ret = etx_process_data( temp_Buffer, len );
 8000bd2:	89bb      	ldrh	r3, [r7, #12]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <etx_ota_download_and_flash+0x194>)
 8000bd8:	f000 f83c 	bl	8000c54 <etx_process_data>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
			break;
 8000be0:	e00f      	b.n	8000c02 <etx_ota_download_and_flash+0x162>
		}
		printf("Received chunk of length %d\r\n",len);
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <etx_ota_download_and_flash+0x1a8>)
 8000be8:	f005 fc5e 	bl	80064a8 <iprintf>
		ret = etx_process_data( Rx_Buffer, len );
 8000bec:	89bb      	ldrh	r3, [r7, #12]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <etx_ota_download_and_flash+0x174>)
 8000bf2:	f000 f82f 	bl	8000c54 <etx_process_data>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73fb      	strb	r3, [r7, #15]
	}while( ota_state != ETX_OTA_STATE_END );
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <etx_ota_download_and_flash+0x198>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d1b6      	bne.n	8000b70 <etx_ota_download_and_flash+0xd0>

	return ret;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08007430 	.word	0x08007430
 8000c10:	08007368 	.word	0x08007368
 8000c14:	20000168 	.word	0x20000168
 8000c18:	20000e18 	.word	0x20000e18
 8000c1c:	20000d70 	.word	0x20000d70
 8000c20:	44800000 	.word	0x44800000
 8000c24:	20000d78 	.word	0x20000d78
 8000c28:	08007384 	.word	0x08007384
 8000c2c:	080073a8 	.word	0x080073a8
 8000c30:	080073b8 	.word	0x080073b8
 8000c34:	20000568 	.word	0x20000568
 8000c38:	20000d68 	.word	0x20000d68
 8000c3c:	080073d4 	.word	0x080073d4
 8000c40:	20000d74 	.word	0x20000d74
 8000c44:	20000d6c 	.word	0x20000d6c
 8000c48:	08007400 	.word	0x08007400
 8000c4c:	20000d7c 	.word	0x20000d7c
 8000c50:	20000968 	.word	0x20000968

08000c54 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param len maximum length to receive
  * @retval ETX_OTA_EX_OK if no error, otherwise ETX_OTA_EX_ERR
  */
static ETX_OTA_EX_ etx_process_data(uint8_t *buf, uint16_t len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
	  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]


	  if( write_data_to_flash_app( buf, len, ( ota_fw_received_size == 0) ) == HAL_OK )
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <etx_process_data+0xc8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f85c 	bl	8000d34 <write_data_to_flash_app>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d144      	bne.n	8000d0c <etx_process_data+0xb8>
	  {

			if( ota_fw_received_size >= ota_fw_total_size )
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <etx_process_data+0xc8>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <etx_process_data+0xcc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d30f      	bcc.n	8000cae <etx_process_data+0x5a>
			{
			  printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_CHUNK_MAX_SIZE,max_num_of_chunks);
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <etx_process_data+0xc8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	0a9b      	lsrs	r3, r3, #10
 8000c94:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <etx_process_data+0xd0>)
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <etx_process_data+0xd4>)
 8000c9c:	f005 fc04 	bl	80064a8 <iprintf>
			  ota_state = ETX_OTA_STATE_END;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <etx_process_data+0xd8>)
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	701a      	strb	r2, [r3, #0]
			  return ret = ETX_OTA_EX_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	e031      	b.n	8000d12 <etx_process_data+0xbe>
			}



			if(ota_fw_received_size/ETX_OTA_CHUNK_MAX_SIZE < ota_fw_total_size/ETX_OTA_CHUNK_MAX_SIZE)
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <etx_process_data+0xc8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	0a9a      	lsrs	r2, r3, #10
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <etx_process_data+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	0a9b      	lsrs	r3, r3, #10
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d20c      	bcs.n	8000cd8 <etx_process_data+0x84>
			{
				printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_CHUNK_MAX_SIZE, max_num_of_chunks);
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <etx_process_data+0xc8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	0a9b      	lsrs	r3, r3, #10
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <etx_process_data+0xd0>)
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <etx_process_data+0xd4>)
 8000ccc:	f005 fbec 	bl	80064a8 <iprintf>
				ota_state = ETX_OTA_STATE_AWAITING_CHUNK;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <etx_process_data+0xd8>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e016      	b.n	8000d06 <etx_process_data+0xb2>
			}
			else if(ota_fw_received_size/ETX_OTA_CHUNK_MAX_SIZE == ota_fw_total_size/ETX_OTA_CHUNK_MAX_SIZE )
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <etx_process_data+0xc8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	0a9a      	lsrs	r2, r3, #10
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <etx_process_data+0xcc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	0a9b      	lsrs	r3, r3, #10
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d10e      	bne.n	8000d06 <etx_process_data+0xb2>
			{
				printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_CHUNK_MAX_SIZE, max_num_of_chunks);
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <etx_process_data+0xc8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0a9b      	lsrs	r3, r3, #10
 8000cee:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <etx_process_data+0xd0>)
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <etx_process_data+0xd4>)
 8000cf6:	f005 fbd7 	bl	80064a8 <iprintf>
				ota_state = ETX_OTA_STATE_AWAITING_CHUNK;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <etx_process_data+0xd8>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	701a      	strb	r2, [r3, #0]
				is_the_last_chunk = true;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <etx_process_data+0xdc>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
			}


			ret = ETX_OTA_EX_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e001      	b.n	8000d10 <etx_process_data+0xbc>
	  }
	  else
	  {
			ret = ETX_OTA_EX_ERR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
	  }
	  return ret;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000d6c 	.word	0x20000d6c
 8000d20:	20000d70 	.word	0x20000d70
 8000d24:	20000d78 	.word	0x20000d78
 8000d28:	08007438 	.word	0x08007438
 8000d2c:	20000d68 	.word	0x20000d68
 8000d30:	20000d74 	.word	0x20000d74

08000d34 <write_data_to_flash_app>:
  * @param data_len chunk length to be flashed
  * @param is_first_block check variable to clear the memory only once
  * @retval  HAL_OK, HAL_ERROR, HAL_BUSY,HAL_TIMEOUT
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,uint16_t data_len,bool is_first_block)
{
 8000d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d38:	b0b1      	sub	sp, #196	; 0xc4
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8000d40:	460b      	mov	r3, r1
 8000d42:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8000d46:	4613      	mov	r3, r2
 8000d48:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  HAL_StatusTypeDef ret;
  uint64_t data_temp = 0;
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  uint32_t FirstPage = 0, NbOfPages = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int i;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000d64:	f001 fc56 	bl	8002614 <HAL_FLASH_Unlock>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    if( ret != HAL_OK )
 8000d6e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <write_data_to_flash_app+0x4a>
    {
    	printf("Flash unlock Error\r\n");
 8000d76:	48a6      	ldr	r0, [pc, #664]	; (8001010 <write_data_to_flash_app+0x2dc>)
 8000d78:	f005 fbfc 	bl	8006574 <puts>
    	break;
 8000d7c:	e1c3      	b.n	8001106 <write_data_to_flash_app+0x3d2>
    }

    if(is_first_block) //No need to erase every time.
 8000d7e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d039      	beq.n	8000dfa <write_data_to_flash_app+0xc6>
    {
       ota_state = ETX_OTA_STATE_FLASHING;
 8000d86:	4aa3      	ldr	r2, [pc, #652]	; (8001014 <write_data_to_flash_app+0x2e0>)
 8000d88:	2302      	movs	r3, #2
 8000d8a:	7013      	strb	r3, [r2, #0]

       printf("Erasing the Flash memory...\r\n");
 8000d8c:	48a2      	ldr	r0, [pc, #648]	; (8001018 <write_data_to_flash_app+0x2e4>)
 8000d8e:	f005 fbf1 	bl	8006574 <puts>

       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d92:	4aa2      	ldr	r2, [pc, #648]	; (800101c <write_data_to_flash_app+0x2e8>)
 8000d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d98:	6113      	str	r3, [r2, #16]

       FirstPage = GetPage(FLASH_USER_START_ADDR);
 8000d9a:	48a1      	ldr	r0, [pc, #644]	; (8001020 <write_data_to_flash_app+0x2ec>)
 8000d9c:	f000 f9c0 	bl	8001120 <GetPage>
 8000da0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

       NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8000da4:	489f      	ldr	r0, [pc, #636]	; (8001024 <write_data_to_flash_app+0x2f0>)
 8000da6:	f000 f9bb 	bl	8001120 <GetPage>
 8000daa:	4602      	mov	r2, r0
 8000dac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

       FLASH_EraseInitTypeDef EraseInitStruct;

       uint32_t SectorError;

       EraseInitStruct.TypeErase       = FLASH_TYPEERASE_PAGES;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
       EraseInitStruct.Page            = FirstPage;
 8000dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       EraseInitStruct.NbPages         = NbOfPages;
 8000dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000dce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000dd2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fced 	bl	80027b8 <HAL_FLASHEx_Erase>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if( ret != HAL_OK )
 8000de4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <write_data_to_flash_app+0xc0>
      {
    	  printf("Flash Erase Error\r\n");
 8000dec:	488e      	ldr	r0, [pc, #568]	; (8001028 <write_data_to_flash_app+0x2f4>)
 8000dee:	f005 fbc1 	bl	8006574 <puts>
 8000df2:	e188      	b.n	8001106 <write_data_to_flash_app+0x3d2>
    	  break;
      }

      printf("Flash memory successfuly erased...\r\n");
 8000df4:	488d      	ldr	r0, [pc, #564]	; (800102c <write_data_to_flash_app+0x2f8>)
 8000df6:	f005 fbbd 	bl	8006574 <puts>
    }

    for( i = 0; i <= data_len-8; i += 8 )
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000e00:	e0e7      	b.n	8000fd2 <write_data_to_flash_app+0x29e>
    {
      data_temp = (uint64_t)data[i+7]<<56 |
 8000e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e06:	1dda      	adds	r2, r3, #7
 8000e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	643b      	str	r3, [r7, #64]	; 0x40
 8000e16:	647a      	str	r2, [r7, #68]	; 0x44
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	f04f 0100 	mov.w	r1, #0
 8000e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e22:	0619      	lsls	r1, r3, #24
 8000e24:	2000      	movs	r0, #0
    		  	  (uint64_t)data[i+6]<<48 |
 8000e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e2a:	1d9a      	adds	r2, r3, #6
 8000e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2200      	movs	r2, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e3a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8000e46:	0433      	lsls	r3, r6, #16
 8000e48:	2200      	movs	r2, #0
      data_temp = (uint64_t)data[i+7]<<56 |
 8000e4a:	ea40 0602 	orr.w	r6, r0, r2
 8000e4e:	66be      	str	r6, [r7, #104]	; 0x68
 8000e50:	430b      	orrs	r3, r1
 8000e52:	66fb      	str	r3, [r7, #108]	; 0x6c
				  (uint64_t)data[i+5]<<40 |
 8000e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e58:	1d5a      	adds	r2, r3, #5
 8000e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2200      	movs	r2, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
 8000e68:	637a      	str	r2, [r7, #52]	; 0x34
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e74:	020b      	lsls	r3, r1, #8
 8000e76:	2200      	movs	r2, #0
    		  	  (uint64_t)data[i+6]<<48 |
 8000e78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000e7a:	4311      	orrs	r1, r2
 8000e7c:	6639      	str	r1, [r7, #96]	; 0x60
 8000e7e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000e80:	430b      	orrs	r3, r1
 8000e82:	667b      	str	r3, [r7, #100]	; 0x64
				  (uint64_t)data[i+4]<<32 |
 8000e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ea4:	000b      	movs	r3, r1
 8000ea6:	2200      	movs	r2, #0
				  (uint64_t)data[i+5]<<40 |
 8000ea8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8000eae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
				  (uint64_t)data[i+3]<<24 |
 8000eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000eb8:	1cda      	adds	r2, r3, #3
 8000eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8000eca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	061b      	lsls	r3, r3, #24
 8000ed8:	61bb      	str	r3, [r7, #24]
				  (uint64_t)data[i+4]<<32 |
 8000eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000edc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee8:	460a      	mov	r2, r1
 8000eea:	4313      	orrs	r3, r2
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
				  (uint64_t)data[i+2]<<16 |
 8000eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ef2:	1c9a      	adds	r2, r3, #2
 8000ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2200      	movs	r2, #0
 8000f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000f0e:	040b      	lsls	r3, r1, #16
 8000f10:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f12:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8000f16:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f18:	040a      	lsls	r2, r1, #16
				  (uint64_t)data[i+3]<<24 |
 8000f1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000f22:	430b      	orrs	r3, r1
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
				  (uint64_t)data[i+1]<<8  |
 8000f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	673b      	str	r3, [r7, #112]	; 0x70
 8000f3a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000f46:	020b      	lsls	r3, r1, #8
 8000f48:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000f4a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8000f4e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000f50:	020a      	lsls	r2, r1, #8
				  (uint64_t)data[i+2]<<16 |
 8000f52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f54:	ea41 0a02 	orr.w	sl, r1, r2
 8000f58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f5a:	ea41 0b03 	orr.w	fp, r1, r3
				  (uint64_t)data[i]  <<0  ;
 8000f5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	617a      	str	r2, [r7, #20]
      data_temp = (uint64_t)data[i+7]<<56 |
 8000f72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f76:	460b      	mov	r3, r1
 8000f78:	ea4a 0303 	orr.w	r3, sl, r3
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	ea4b 0303 	orr.w	r3, fp, r3
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f8a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <write_data_to_flash_app+0x2fc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000f96:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8000f9a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f001 faf4 	bl	800258c <HAL_FLASH_Program>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
							   data_temp
                             );
      if( ret == HAL_OK )
 8000faa:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <write_data_to_flash_app+0x28c>
      {
        ota_fw_received_size += 8; //we are writting double words
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <write_data_to_flash_app+0x2fc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f103 0208 	add.w	r2, r3, #8
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <write_data_to_flash_app+0x2fc>)
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e003      	b.n	8000fc8 <write_data_to_flash_app+0x294>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000fc0:	481c      	ldr	r0, [pc, #112]	; (8001034 <write_data_to_flash_app+0x300>)
 8000fc2:	f005 fad7 	bl	8006574 <puts>
        break;
 8000fc6:	e00c      	b.n	8000fe2 <write_data_to_flash_app+0x2ae>
    for( i = 0; i <= data_len-8; i += 8 )
 8000fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fcc:	3308      	adds	r3, #8
 8000fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000fd2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000fd6:	1fda      	subs	r2, r3, #7
 8000fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	f6ff af10 	blt.w	8000e02 <write_data_to_flash_app+0xce>
      }
    }

    if(data_len%8 != 0 && is_the_last_chunk == true) // flash the tail of the code
 8000fe2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d07d      	beq.n	80010ec <write_data_to_flash_app+0x3b8>
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <write_data_to_flash_app+0x304>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d079      	beq.n	80010ec <write_data_to_flash_app+0x3b8>
    {
    	uint8_t cnt1 = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    	for(int cnt = i,cnt1 = 0; cnt<data_len;cnt++,cnt1++)
 8000ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800100c:	e046      	b.n	800109c <write_data_to_flash_app+0x368>
 800100e:	bf00      	nop
 8001010:	08007444 	.word	0x08007444
 8001014:	20000d68 	.word	0x20000d68
 8001018:	08007458 	.word	0x08007458
 800101c:	58004000 	.word	0x58004000
 8001020:	08040000 	.word	0x08040000
 8001024:	0807ffff 	.word	0x0807ffff
 8001028:	08007478 	.word	0x08007478
 800102c:	0800748c 	.word	0x0800748c
 8001030:	20000d6c 	.word	0x20000d6c
 8001034:	080074b0 	.word	0x080074b0
 8001038:	20000d74 	.word	0x20000d74
    	{
    		data_temp = data_temp | ((uint64_t)data[cnt]<<cnt1*8);
 800103c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001040:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2200      	movs	r2, #0
 800104c:	4698      	mov	r8, r3
 800104e:	4691      	mov	r9, r2
 8001050:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	f1a3 0120 	sub.w	r1, r3, #32
 800105a:	f1c3 0220 	rsb	r2, r3, #32
 800105e:	fa09 f503 	lsl.w	r5, r9, r3
 8001062:	fa08 f101 	lsl.w	r1, r8, r1
 8001066:	430d      	orrs	r5, r1
 8001068:	fa28 f202 	lsr.w	r2, r8, r2
 800106c:	4315      	orrs	r5, r2
 800106e:	fa08 f403 	lsl.w	r4, r8, r3
 8001072:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001076:	ea42 0104 	orr.w	r1, r2, r4
 800107a:	6039      	str	r1, [r7, #0]
 800107c:	432b      	orrs	r3, r5
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001084:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    	for(int cnt = i,cnt1 = 0; cnt<data_len;cnt++,cnt1++)
 8001088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800108c:	3301      	adds	r3, #1
 800108e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001096:	3301      	adds	r3, #1
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800109c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80010a0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbc9      	blt.n	800103c <write_data_to_flash_app+0x308>
    	}

        ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD,
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <write_data_to_flash_app+0x3e0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80010b0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80010b4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80010b8:	2001      	movs	r0, #1
 80010ba:	f001 fa67 	bl	800258c <HAL_FLASH_Program>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
                                 (ETX_APP_FLASH_ADDR + ota_fw_received_size),
    							   data_temp
                               );

        if( ret == HAL_OK )
 80010c4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10b      	bne.n	80010e4 <write_data_to_flash_app+0x3b0>
        {
        ota_fw_received_size += (data_len-i);
 80010cc:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80010d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <write_data_to_flash_app+0x3e0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <write_data_to_flash_app+0x3e0>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e003      	b.n	80010ec <write_data_to_flash_app+0x3b8>
        }
        else
        {
          printf("Flash Write Error\r\n");
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <write_data_to_flash_app+0x3e4>)
 80010e6:	f005 fa45 	bl	8006574 <puts>
          break;
 80010ea:	e00c      	b.n	8001106 <write_data_to_flash_app+0x3d2>
        }
    }

    ret = HAL_FLASH_Lock();
 80010ec:	f001 fab4 	bl	8002658 <HAL_FLASH_Lock>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

    if( ret != HAL_OK )
 80010f6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <write_data_to_flash_app+0x3d2>
    {
    	printf("Flash lock Error\r\n");
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <write_data_to_flash_app+0x3e8>)
 8001100:	f005 fa38 	bl	8006574 <puts>
    	break;
 8001104:	bf00      	nop
    }

  }while(false);

  return ret;
 8001106:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 800110a:	4618      	mov	r0, r3
 800110c:	37c4      	adds	r7, #196	; 0xc4
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001114:	20000d6c 	.word	0x20000d6c
 8001118:	080074b0 	.word	0x080074b0
 800111c:	080074c4 	.word	0x080074c4

08001120 <GetPage>:
/**
 * @brief Get the order number given a page address
 * @param Addr memory address for the page
 * @retval page order uint32_t number */
static uint32_t GetPage(uint32_t Addr)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800112e:	0b1b      	lsrs	r3, r3, #12
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800114a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4313      	orrs	r3, r2
 8001152:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff ffd9 	bl	800113c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff ffd6 	bl	800113c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ffd3 	bl	800113c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2008      	movs	r0, #8
 8001198:	f7ff ffd0 	bl	800113c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_GREEN_Pin|LD3_RED_Pin|LD1_BLUE_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2123      	movs	r1, #35	; 0x23
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <MX_GPIO_Init+0x9c>)
 80011a2:	f001 fd55 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a6:	2310      	movs	r3, #16
 80011a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4816      	ldr	r0, [pc, #88]	; (8001210 <MX_GPIO_Init+0xa0>)
 80011b8:	f001 fbc2 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_GREEN_Pin|LD3_RED_Pin|LD1_BLUE_Pin;
 80011bc:	2323      	movs	r3, #35	; 0x23
 80011be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <MX_GPIO_Init+0x9c>)
 80011d2:	f001 fbb5 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 80011d6:	2301      	movs	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <MX_GPIO_Init+0xa4>)
 80011e8:	f001 fbaa 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 80011ec:	2302      	movs	r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_GPIO_Init+0xa4>)
 80011fe:	f001 fb9f 	bl	8002940 <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800
 8001214:	48000c00 	.word	0x48000c00

08001218 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch,FILE *f)
#endif
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)&ch,1,100);
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	2201      	movs	r2, #1
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <__io_putchar+0x20>)
 8001228:	f003 fb80 	bl	800492c <HAL_UART_Transmit>
	return ch;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000d84 	.word	0x20000d84

0800123c <go_to_application>:

static void go_to_application(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

	printf("Starting the application ...\n");
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <go_to_application+0x28>)
 8001244:	f005 f996 	bl	8006574 <puts>

	void (*app_reset_handler)(void) = (void*) (*(volatile uint32_t*)(0x08040000 + 4));
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <go_to_application+0x2c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(LD2_GREEN_GPIO_Port,LD2_GREEN_Pin,GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <go_to_application+0x30>)
 8001254:	f001 fcfc 	bl	8002c50 <HAL_GPIO_WritePin>

	app_reset_handler(); //call the app reset handler
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4798      	blx	r3
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	080074d8 	.word	0x080074d8
 8001268:	08040004 	.word	0x08040004
 800126c:	48000400 	.word	0x48000400

08001270 <is_flash_empty>:

bool is_flash_empty(uint32_t start_addr,uint32_t end_addr)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	uint32_t  Address = start_addr,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]
			   data32 = 0xFFFF;
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	60bb      	str	r3, [r7, #8]
	while (Address < end_addr)
 8001284:	e00c      	b.n	80012a0 <is_flash_empty+0x30>
	{
	    data32 = *(__IO uint32_t *)Address;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60bb      	str	r3, [r7, #8]

	    if (data32 != 0xFFFF)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	4293      	cmp	r3, r2
 8001294:	d001      	beq.n	800129a <is_flash_empty+0x2a>
	    {
	      return false;
 8001296:	2300      	movs	r3, #0
 8001298:	e007      	b.n	80012aa <is_flash_empty+0x3a>
	    }
	    Address += 4;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
	while (Address < end_addr)
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3ee      	bcc.n	8001286 <is_flash_empty+0x16>
	}
	return true;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  GPIO_PinState OTA_Pin_state = GPIO_PIN_SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
  GPIO_PinState launch_App_Pin_state = GPIO_PIN_SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71bb      	strb	r3, [r7, #6]
  _Bool Is_flash_empty = true;
 80012c6:	2301      	movs	r3, #1
 80012c8:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f000 fc73 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f869 	bl	80013a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012d2:	f000 f8d1 	bl	8001478 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f7ff ff4b 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 80012da:	f7ff fb9d 	bl	8000a18 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012de:	f000 fb2f 	bl	8001940 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 80012e2:	f000 fadf 	bl	80018a4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader start success\n");
 80012e6:	4825      	ldr	r0, [pc, #148]	; (800137c <main+0xc4>)
 80012e8:	f005 f944 	bl	8006574 <puts>

  if( (Is_flash_empty = is_flash_empty(FLASH_USER_START_ADDR,FLASH_USER_END_ADDR) ) == false)
 80012ec:	4924      	ldr	r1, [pc, #144]	; (8001380 <main+0xc8>)
 80012ee:	4825      	ldr	r0, [pc, #148]	; (8001384 <main+0xcc>)
 80012f0:	f7ff ffbe 	bl	8001270 <is_flash_empty>
 80012f4:	4603      	mov	r3, r0
 80012f6:	717b      	strb	r3, [r7, #5]
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	f083 0301 	eor.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <main+0x54>
  {
	  printf("App found on memmory.\n"
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <main+0xd0>)
 8001306:	f005 f935 	bl	8006574 <puts>
 800130a:	e002      	b.n	8001312 <main+0x5a>
			  "Please, press SW1 to start an OTA update or SW3 to run the app...\n");
  }
  else
  {
	  printf("App not found. Please, press SW1 to start an OTA update...\n");
 800130c:	481f      	ldr	r0, [pc, #124]	; (800138c <main+0xd4>)
 800130e:	f005 f931 	bl	8006574 <puts>
  }

  do
    {
	  OTA_Pin_state = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 8001312:	2110      	movs	r1, #16
 8001314:	481e      	ldr	r0, [pc, #120]	; (8001390 <main+0xd8>)
 8001316:	f001 fc83 	bl	8002c20 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	  launch_App_Pin_state = HAL_GPIO_ReadPin(B3_GPIO_Port,B3_Pin);
 800131e:	2102      	movs	r1, #2
 8001320:	481c      	ldr	r0, [pc, #112]	; (8001394 <main+0xdc>)
 8001322:	f001 fc7d 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	71bb      	strb	r3, [r7, #6]
      if(OTA_Pin_state == GPIO_PIN_RESET  || launch_App_Pin_state == GPIO_PIN_RESET )
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <main+0x80>
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d000      	beq.n	8001338 <main+0x80>
	  OTA_Pin_state = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 8001336:	e7ec      	b.n	8001312 <main+0x5a>
        break;
      }
   }while(1);


  if(OTA_Pin_state == GPIO_PIN_RESET)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d111      	bne.n	8001362 <main+0xaa>
  {
	  printf("Starting Firmware Download...\r\n");
 800133e:	4816      	ldr	r0, [pc, #88]	; (8001398 <main+0xe0>)
 8001340:	f005 f918 	bl	8006574 <puts>
	  if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8001344:	f7ff fbac 	bl	8000aa0 <etx_ota_download_and_flash>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <main+0x9e>
	  {
		printf("OTA Update error. Halting...\r\n");
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <main+0xe4>)
 8001350:	f005 f910 	bl	8006574 <puts>
		while(1);
 8001354:	e7fe      	b.n	8001354 <main+0x9c>
	  }
	  else
	  {
		printf("Firmware update success!\r\n");
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <main+0xe8>)
 8001358:	f005 f90c 	bl	8006574 <puts>
		go_to_application();
 800135c:	f7ff ff6e 	bl	800123c <go_to_application>
 8001360:	e00a      	b.n	8001378 <main+0xc0>
	  }
  }
  else if(launch_App_Pin_state == GPIO_PIN_RESET && Is_flash_empty == false)
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d107      	bne.n	8001378 <main+0xc0>
 8001368:	797b      	ldrb	r3, [r7, #5]
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <main+0xc0>
  {
	  go_to_application();
 8001374:	f7ff ff62 	bl	800123c <go_to_application>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001378:	e7fe      	b.n	8001378 <main+0xc0>
 800137a:	bf00      	nop
 800137c:	080074f8 	.word	0x080074f8
 8001380:	0807ffff 	.word	0x0807ffff
 8001384:	08040000 	.word	0x08040000
 8001388:	08007514 	.word	0x08007514
 800138c:	0800756c 	.word	0x0800756c
 8001390:	48000800 	.word	0x48000800
 8001394:	48000c00 	.word	0x48000c00
 8001398:	080075a8 	.word	0x080075a8
 800139c:	080075c8 	.word	0x080075c8
 80013a0:	080075e8 	.word	0x080075e8

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09a      	sub	sp, #104	; 0x68
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2248      	movs	r2, #72	; 0x48
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f9be 	bl	8006734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <SystemClock_Config+0xd0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d2:	4a28      	ldr	r2, [pc, #160]	; (8001474 <SystemClock_Config+0xd0>)
 80013d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <SystemClock_Config+0xd0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80013e6:	2323      	movs	r3, #35	; 0x23
 80013e8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013f6:	2301      	movs	r3, #1
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80013fe:	2300      	movs	r3, #0
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800140a:	2301      	movs	r3, #1
 800140c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001412:	2320      	movs	r3, #32
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001420:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001426:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f001 ffd5 	bl	80033dc <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001438:	f000 f83b 	bl	80014b2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800143c:	236f      	movs	r3, #111	; 0x6f
 800143e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2303      	movs	r3, #3
 8001442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2103      	movs	r1, #3
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fb31 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001468:	f000 f823 	bl	80014b2 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3768      	adds	r7, #104	; 0x68
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58000400 	.word	0x58000400

08001478 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2250      	movs	r2, #80	; 0x50
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f005 f955 	bl	8006734 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800148a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001490:	2300      	movs	r3, #0
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001494:	2300      	movs	r3, #0
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4618      	mov	r0, r3
 800149c:	f002 ff4f 	bl	800433e <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80014a6:	f000 f804 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014aa:	bf00      	nop
 80014ac:	3750      	adds	r7, #80	; 0x50
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b6:	b672      	cpsid	i
}
 80014b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ba:	e7fe      	b.n	80014ba <Error_Handler+0x8>

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ce:	e7fe      	b.n	80014ce <NMI_Handler+0x4>

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <HardFault_Handler+0x4>

080014d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <BusFault_Handler+0x4>

080014e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 fba7 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA1_Channel1_IRQHandler+0x10>)
 8001526:	f000 fee0 	bl	80022ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000eac 	.word	0x20000eac

08001534 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA1_Channel2_IRQHandler+0x10>)
 800153a:	f000 fed6 	bl	80022ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000108 	.word	0x20000108

08001548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <USART1_IRQHandler+0x10>)
 800154e:	f003 fb8f 	bl	8004c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000e18 	.word	0x20000e18

0800155c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <LPUART1_IRQHandler+0x10>)
 8001562:	f003 fb85 	bl	8004c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000d84 	.word	0x20000d84

08001570 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_UART_RxHalfCpltCallback+0x3c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d110      	bne.n	80015a2 <HAL_UART_RxHalfCpltCallback+0x32>
	{
		HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,(uint32_t)temp_Buffer,(uint32_t)Rx_Buffer,ETX_OTA_CHUNK_MAX_SIZE);
 8001580:	490b      	ldr	r1, [pc, #44]	; (80015b0 <HAL_UART_RxHalfCpltCallback+0x40>)
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HAL_UART_RxHalfCpltCallback+0x44>)
 8001584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <HAL_UART_RxHalfCpltCallback+0x48>)
 800158a:	f000 fd75 	bl	8002078 <HAL_DMA_Start_IT>
		ota_state = ETX_OTA_STATE_RECEIVED_CHUNK;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_UART_RxHalfCpltCallback+0x4c>)
 8001590:	2203      	movs	r2, #3
 8001592:	701a      	strb	r2, [r3, #0]
		dma_rec_half = FIRST_HALF;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_UART_RxHalfCpltCallback+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GREEN_GPIO_Port,LD2_GREEN_Pin);
 800159a:	2101      	movs	r1, #1
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <HAL_UART_RxHalfCpltCallback+0x54>)
 800159e:	f001 fb6f 	bl	8002c80 <HAL_GPIO_TogglePin>
	}
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000e18 	.word	0x20000e18
 80015b0:	20000568 	.word	0x20000568
 80015b4:	20000168 	.word	0x20000168
 80015b8:	20000108 	.word	0x20000108
 80015bc:	20000d68 	.word	0x20000d68
 80015c0:	20000d7c 	.word	0x20000d7c
 80015c4:	48000400 	.word	0x48000400

080015c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_UART_RxCpltCallback+0x3c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d111      	bne.n	80015fc <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,(uint32_t)(temp_Buffer+ETX_OTA_CHUNK_MAX_SIZE),(uint32_t)Rx_Buffer,ETX_OTA_CHUNK_MAX_SIZE);
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_UART_RxCpltCallback+0x40>)
 80015da:	4619      	mov	r1, r3
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_UART_RxCpltCallback+0x44>)
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_UART_RxCpltCallback+0x48>)
 80015e4:	f000 fd48 	bl	8002078 <HAL_DMA_Start_IT>
		ota_state = ETX_OTA_STATE_RECEIVED_CHUNK;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_UART_RxCpltCallback+0x4c>)
 80015ea:	2203      	movs	r2, #3
 80015ec:	701a      	strb	r2, [r3, #0]
		dma_rec_half = SECOND_HALF;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_UART_RxCpltCallback+0x50>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GREEN_GPIO_Port,LD2_GREEN_Pin);
 80015f4:	2101      	movs	r1, #1
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <HAL_UART_RxCpltCallback+0x54>)
 80015f8:	f001 fb42 	bl	8002c80 <HAL_GPIO_TogglePin>
	}
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000e18 	.word	0x20000e18
 8001608:	20000968 	.word	0x20000968
 800160c:	20000168 	.word	0x20000168
 8001610:	20000108 	.word	0x20000108
 8001614:	20000d68 	.word	0x20000d68
 8001618:	20000d7c 	.word	0x20000d7c
 800161c:	48000400 	.word	0x48000400

08001620 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e00a      	b.n	8001648 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	4601      	mov	r1, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf0      	blt.n	8001632 <_read+0x12>
  }

  return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e009      	b.n	8001680 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fdcf 	bl	8001218 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf1      	blt.n	800166c <_write+0x12>
  }
  return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_close>:

int _close(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	605a      	str	r2, [r3, #4]
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_isatty>:

int _isatty(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f005 f850 	bl	80067d0 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20030000 	.word	0x20030000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000d80 	.word	0x20000d80
 8001764:	20001078 	.word	0x20001078

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <SystemInit+0x98>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a23      	ldr	r2, [pc, #140]	; (8001800 <SystemInit+0x98>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001794:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <SystemInit+0x9c>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	f023 0305 	bic.w	r3, r3, #5
 80017b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <SystemInit+0xa0>)
 80017d4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <SystemInit+0xa0>)
 80017dc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	faf6fefb 	.word	0xfaf6fefb
 8001808:	22041000 	.word	0x22041000

0800180c <LL_AHB2_GRP1_EnableClock>:
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800184c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4313      	orrs	r3, r2
 8001854:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4013      	ands	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800187e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018aa:	4a24      	ldr	r2, [pc, #144]	; (800193c <MX_LPUART1_UART_Init+0x98>)
 80018ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 80018ee:	f002 ffcd 	bl	800488c <HAL_UART_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80018f8:	f7ff fddb 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80018fc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 8001902:	f004 fbb5 	bl	8006070 <HAL_UARTEx_SetTxFifoThreshold>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 800190c:	f7ff fdd1 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001910:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 8001916:	f004 fbe9 	bl	80060ec <HAL_UARTEx_SetRxFifoThreshold>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8001920:	f7ff fdc7 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_LPUART1_UART_Init+0x94>)
 8001926:	f004 fb6a 	bl	8005ffe <HAL_UARTEx_DisableFifoMode>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 8001930:	f7ff fdbf 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000d84 	.word	0x20000d84
 800193c:	40008000 	.word	0x40008000

08001940 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001946:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <MX_USART1_UART_Init+0x98>)
 8001948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001988:	4812      	ldr	r0, [pc, #72]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 800198a:	f002 ff7f 	bl	800488c <HAL_UART_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001994:	f7ff fd8d 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001998:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 800199e:	f004 fb67 	bl	8006070 <HAL_UARTEx_SetTxFifoThreshold>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80019a8:	f7ff fd83 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80019ac:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 80019b2:	f004 fb9b 	bl	80060ec <HAL_UARTEx_SetRxFifoThreshold>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80019bc:	f7ff fd79 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_USART1_UART_Init+0x94>)
 80019c2:	f004 fb1c 	bl	8005ffe <HAL_UARTEx_DisableFifoMode>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80019cc:	f7ff fd71 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000e18 	.word	0x20000e18
 80019d8:	40013800 	.word	0x40013800

080019dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b09c      	sub	sp, #112	; 0x70
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2250      	movs	r2, #80	; 0x50
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fe99 	bl	8006734 <memset>
  if(uartHandle->Instance==LPUART1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_UART_MspInit+0x14c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d12c      	bne.n	8001a66 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fc90 	bl	800433e <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff fd45 	bl	80014b2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff ff08 	bl	800183e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7ff feec 	bl	800180c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a34:	2303      	movs	r3, #3
 8001a36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a44:	2308      	movs	r3, #8
 8001a46:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4837      	ldr	r0, [pc, #220]	; (8001b2c <HAL_UART_MspInit+0x150>)
 8001a50:	f000 ff76 	bl	8002940 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2025      	movs	r0, #37	; 0x25
 8001a5a:	f000 fa30 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a5e:	2025      	movs	r0, #37	; 0x25
 8001a60:	f000 fa47 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a64:	e05b      	b.n	8001b1e <HAL_UART_MspInit+0x142>
  else if(uartHandle->Instance==USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_UART_MspInit+0x154>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d156      	bne.n	8001b1e <HAL_UART_MspInit+0x142>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fc5e 	bl	800433e <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_UART_MspInit+0xb0>
      Error_Handler();
 8001a88:	f7ff fd13 	bl	80014b2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a90:	f7ff feee 	bl	8001870 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	2002      	movs	r0, #2
 8001a96:	f7ff feb9 	bl	800180c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aaa:	2307      	movs	r3, #7
 8001aac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481f      	ldr	r0, [pc, #124]	; (8001b34 <HAL_UART_MspInit+0x158>)
 8001ab6:	f000 ff43 	bl	8002940 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_UART_MspInit+0x160>)
 8001abe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ac2:	220e      	movs	r2, #14
 8001ac4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001af2:	f000 fa19 	bl	8001f28 <HAL_DMA_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8001afc:	f7ff fcd9 	bl	80014b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_UART_MspInit+0x15c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2024      	movs	r0, #36	; 0x24
 8001b14:	f000 f9d3 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b18:	2024      	movs	r0, #36	; 0x24
 8001b1a:	f000 f9ea 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3770      	adds	r7, #112	; 0x70
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40008000 	.word	0x40008000
 8001b2c:	48000800 	.word	0x48000800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	48000400 	.word	0x48000400
 8001b38:	20000eac 	.word	0x20000eac
 8001b3c:	40020008 	.word	0x40020008

08001b40 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001b40:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b42:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b44:	3304      	adds	r3, #4

08001b46 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b46:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b48:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001b4a:	d3f9      	bcc.n	8001b40 <CopyDataInit>
  bx lr
 8001b4c:	4770      	bx	lr

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001b4e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001b50:	3004      	adds	r0, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001b52:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>
  bx lr
 8001b56:	4770      	bx	lr

08001b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b5c:	f7ff fe04 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <LoopForever+0x6>)
 8001b62:	490c      	ldr	r1, [pc, #48]	; (8001b94 <LoopForever+0xa>)
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <LoopForever+0xe>)
 8001b66:	2300      	movs	r3, #0
 8001b68:	f7ff ffed 	bl	8001b46 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <LoopForever+0x12>)
 8001b6e:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <LoopForever+0x16>)
 8001b70:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <LoopForever+0x1a>)
 8001b72:	2300      	movs	r3, #0
 8001b74:	f7ff ffe7 	bl	8001b46 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopForever+0x1e>)
 8001b7a:	490c      	ldr	r1, [pc, #48]	; (8001bac <LoopForever+0x22>)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f7ff ffe8 	bl	8001b52 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b82:	f004 fe2b 	bl	80067dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b86:	f7ff fb97 	bl	80012b8 <main>

08001b8a <LoopForever>:

LoopForever:
  b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   r0, =_estack
 8001b8c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b90:	20000008 	.word	0x20000008
 8001b94:	200000ec 	.word	0x200000ec
 8001b98:	0800783c 	.word	0x0800783c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001b9c:	20030000 	.word	0x20030000
 8001ba0:	20030000 	.word	0x20030000
 8001ba4:	08007920 	.word	0x08007920
  INIT_BSS _sbss, _ebss
 8001ba8:	200000ec 	.word	0x200000ec
 8001bac:	20001074 	.word	0x20001074

08001bb0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_Init+0x3c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_Init+0x3c>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 f96c 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f000 f80f 	bl	8001bf4 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	e001      	b.n	8001be6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be2:	f7ff fc6b 	bl	80014bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be6:	79fb      	ldrb	r3, [r7, #7]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58004000 	.word	0x58004000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_InitTick+0x6c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d024      	beq.n	8001c52 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c08:	f002 f908 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_InitTick+0x6c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c18:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f974 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10f      	bne.n	8001c4c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	d809      	bhi.n	8001c46 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c32:	2200      	movs	r2, #0
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3a:	f000 f940 	bl	8001ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_InitTick+0x70>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e007      	b.n	8001c56 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e004      	b.n	8001c56 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000010 	.word	0x20000010
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000010 	.word	0x20000010
 8001c8c:	20000f0c 	.word	0x20000f0c

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000f0c 	.word	0x20000f0c

08001ca8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTickPrio+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000000c 	.word	0x2000000c

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffe2 	bl	8001c90 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffd2 	bl	8001c90 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000010 	.word	0x20000010

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff40 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff90 	bl	8001dfc <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5f 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff33 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa4 	bl	8001e64 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e08e      	b.n	8002058 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_DMA_Init+0x138>)
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d80f      	bhi.n	8001f66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b45      	ldr	r3, [pc, #276]	; (8002064 <HAL_DMA_Init+0x13c>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a45      	ldr	r2, [pc, #276]	; (8002068 <HAL_DMA_Init+0x140>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	009a      	lsls	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a42      	ldr	r2, [pc, #264]	; (800206c <HAL_DMA_Init+0x144>)
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
 8001f64:	e00e      	b.n	8001f84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_DMA_Init+0x148>)
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <HAL_DMA_Init+0x140>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	009a      	lsls	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a3c      	ldr	r2, [pc, #240]	; (8002074 <HAL_DMA_Init+0x14c>)
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa74 	bl	80024c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe4:	d102      	bne.n	8001fec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002002:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_DMA_Init+0x106>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d80c      	bhi.n	800202e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa93 	bl	8002540 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e008      	b.n	8002040 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020407 	.word	0x40020407
 8002064:	bffdfff8 	.word	0xbffdfff8
 8002068:	cccccccd 	.word	0xcccccccd
 800206c:	40020000 	.word	0x40020000
 8002070:	bffdfbf8 	.word	0xbffdfbf8
 8002074:	40020400 	.word	0x40020400

08002078 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Start_IT+0x20>
 8002094:	2302      	movs	r3, #2
 8002096:	e066      	b.n	8002166 <HAL_DMA_Start_IT+0xee>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d155      	bne.n	8002158 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f9b9 	bl	8002448 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 020e 	orr.w	r2, r2, #14
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00f      	b.n	8002110 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 020a 	orr.w	r2, r2, #10
 800210e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800212c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002144:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e005      	b.n	8002164 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002160:	2302      	movs	r3, #2
 8002162:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04f      	b.n	8002220 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d008      	beq.n	800219e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2204      	movs	r2, #4
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e040      	b.n	8002220 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 020e 	bic.w	r2, r2, #14
 80021ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f003 021c 	and.w	r2, r3, #28
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002202:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800220c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d005      	beq.n	8002250 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2204      	movs	r2, #4
 8002248:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
 800224e:	e047      	b.n	80022e0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 020e 	bic.w	r2, r2, #14
 800225e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800227e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	f003 021c 	and.w	r2, r3, #28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2101      	movs	r1, #1
 800228e:	fa01 f202 	lsl.w	r2, r1, r2
 8002292:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800229c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
    }
  }
  return status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f003 031c 	and.w	r3, r3, #28
 800230a:	2204      	movs	r2, #4
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d026      	beq.n	8002364 <HAL_DMA_IRQHandler+0x7a>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d021      	beq.n	8002364 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f003 021c 	and.w	r2, r3, #28
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2104      	movs	r1, #4
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	2b00      	cmp	r3, #0
 8002358:	d071      	beq.n	800243e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002362:	e06c      	b.n	800243e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f003 031c 	and.w	r3, r3, #28
 800236c:	2202      	movs	r2, #2
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02e      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xec>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d029      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 020a 	bic.w	r2, r2, #10
 800239e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	f003 021c 	and.w	r2, r3, #28
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	2102      	movs	r1, #2
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d038      	beq.n	800243e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023d4:	e033      	b.n	800243e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f003 031c 	and.w	r3, r3, #28
 80023de:	2208      	movs	r2, #8
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d02a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x156>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d025      	beq.n	8002440 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020e 	bic.w	r2, r2, #14
 8002402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f003 021c 	and.w	r2, r3, #28
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800243e:	bf00      	nop
 8002440:	bf00      	nop
}
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800245e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d004      	beq.n	8002472 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002470:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f003 021c 	and.w	r2, r3, #28
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b10      	cmp	r3, #16
 8002494:	d108      	bne.n	80024a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024a6:	e007      	b.n	80024b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d80a      	bhi.n	80024ee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024e4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6493      	str	r3, [r2, #72]	; 0x48
 80024ec:	e007      	b.n	80024fe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	009a      	lsls	r2, r3, #2
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024f8:	4413      	add	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3b08      	subs	r3, #8
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002514:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2201      	movs	r2, #1
 800251e:	409a      	lsls	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40020407 	.word	0x40020407
 8002534:	4002081c 	.word	0x4002081c
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	40020880 	.word	0x40020880

08002540 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002550:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002564:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3b01      	subs	r3, #1
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2201      	movs	r2, #1
 8002570:	409a      	lsls	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	1000823f 	.word	0x1000823f
 8002588:	40020940 	.word	0x40020940

0800258c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_FLASH_Program+0x80>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_FLASH_Program+0x1a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e02d      	b.n	8002602 <HAL_FLASH_Program+0x76>
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_FLASH_Program+0x80>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_FLASH_Program+0x80>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b6:	f000 f869 	bl	800268c <FLASH_WaitForLastOperation>
 80025ba:	4603      	mov	r3, r0
 80025bc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d11a      	bne.n	80025fa <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80025ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f000 f8cc 	bl	800276c <FLASH_Program_DoubleWord>
 80025d4:	e004      	b.n	80025e0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	68b8      	ldr	r0, [r7, #8]
 80025dc:	f004 fec0 	bl	8007360 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e4:	f000 f852 	bl	800268c <FLASH_WaitForLastOperation>
 80025e8:	4603      	mov	r3, r0
 80025ea:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_FLASH_Program+0x84>)
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4906      	ldr	r1, [pc, #24]	; (8002610 <HAL_FLASH_Program+0x84>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_FLASH_Program+0x80>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002600:	7dfb      	ldrb	r3, [r7, #23]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000f10 	.word	0x20000f10
 8002610:	58004000 	.word	0x58004000

08002614 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_FLASH_Unlock+0x38>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da0b      	bge.n	800263e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_FLASH_Unlock+0x38>)
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_FLASH_Unlock+0x3c>)
 800262a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_FLASH_Unlock+0x38>)
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_FLASH_Unlock+0x40>)
 8002630:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_FLASH_Unlock+0x38>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da01      	bge.n	800263e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800263e:	79fb      	ldrb	r3, [r7, #7]
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	58004000 	.word	0x58004000
 8002650:	45670123 	.word	0x45670123
 8002654:	cdef89ab 	.word	0xcdef89ab

08002658 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_FLASH_Lock+0x30>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <HAL_FLASH_Lock+0x30>)
 8002668:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800266c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_FLASH_Lock+0x30>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db01      	blt.n	800267a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800267a:	79fb      	ldrb	r3, [r7, #7]
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	58004000 	.word	0x58004000

0800268c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff fafc 	bl	8001c90 <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800269a:	e009      	b.n	80026b0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800269c:	f7ff faf8 	bl	8001c90 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d801      	bhi.n	80026b0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e054      	b.n	800275a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80026b0:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d0ee      	beq.n	800269c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 80026e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e4:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <FLASH_WaitForLastOperation+0x86>
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800270c:	4915      	ldr	r1, [pc, #84]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	618b      	str	r3, [r1, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <FLASH_WaitForLastOperation+0x9a>
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002724:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <FLASH_WaitForLastOperation+0xdc>)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e011      	b.n	800275a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002736:	f7ff faab 	bl	8001c90 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d801      	bhi.n	800274a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e007      	b.n	800275a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <FLASH_WaitForLastOperation+0xd8>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002756:	d0ee      	beq.n	8002736 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	58004000 	.word	0x58004000
 8002768:	20000f10 	.word	0x20000f10

0800276c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <FLASH_Program_DoubleWord+0x48>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <FLASH_Program_DoubleWord+0x48>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800278a:	f3bf 8f6f 	isb	sy
}
 800278e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	000a      	movs	r2, r1
 800279e:	2300      	movs	r3, #0
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	3104      	adds	r1, #4
 80027a4:	4613      	mov	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	58004000 	.word	0x58004000

080027b8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_FLASHEx_Erase+0x9c>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_FLASHEx_Erase+0x16>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e03d      	b.n	800284a <HAL_FLASHEx_Erase+0x92>
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_FLASHEx_Erase+0x9c>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027d4:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <HAL_FLASHEx_Erase+0x9c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027de:	f7ff ff55 	bl	800268c <FLASH_WaitForLastOperation>
 80027e2:	4603      	mov	r3, r0
 80027e4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d12a      	bne.n	8002842 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d124      	bne.n	800283e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f04f 32ff 	mov.w	r2, #4294967295
 80027fa:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	e012      	b.n	800282a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8002804:	68b8      	ldr	r0, [r7, #8]
 8002806:	f000 f827 	bl	8002858 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800280a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800280e:	f7ff ff3d 	bl	800268c <FLASH_WaitForLastOperation>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	601a      	str	r2, [r3, #0]
          break;
 8002822:	e00a      	b.n	800283a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	3301      	adds	r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4413      	add	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3e4      	bcc.n	8002804 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800283a:	f000 f86f 	bl	800291c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800283e:	f000 f825 	bl	800288c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_FLASHEx_Erase+0x9c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

  return status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000f10 	.word	0x20000f10

08002858 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <FLASH_PageErase+0x30>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4313      	orrs	r3, r2
 800286e:	4a06      	ldr	r2, [pc, #24]	; (8002888 <FLASH_PageErase+0x30>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6153      	str	r3, [r2, #20]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	58004000 	.word	0x58004000

0800288c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <FLASH_FlushCaches+0x8c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289c:	d117      	bne.n	80028ce <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028a8:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c0:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a14      	ldr	r2, [pc, #80]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028cc:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d117      	bne.n	800290c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <FLASH_FlushCaches+0x8c>)
 80028fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <FLASH_FlushCaches+0x8c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <FLASH_FlushCaches+0x8c>)
 8002906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800290a:	6013      	str	r3, [r2, #0]
  }
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	58004000 	.word	0x58004000

0800291c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <FLASH_AcknowledgePageErase+0x20>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <FLASH_AcknowledgePageErase+0x20>)
 8002926:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800292a:	f023 0302 	bic.w	r3, r3, #2
 800292e:	6153      	str	r3, [r2, #20]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	58004000 	.word	0x58004000

08002940 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294e:	e14c      	b.n	8002bea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 813e 	beq.w	8002be4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d005      	beq.n	8002980 <HAL_GPIO_Init+0x40>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d130      	bne.n	80029e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029b6:	2201      	movs	r2, #1
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0201 	and.w	r2, r3, #1
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d017      	beq.n	8002a1e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d123      	bne.n	8002a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	6939      	ldr	r1, [r7, #16]
 8002a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0203 	and.w	r2, r3, #3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8098 	beq.w	8002be4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab4:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ade:	d019      	beq.n	8002b14 <HAL_GPIO_Init+0x1d4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_GPIO_Init+0x2cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_GPIO_Init+0x1d0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_GPIO_Init+0x1cc>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_GPIO_Init+0x2d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <HAL_GPIO_Init+0x1c8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_GPIO_Init+0x1c4>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e008      	b.n	8002b16 <HAL_GPIO_Init+0x1d6>
 8002b04:	2307      	movs	r3, #7
 8002b06:	e006      	b.n	8002b16 <HAL_GPIO_Init+0x1d6>
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e004      	b.n	8002b16 <HAL_GPIO_Init+0x1d6>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e002      	b.n	8002b16 <HAL_GPIO_Init+0x1d6>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_GPIO_Init+0x1d6>
 8002b14:	2300      	movs	r3, #0
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	f002 0203 	and.w	r2, r2, #3
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	4093      	lsls	r3, r2
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b26:	4938      	ldr	r1, [pc, #224]	; (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b34:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b58:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b82:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bae:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_GPIO_Init+0x2dc>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f aeab 	bne.w	8002950 <HAL_GPIO_Init+0x10>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	48000400 	.word	0x48000400
 8002c10:	48000800 	.word	0x48000800
 8002c14:	48000c00 	.word	0x48000c00
 8002c18:	48001000 	.word	0x48001000
 8002c1c:	58000800 	.word	0x58000800

08002c20 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	887b      	ldrh	r3, [r7, #2]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e001      	b.n	8002c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43d9      	mvns	r1, r3
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	58000400 	.word	0x58000400

08002cd4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_PWREx_GetVoltageRange+0x18>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	58000400 	.word	0x58000400

08002cf0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d02:	d101      	bne.n	8002d08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d62:	d101      	bne.n	8002d68 <LL_RCC_HSE_IsReady+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_RCC_HSE_IsReady+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d101      	bne.n	8002dc8 <LL_RCC_HSI_IsReady+0x18>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_RCC_HSI_IsReady+0x1a>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d101      	bne.n	8002e5a <LL_RCC_HSI48_IsReady+0x18>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_RCC_HSI48_IsReady+0x1a>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d101      	bne.n	8002f06 <LL_RCC_LSE_IsReady+0x18>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_RCC_LSE_IsReady+0x1a>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d101      	bne.n	8002f6e <LL_RCC_LSI1_IsReady+0x18>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <LL_RCC_LSI1_IsReady+0x1a>
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d101      	bne.n	8002fd6 <LL_RCC_LSI2_IsReady+0x18>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <LL_RCC_LSI2_IsReady+0x1a>
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6013      	str	r3, [r2, #0]
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d101      	bne.n	8003062 <LL_RCC_MSI_IsReady+0x16>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <LL_RCC_MSI_IsReady+0x18>
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2bb0      	cmp	r3, #176	; 0xb0
 80030ac:	d901      	bls.n	80030b2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80030ae:	23b0      	movs	r3, #176	; 0xb0
 80030b0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80030b2:	687b      	ldr	r3, [r7, #4]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 0203 	bic.w	r2, r3, #3
 80030fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800318e:	f023 020f 	bic.w	r2, r3, #15
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003290:	6013      	str	r3, [r2, #0]
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ae:	d101      	bne.n	80032b4 <LL_RCC_PLL_IsReady+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_RCC_PLL_IsReady+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d101      	bne.n	800333a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335a:	d101      	bne.n	8003360 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d101      	bne.n	8003386 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a4:	d101      	bne.n	80033aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c8:	d101      	bne.n	80033ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b08d      	sub	sp, #52	; 0x34
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e363      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 808d 	beq.w	8003516 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fc:	f7ff fe89 	bl	8003112 <LL_RCC_GetSysClkSource>
 8003400:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003402:	f7ff ff82 	bl	800330a <LL_RCC_PLL_GetMainSource>
 8003406:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_RCC_OscConfig+0x3e>
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d147      	bne.n	80034a4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	2b01      	cmp	r3, #1
 8003418:	d144      	bne.n	80034a4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e347      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800342a:	f7ff fe34 	bl	8003096 <LL_RCC_MSI_GetRange>
 800342e:	4603      	mov	r3, r0
 8003430:	429c      	cmp	r4, r3
 8003432:	d914      	bls.n	800345e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fd2f 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e336      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fe0e 	bl	800306e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fe32 	bl	80030c0 <LL_RCC_MSI_SetCalibTrimming>
 800345c:	e013      	b.n	8003486 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fe03 	bl	800306e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fe27 	bl	80030c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fd10 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e317      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003486:	f000 fcc9 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 800348a:	4603      	mov	r3, r0
 800348c:	4aa4      	ldr	r2, [pc, #656]	; (8003720 <HAL_RCC_OscConfig+0x344>)
 800348e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003490:	4ba4      	ldr	r3, [pc, #656]	; (8003724 <HAL_RCC_OscConfig+0x348>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fbad 	bl	8001bf4 <HAL_InitTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d039      	beq.n	8003514 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e308      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01e      	beq.n	80034ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ac:	f7ff fdb0 	bl	8003010 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fbee 	bl	8001c90 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b8:	f7fe fbea 	bl	8001c90 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e2f5      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80034ca:	f7ff fdbf 	bl	800304c <LL_RCC_MSI_IsReady>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f1      	beq.n	80034b8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fdc8 	bl	800306e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fdec 	bl	80030c0 <LL_RCC_MSI_SetCalibTrimming>
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ea:	f7ff fda0 	bl	800302e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fbcf 	bl	8001c90 <HAL_GetTick>
 80034f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f6:	f7fe fbcb 	bl	8001c90 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e2d6      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003508:	f7ff fda0 	bl	800304c <LL_RCC_MSI_IsReady>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f1      	bne.n	80034f6 <HAL_RCC_OscConfig+0x11a>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003514:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d047      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	f7ff fdf6 	bl	8003112 <LL_RCC_GetSysClkSource>
 8003526:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003528:	f7ff feef 	bl	800330a <LL_RCC_PLL_GetMainSource>
 800352c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x164>
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d105      	bne.n	800354c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d134      	bne.n	80035b2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e2b4      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d102      	bne.n	800355c <HAL_RCC_OscConfig+0x180>
 8003556:	f7ff fbdd 	bl	8002d14 <LL_RCC_HSE_Enable>
 800355a:	e001      	b.n	8003560 <HAL_RCC_OscConfig+0x184>
 800355c:	f7ff fbe9 	bl	8002d32 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe fb92 	bl	8001c90 <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe fb8e 	bl	8001c90 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e299      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003582:	f7ff fbe5 	bl	8002d50 <LL_RCC_HSE_IsReady>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f1      	beq.n	8003570 <HAL_RCC_OscConfig+0x194>
 800358c:	e011      	b.n	80035b2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fe fb7f 	bl	8001c90 <HAL_GetTick>
 8003592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003596:	f7fe fb7b 	bl	8001c90 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b64      	cmp	r3, #100	; 0x64
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e286      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80035a8:	f7ff fbd2 	bl	8002d50 <LL_RCC_HSE_IsReady>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f1      	bne.n	8003596 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04c      	beq.n	8003658 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035be:	f7ff fda8 	bl	8003112 <LL_RCC_GetSysClkSource>
 80035c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c4:	f7ff fea1 	bl	800330a <LL_RCC_PLL_GetMainSource>
 80035c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x200>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d10e      	bne.n	80035f4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e266      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fbf1 	bl	8002dd4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035f2:	e031      	b.n	8003658 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d019      	beq.n	8003630 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	f7ff fbba 	bl	8002d74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fb46 	bl	8001c90 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe fb42 	bl	8001c90 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e24d      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800361a:	f7ff fbc9 	bl	8002db0 <LL_RCC_HSI_IsReady>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f1      	beq.n	8003608 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fbd3 	bl	8002dd4 <LL_RCC_HSI_SetCalibTrimming>
 800362e:	e013      	b.n	8003658 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003630:	f7ff fbaf 	bl	8002d92 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe fb2c 	bl	8001c90 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363c:	f7fe fb28 	bl	8001c90 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e233      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800364e:	f7ff fbaf 	bl	8002db0 <LL_RCC_HSI_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f1      	bne.n	800363c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a3 	beq.w	80037b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d076      	beq.n	8003768 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d046      	beq.n	8003714 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003686:	f7ff fc66 	bl	8002f56 <LL_RCC_LSI1_IsReady>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d113      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003690:	f7ff fc3f 	bl	8002f12 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003694:	f7fe fafc 	bl	8001c90 <HAL_GetTick>
 8003698:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800369c:	f7fe faf8 	bl	8001c90 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e203      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80036ae:	f7ff fc52 	bl	8002f56 <LL_RCC_LSI1_IsReady>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f1      	beq.n	800369c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80036b8:	f7ff fc5f 	bl	8002f7a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fae8 	bl	8001c90 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036c4:	f7fe fae4 	bl	8001c90 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1ef      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80036d6:	f7ff fc72 	bl	8002fbe <LL_RCC_LSI2_IsReady>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fc7c 	bl	8002fe2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80036ea:	f7ff fc23 	bl	8002f34 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fe facf 	bl	8001c90 <HAL_GetTick>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036f6:	f7fe facb 	bl	8001c90 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1d6      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003708:	f7ff fc25 	bl	8002f56 <LL_RCC_LSI1_IsReady>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f1      	bne.n	80036f6 <HAL_RCC_OscConfig+0x31a>
 8003712:	e051      	b.n	80037b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003714:	f7ff fbfd 	bl	8002f12 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe faba 	bl	8001c90 <HAL_GetTick>
 800371c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800371e:	e00c      	b.n	800373a <HAL_RCC_OscConfig+0x35e>
 8003720:	20000008 	.word	0x20000008
 8003724:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003728:	f7fe fab2 	bl	8001c90 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1bd      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800373a:	f7ff fc0c 	bl	8002f56 <LL_RCC_LSI1_IsReady>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f1      	beq.n	8003728 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003744:	f7ff fc2a 	bl	8002f9c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800374a:	f7fe faa1 	bl	8001c90 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1ac      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800375c:	f7ff fc2f 	bl	8002fbe <LL_RCC_LSI2_IsReady>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f1      	bne.n	800374a <HAL_RCC_OscConfig+0x36e>
 8003766:	e027      	b.n	80037b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003768:	f7ff fc18 	bl	8002f9c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe fa90 	bl	8001c90 <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003774:	f7fe fa8c 	bl	8001c90 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e197      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003786:	f7ff fc1a 	bl	8002fbe <LL_RCC_LSI2_IsReady>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f1      	bne.n	8003774 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003790:	f7ff fbd0 	bl	8002f34 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe fa7c 	bl	8001c90 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800379c:	f7fe fa78 	bl	8001c90 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e183      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80037ae:	f7ff fbd2 	bl	8002f56 <LL_RCC_LSI1_IsReady>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f1      	bne.n	800379c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05b      	beq.n	800387c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c4:	4ba7      	ldr	r3, [pc, #668]	; (8003a64 <HAL_RCC_OscConfig+0x688>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d114      	bne.n	80037fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037d0:	f7ff fa70 	bl	8002cb4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d4:	f7fe fa5c 	bl	8001c90 <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037dc:	f7fe fa58 	bl	8001c90 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e163      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ee:	4b9d      	ldr	r3, [pc, #628]	; (8003a64 <HAL_RCC_OscConfig+0x688>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d102      	bne.n	8003808 <HAL_RCC_OscConfig+0x42c>
 8003802:	f7ff fb30 	bl	8002e66 <LL_RCC_LSE_Enable>
 8003806:	e00c      	b.n	8003822 <HAL_RCC_OscConfig+0x446>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d104      	bne.n	800381a <HAL_RCC_OscConfig+0x43e>
 8003810:	f7ff fb4b 	bl	8002eaa <LL_RCC_LSE_EnableBypass>
 8003814:	f7ff fb27 	bl	8002e66 <LL_RCC_LSE_Enable>
 8003818:	e003      	b.n	8003822 <HAL_RCC_OscConfig+0x446>
 800381a:	f7ff fb35 	bl	8002e88 <LL_RCC_LSE_Disable>
 800381e:	f7ff fb55 	bl	8002ecc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d014      	beq.n	8003854 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe fa31 	bl	8001c90 <HAL_GetTick>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe fa2d 	bl	8001c90 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e136      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003848:	f7ff fb51 	bl	8002eee <LL_RCC_LSE_IsReady>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ef      	beq.n	8003832 <HAL_RCC_OscConfig+0x456>
 8003852:	e013      	b.n	800387c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe fa1c 	bl	8001c90 <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fe fa18 	bl	8001c90 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e121      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003872:	f7ff fb3c 	bl	8002eee <LL_RCC_LSE_IsReady>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ef      	bne.n	800385c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d014      	beq.n	80038ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003890:	f7ff fab5 	bl	8002dfe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fe f9fc 	bl	8001c90 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389c:	f7fe f9f8 	bl	8001c90 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e103      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80038ae:	f7ff fac8 	bl	8002e42 <LL_RCC_HSI48_IsReady>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f1      	beq.n	800389c <HAL_RCC_OscConfig+0x4c0>
 80038b8:	e013      	b.n	80038e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ba:	f7ff fab1 	bl	8002e20 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe f9e7 	bl	8001c90 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038c6:	f7fe f9e3 	bl	8001c90 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0ee      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80038d8:	f7ff fab3 	bl	8002e42 <LL_RCC_HSI48_IsReady>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f1      	bne.n	80038c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80e4 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ec:	f7ff fc11 	bl	8003112 <LL_RCC_GetSysClkSource>
 80038f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80038f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	2b02      	cmp	r3, #2
 8003900:	f040 80b4 	bne.w	8003a6c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0203 	and.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	429a      	cmp	r2, r3
 8003910:	d123      	bne.n	800395a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d11c      	bne.n	800395a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d114      	bne.n	800395a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d10d      	bne.n	800395a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d05d      	beq.n	8003a16 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d058      	beq.n	8003a12 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0a1      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003972:	f7ff fc84 	bl	800327e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003976:	f7fe f98b 	bl	8001c90 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397e:	f7fe f987 	bl	8001c90 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e092      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ef      	bne.n	800397e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <HAL_RCC_OscConfig+0x68c>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b6:	0212      	lsls	r2, r2, #8
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039ca:	430a      	orrs	r2, r1
 80039cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039d4:	f7ff fc44 	bl	8003260 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039e8:	f7fe f952 	bl	8001c90 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe f94e 	bl	8001c90 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e059      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ef      	beq.n	80039f0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a10:	e050      	b.n	8003ab4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e04f      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d147      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a24:	f7ff fc1c 	bl	8003260 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a38:	f7fe f92a 	bl	8001c90 <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fe f926 	bl	8001c90 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e031      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <HAL_RCC_OscConfig+0x664>
 8003a60:	e028      	b.n	8003ab4 <HAL_RCC_OscConfig+0x6d8>
 8003a62:	bf00      	nop
 8003a64:	58000400 	.word	0x58000400
 8003a68:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d01e      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	f7ff fc04 	bl	800327e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe f90b 	bl	8001c90 <HAL_GetTick>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe f907 	bl	8001c90 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e012      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ef      	bne.n	8003a7e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_OscConfig+0x6e4>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]
 8003aae:	e001      	b.n	8003ab4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3734      	adds	r7, #52	; 0x34
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	eefefffc 	.word	0xeefefffc

08003ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e12d      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b98      	ldr	r3, [pc, #608]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d91b      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b95      	ldr	r3, [pc, #596]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4993      	ldr	r1, [pc, #588]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af6:	f7fe f8cb 	bl	8001c90 <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003afe:	f7fe f8c7 	bl	8001c90 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e111      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b10:	4b8a      	ldr	r3, [pc, #552]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d1ef      	bne.n	8003afe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fafb 	bl	800312a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b34:	f7fe f8ac 	bl	8001c90 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b3c:	f7fe f8a8 	bl	8001c90 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0f2      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b4e:	f7ff fbe8 	bl	8003322 <LL_RCC_IsActiveFlag_HPRE>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f1      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d016      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff faf2 	bl	8003152 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b6e:	f7fe f88f 	bl	8001c90 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b76:	f7fe f88b 	bl	8001c90 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0d5      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b88:	f7ff fbdd 	bl	8003346 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f1      	beq.n	8003b76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff faeb 	bl	800317e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe f872 	bl	8001c90 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bb0:	f7fe f86e 	bl	8001c90 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0b8      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bc2:	f7ff fbd3 	bl	800336c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f1      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d016      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fae5 	bl	80031ac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003be2:	f7fe f855 	bl	8001c90 <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bea:	f7fe f851 	bl	8001c90 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e09b      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bfc:	f7ff fbc9 	bl	8003392 <LL_RCC_IsActiveFlag_PPRE1>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f1      	beq.n	8003bea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d017      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fadb 	bl	80031d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c1e:	f7fe f837 	bl	8001c90 <HAL_GetTick>
 8003c22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c26:	f7fe f833 	bl	8001c90 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e07d      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c38:	f7ff fbbd 	bl	80033b6 <LL_RCC_IsActiveFlag_PPRE2>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f1      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d043      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d106      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c56:	f7ff f87b 	bl	8002d50 <LL_RCC_HSE_IsReady>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11e      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e067      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c6c:	f7ff fb16 	bl	800329c <LL_RCC_PLL_IsReady>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d113      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e05c      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c82:	f7ff f9e3 	bl	800304c <LL_RCC_MSI_IsReady>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d108      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e051      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c90:	f7ff f88e 	bl	8002db0 <LL_RCC_HSI_IsReady>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e04a      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fa21 	bl	80030ea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fff2 	bl	8001c90 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fd ffee 	bl	8001c90 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e036      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	f7ff fa24 	bl	8003112 <LL_RCC_GetSysClkSource>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d1ec      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d21b      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 0207 	bic.w	r2, r3, #7
 8003cec:	4913      	ldr	r1, [pc, #76]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf4:	f7fd ffcc 	bl	8001c90 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cfc:	f7fd ffc8 	bl	8001c90 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e012      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1ef      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d1c:	f000 f87e 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_ClockConfig+0x27c>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003d26:	f7fd ffbf 	bl	8001ca8 <HAL_GetTickPrio>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd ff61 	bl	8001bf4 <HAL_InitTick>
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58004000 	.word	0x58004000
 8003d40:	20000008 	.word	0x20000008

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	f7ff f9e2 	bl	8003112 <LL_RCC_GetSysClkSource>
 8003d4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d56:	f7ff f99e 	bl	8003096 <LL_RCC_MSI_GetRange>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e04b      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d102      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e045      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d10a      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d7e:	f7fe ffb7 	bl	8002cf0 <LL_RCC_HSE_IsEnabledDiv2>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e03a      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e037      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d94:	f7ff fab9 	bl	800330a <LL_RCC_PLL_GetMainSource>
 8003d98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x64>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x6a>
 8003da6:	e00d      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003daa:	60bb      	str	r3, [r7, #8]
        break;
 8003dac:	e015      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dae:	f7fe ff9f 	bl	8002cf0 <LL_RCC_HSE_IsEnabledDiv2>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003dbc:	e00d      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dc0:	60bb      	str	r3, [r7, #8]
        break;
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003dc4:	f7ff f967 	bl	8003096 <LL_RCC_MSI_GetRange>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	60bb      	str	r3, [r7, #8]
        break;
 8003dd8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003dda:	f7ff fa71 	bl	80032c0 <LL_RCC_PLL_GetN>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	fb03 f402 	mul.w	r4, r3, r2
 8003de6:	f7ff fa84 	bl	80032f2 <LL_RCC_PLL_GetDivider>
 8003dea:	4603      	mov	r3, r0
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	3301      	adds	r3, #1
 8003df0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003df4:	f7ff fa71 	bl	80032da <LL_RCC_PLL_GetR>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	0f5b      	lsrs	r3, r3, #29
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	08007690 	.word	0x08007690
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	01e84800 	.word	0x01e84800

08003e1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b598      	push	{r3, r4, r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e20:	f7ff ff90 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003e24:	4604      	mov	r4, r0
 8003e26:	f7ff f9e9 	bl	80031fc <LL_RCC_GetAHBPrescaler>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd98      	pop	{r3, r4, r7, pc}
 8003e40:	08007630 	.word	0x08007630

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b598      	push	{r3, r4, r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e48:	f7ff ffe8 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	f7ff f9ef 	bl	8003230 <LL_RCC_GetAPB1Prescaler>
 8003e52:	4603      	mov	r3, r0
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd98      	pop	{r3, r4, r7, pc}
 8003e6c:	08007670 	.word	0x08007670

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b598      	push	{r3, r4, r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e74:	f7ff ffd2 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	f7ff f9e5 	bl	8003248 <LL_RCC_GetAPB2Prescaler>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	0adb      	lsrs	r3, r3, #11
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd98      	pop	{r3, r4, r7, pc}
 8003e98:	08007670 	.word	0x08007670

08003e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2bb0      	cmp	r3, #176	; 0xb0
 8003ea8:	d903      	bls.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e007      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003ec2:	f7ff f9a7 	bl	8003214 <LL_RCC_GetAHB4Prescaler>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9c      	lsrs	r4, r3, #18
 8003ee6:	f7fe fef5 	bl	8002cd4 <HAL_PWREx_GetVoltageRange>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4619      	mov	r1, r3
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 f80c 	bl	8003f0c <RCC_SetFlashLatency>
 8003ef4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08007690 	.word	0x08007690
 8003f04:	08007630 	.word	0x08007630
 8003f08:	431bde83 	.word	0x431bde83

08003f0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b093      	sub	sp, #76	; 0x4c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <RCC_SetFlashLatency+0xe8>)
 8003f18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003f1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003f22:	4a35      	ldr	r2, [pc, #212]	; (8003ff8 <RCC_SetFlashLatency+0xec>)
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003f2e:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <RCC_SetFlashLatency+0xf0>)
 8003f30:	f107 040c 	add.w	r4, r7, #12
 8003f34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d11a      	bne.n	8003f7c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	e013      	b.n	8003f74 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3348      	adds	r3, #72	; 0x48
 8003f52:	443b      	add	r3, r7
 8003f54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d807      	bhi.n	8003f6e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	3348      	adds	r3, #72	; 0x48
 8003f64:	443b      	add	r3, r7
 8003f66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003f6c:	e020      	b.n	8003fb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f70:	3301      	adds	r3, #1
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d9e8      	bls.n	8003f4c <RCC_SetFlashLatency+0x40>
 8003f7a:	e019      	b.n	8003fb0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f80:	e013      	b.n	8003faa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	3348      	adds	r3, #72	; 0x48
 8003f88:	443b      	add	r3, r7
 8003f8a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d807      	bhi.n	8003fa4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	3348      	adds	r3, #72	; 0x48
 8003f9a:	443b      	add	r3, r7
 8003f9c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003fa2:	e005      	b.n	8003fb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d9e8      	bls.n	8003f82 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <RCC_SetFlashLatency+0xf4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 0207 	bic.w	r2, r3, #7
 8003fb8:	4911      	ldr	r1, [pc, #68]	; (8004000 <RCC_SetFlashLatency+0xf4>)
 8003fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fc0:	f7fd fe66 	bl	8001c90 <HAL_GetTick>
 8003fc4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fc6:	e008      	b.n	8003fda <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fc8:	f7fd fe62 	bl	8001c90 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e007      	b.n	8003fea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <RCC_SetFlashLatency+0xf4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1ef      	bne.n	8003fc8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	374c      	adds	r7, #76	; 0x4c
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08007604 	.word	0x08007604
 8003ff8:	08007614 	.word	0x08007614
 8003ffc:	08007620 	.word	0x08007620
 8004000:	58004000 	.word	0x58004000

08004004 <LL_RCC_LSE_IsEnabled>:
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <LL_RCC_LSE_IsEnabled+0x18>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <LL_RCC_LSE_IsEnabled+0x1a>
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_LSE_IsReady>:
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d101      	bne.n	8004040 <LL_RCC_LSE_IsReady+0x18>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <LL_RCC_LSE_IsReady+0x1a>
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_RCC_SetRFWKPClockSource>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_RCC_SetSMPSClockSource>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4313      	orrs	r3, r2
 8004092:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_SetSMPSPrescaler>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_SetUSARTClockSource>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f023 0203 	bic.w	r2, r3, #3
 80040dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_SetLPUARTClockSource>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_RCC_SetI2CClockSource>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_SetLPTIMClockSource>:
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	43db      	mvns	r3, r3
 8004172:	401a      	ands	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_RCC_SetSAIClockSource>:
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_SetRNGClockSource>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_RCC_SetCLK48ClockSource>:
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_RCC_SetUSBClockSource>:
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ffe3 	bl	80041e6 <LL_RCC_SetCLK48ClockSource>
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <LL_RCC_SetADCClockSource>:
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800423c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_RCC_SetRTCClockSource>:
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_RCC_GetRTCClockSource>:
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_RCC_ForceBackupDomainReset>:
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_RCC_ReleaseBackupDomainReset>:
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_RCC_PLLSAI1_Enable>:
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042f0:	6013      	str	r3, [r2, #0]
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_RCC_PLLSAI1_Disable>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800430e:	6013      	str	r3, [r2, #0]
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_PLLSAI1_IsReady>:
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432c:	d101      	bne.n	8004332 <LL_RCC_PLLSAI1_IsReady+0x18>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b088      	sub	sp, #32
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800434a:	2300      	movs	r3, #0
 800434c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d034      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004362:	d021      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004368:	d81b      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800436a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800436e:	d01d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004374:	d815      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437e:	d110      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004390:	e00d      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f947 	bl	800462a <RCCEx_PLLSAI1_ConfigNP>
 800439c:	4603      	mov	r3, r0
 800439e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043a0:	e005      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77fb      	strb	r3, [r7, #31]
        break;
 80043a6:	e002      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80043ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ae:	7ffb      	ldrb	r3, [r7, #31]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fee8 	bl	800418e <LL_RCC_SetSAIClockSource>
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d046      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80043d0:	f7ff ff56 	bl	8004280 <LL_RCC_GetRTCClockSource>
 80043d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d03c      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80043e0:	f7fe fc68 	bl	8002cb4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff ff30 	bl	8004254 <LL_RCC_SetRTCClockSource>
 80043f4:	e02e      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004400:	f7ff ff4b 	bl	800429a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004404:	f7ff ff5a 	bl	80042bc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004420:	f7ff fdf0 	bl	8004004 <LL_RCC_LSE_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d114      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800442a:	f7fd fc31 	bl	8001c90 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004430:	e00b      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd fc2d 	bl	8001c90 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d902      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	77fb      	strb	r3, [r7, #31]
              break;
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800444a:	f7ff fded 	bl	8004028 <LL_RCC_LSE_IsReady>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d1ee      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	77bb      	strb	r3, [r7, #30]
 8004458:	e001      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fe2a 	bl	80040c8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fe35 	bl	80040f4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fe5d 	bl	800415a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fe52 	bl	800415a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fe2a 	bl	8004120 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fe1f 	bl	8004120 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d022      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fe8d 	bl	8004212 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004500:	d107      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004510:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f8dd 	bl	80046e0 <RCCEx_PLLSAI1_ConfigNQ>
 8004526:	4603      	mov	r3, r0
 8004528:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02b      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004548:	d008      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fe2a 	bl	80041ba <LL_RCC_SetRNGClockSource>
 8004566:	e00a      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	2000      	movs	r0, #0
 8004574:	f7ff fe21 	bl	80041ba <LL_RCC_SetRNGClockSource>
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff fe34 	bl	80041e6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004586:	d107      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004596:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d022      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fe3d 	bl	8004228 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b6:	d107      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d0:	d10b      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f8dd 	bl	8004796 <RCCEx_PLLSAI1_ConfigNR>
 80045dc:	4603      	mov	r3, r0
 80045de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fd26 	bl	800404c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fd45 	bl	80040a0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fd2c 	bl	8004078 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004620:	7fbb      	ldrb	r3, [r7, #30]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004636:	f7ff fe61 	bl	80042fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800463a:	f7fd fb29 	bl	8001c90 <HAL_GetTick>
 800463e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004640:	e009      	b.n	8004656 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004642:	f7fd fb25 	bl	8001c90 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d902      	bls.n	8004656 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e004      	b.n	8004660 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004656:	f7ff fe60 	bl	800431a <LL_RCC_PLLSAI1_IsReady>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d137      	bne.n	80046d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800467a:	4313      	orrs	r3, r2
 800467c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004690:	4313      	orrs	r3, r2
 8004692:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004694:	f7ff fe23 	bl	80042de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd fafa 	bl	8001c90 <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800469e:	e009      	b.n	80046b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a0:	f7fd faf6 	bl	8001c90 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d902      	bls.n	80046b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	73fb      	strb	r3, [r7, #15]
        break;
 80046b2:	e004      	b.n	80046be <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046b4:	f7ff fe31 	bl	800431a <LL_RCC_PLLSAI1_IsReady>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d1f0      	bne.n	80046a0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d108      	bne.n	80046d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046d2:	4313      	orrs	r3, r2
 80046d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046ec:	f7ff fe06 	bl	80042fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046f0:	f7fd face 	bl	8001c90 <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046f6:	e009      	b.n	800470c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f8:	f7fd faca 	bl	8001c90 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	73fb      	strb	r3, [r7, #15]
      break;
 800470a:	e004      	b.n	8004716 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800470c:	f7ff fe05 	bl	800431a <LL_RCC_PLLSAI1_IsReady>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d137      	bne.n	800478c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004730:	4313      	orrs	r3, r2
 8004732:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800474a:	f7ff fdc8 	bl	80042de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474e:	f7fd fa9f 	bl	8001c90 <HAL_GetTick>
 8004752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004754:	e009      	b.n	800476a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004756:	f7fd fa9b 	bl	8001c90 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d902      	bls.n	800476a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	73fb      	strb	r3, [r7, #15]
        break;
 8004768:	e004      	b.n	8004774 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800476a:	f7ff fdd6 	bl	800431a <LL_RCC_PLLSAI1_IsReady>
 800476e:	4603      	mov	r3, r0
 8004770:	2b01      	cmp	r3, #1
 8004772:	d1f0      	bne.n	8004756 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004788:	4313      	orrs	r3, r2
 800478a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80047a2:	f7ff fdab 	bl	80042fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047a6:	f7fd fa73 	bl	8001c90 <HAL_GetTick>
 80047aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047ac:	e009      	b.n	80047c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ae:	f7fd fa6f 	bl	8001c90 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d902      	bls.n	80047c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	73fb      	strb	r3, [r7, #15]
      break;
 80047c0:	e004      	b.n	80047cc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047c2:	f7ff fdaa 	bl	800431a <LL_RCC_PLLSAI1_IsReady>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d137      	bne.n	8004842 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80047d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047fc:	4313      	orrs	r3, r2
 80047fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004800:	f7ff fd6d 	bl	80042de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fd fa44 	bl	8001c90 <HAL_GetTick>
 8004808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800480a:	e009      	b.n	8004820 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800480c:	f7fd fa40 	bl	8001c90 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d902      	bls.n	8004820 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	73fb      	strb	r3, [r7, #15]
        break;
 800481e:	e004      	b.n	800482a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004820:	f7ff fd7b 	bl	800431a <LL_RCC_PLLSAI1_IsReady>
 8004824:	4603      	mov	r3, r0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d1f0      	bne.n	800480c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800483e:	4313      	orrs	r3, r2
 8004840:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <LL_RCC_GetUSARTClockSource>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004858:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4013      	ands	r3, r2
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_RCC_GetLPUARTClockSource>:
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4013      	ands	r3, r2
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e042      	b.n	8004924 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fd f893 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2224      	movs	r2, #36	; 0x24
 80048ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 ff36 	bl	8005748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fd0b 	bl	80052f8 <UART_SetConfig>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e01b      	b.n	8004924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800490a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 ffb5 	bl	800588c <UART_CheckIdleState>
 8004922:	4603      	mov	r3, r0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	2b20      	cmp	r3, #32
 8004944:	d17b      	bne.n	8004a3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_Transmit+0x26>
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e074      	b.n	8004a40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2221      	movs	r2, #33	; 0x21
 8004962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fd f993 	bl	8001c90 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d108      	bne.n	8004998 <HAL_UART_Transmit+0x6c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e003      	b.n	80049a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049a0:	e030      	b.n	8004a04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f001 f817 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e03d      	b.n	8004a40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	3302      	adds	r3, #2
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e007      	b.n	80049f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	3301      	adds	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1c8      	bne.n	80049a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 ffe0 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e006      	b.n	8004a40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	f040 80b5 	bne.w	8004bce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_UART_Receive+0x28>
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0ad      	b.n	8004bd0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2222      	movs	r2, #34	; 0x22
 8004a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8a:	f7fd f901 	bl	8001c90 <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_UART_Receive+0x80>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <HAL_UART_Receive+0x76>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004abc:	e02d      	b.n	8004b1a <HAL_UART_Receive+0xd2>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ac6:	e028      	b.n	8004b1a <HAL_UART_Receive+0xd2>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <HAL_UART_Receive+0xa4>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <HAL_UART_Receive+0x9a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	22ff      	movs	r2, #255	; 0xff
 8004adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ae0:	e01b      	b.n	8004b1a <HAL_UART_Receive+0xd2>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	227f      	movs	r2, #127	; 0x7f
 8004ae6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004aea:	e016      	b.n	8004b1a <HAL_UART_Receive+0xd2>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af4:	d10d      	bne.n	8004b12 <HAL_UART_Receive+0xca>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <HAL_UART_Receive+0xc0>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	227f      	movs	r2, #127	; 0x7f
 8004b02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b06:	e008      	b.n	8004b1a <HAL_UART_Receive+0xd2>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	223f      	movs	r2, #63	; 0x3f
 8004b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b10:	e003      	b.n	8004b1a <HAL_UART_Receive+0xd2>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2a:	d108      	bne.n	8004b3e <HAL_UART_Receive+0xf6>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e003      	b.n	8004b46 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b46:	e036      	b.n	8004bb6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2120      	movs	r1, #32
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 ff44 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e032      	b.n	8004bd0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10c      	bne.n	8004b8a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	8a7b      	ldrh	r3, [r7, #18]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	3302      	adds	r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e00c      	b.n	8004ba4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	8a7b      	ldrh	r3, [r7, #18]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	4013      	ands	r3, r2
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1c2      	bne.n	8004b48 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d137      	bne.n	8004c60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Receive_DMA+0x24>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e030      	b.n	8004c62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_UART_Receive_DMA+0x94>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d01f      	beq.n	8004c50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 ff30 	bl	8005abc <UART_Start_Receive_DMA>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	e000      	b.n	8004c62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40008000 	.word	0x40008000

08004c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b0ba      	sub	sp, #232	; 0xe8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11b      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 82e3 	beq.w	80052a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
      }
      return;
 8004ce2:	e2dd      	b.n	80052a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8123 	beq.w	8004f34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004cf2:	4b8d      	ldr	r3, [pc, #564]	; (8004f28 <HAL_UART_IRQHandler+0x2b8>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004cfe:	4b8b      	ldr	r3, [pc, #556]	; (8004f2c <HAL_UART_IRQHandler+0x2bc>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8116 	beq.w	8004f34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d011      	beq.n	8004d38 <HAL_UART_IRQHandler+0xc8>
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d011      	beq.n	8004d68 <HAL_UART_IRQHandler+0xf8>
 8004d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_UART_IRQHandler+0x128>
 8004d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2204      	movs	r2, #4
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f043 0202 	orr.w	r2, r3, #2
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d017      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004db0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004db4:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_UART_IRQHandler+0x2b8>)
 8004db6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00b      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f043 0208 	orr.w	r2, r3, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d012      	beq.n	8004e06 <HAL_UART_IRQHandler+0x196>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8249 	beq.w	80052a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d013      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d054      	beq.n	8004f14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 ff0d 	bl	8005c8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d146      	bne.n	8004f0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1d9      	bne.n	8004e7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d017      	beq.n	8004f04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_UART_IRQHandler+0x2c0>)
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd f9a1 	bl	800222c <HAL_DMA_Abort_IT>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d019      	beq.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004efe:	4610      	mov	r0, r2
 8004f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f02:	e00f      	b.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9e1 	bl	80052cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0a:	e00b      	b.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f9dd 	bl	80052cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f12:	e007      	b.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f9d9 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004f22:	e1bf      	b.n	80052a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	bf00      	nop
    return;
 8004f26:	e1bd      	b.n	80052a4 <HAL_UART_IRQHandler+0x634>
 8004f28:	10000001 	.word	0x10000001
 8004f2c:	04000120 	.word	0x04000120
 8004f30:	08005f41 	.word	0x08005f41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	f040 8153 	bne.w	80051e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 814c 	beq.w	80051e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8145 	beq.w	80051e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	f040 80bb 	bne.w	80050e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 818f 	beq.w	80052a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f94:	429a      	cmp	r2, r3
 8004f96:	f080 8187 	bcs.w	80052a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 8087 	bne.w	80050c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fe6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1da      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800502a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800502e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e1      	bne.n	8005002 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3308      	adds	r3, #8
 8005044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800504e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e3      	bne.n	800503e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005094:	f023 0310 	bic.w	r3, r3, #16
 8005098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80050a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e4      	bne.n	8005084 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fd f854 	bl	800216e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8fd 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050e6:	e0df      	b.n	80052a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80d1 	beq.w	80052ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800510a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80cc 	beq.w	80052ac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
 8005138:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800513c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e4      	bne.n	8005114 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3308      	adds	r3, #8
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	623b      	str	r3, [r7, #32]
   return(result);
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3308      	adds	r3, #8
 800516e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005172:	633a      	str	r2, [r7, #48]	; 0x30
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e1      	bne.n	800514a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0310 	bic.w	r3, r3, #16
 80051ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69b9      	ldr	r1, [r7, #24]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f87f 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051e2:	e063      	b.n	80052ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_UART_IRQHandler+0x59e>
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005204:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fedb 	bl	8005fc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800520c:	e051      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d014      	beq.n	8005244 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800521a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800522a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005236:	2b00      	cmp	r3, #0
 8005238:	d03a      	beq.n	80052b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
    }
    return;
 8005242:	e035      	b.n	80052b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d009      	beq.n	8005264 <HAL_UART_IRQHandler+0x5f4>
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fe85 	bl	8005f6c <UART_EndTransmit_IT>
    return;
 8005262:	e026      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_UART_IRQHandler+0x614>
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 feb4 	bl	8005fea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005282:	e016      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <HAL_UART_IRQHandler+0x642>
 8005290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005294:	2b00      	cmp	r3, #0
 8005296:	da0c      	bge.n	80052b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fe9c 	bl	8005fd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800529e:	e008      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
      return;
 80052a0:	bf00      	nop
 80052a2:	e006      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
    return;
 80052a4:	bf00      	nop
 80052a6:	e004      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
      return;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
      return;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_UART_IRQHandler+0x642>
    return;
 80052b0:	bf00      	nop
  }
}
 80052b2:	37e8      	adds	r7, #232	; 0xe8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b08c      	sub	sp, #48	; 0x30
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4313      	orrs	r3, r2
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4baf      	ldr	r3, [pc, #700]	; (80055e4 <UART_SetConfig+0x2ec>)
 8005328:	4013      	ands	r3, r2
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005330:	430b      	orrs	r3, r1
 8005332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4aa4      	ldr	r2, [pc, #656]	; (80055e8 <UART_SetConfig+0x2f0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005360:	4313      	orrs	r3, r2
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800536e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005378:	430b      	orrs	r3, r1
 800537a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f023 010f 	bic.w	r1, r3, #15
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a95      	ldr	r2, [pc, #596]	; (80055ec <UART_SetConfig+0x2f4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d125      	bne.n	80053e8 <UART_SetConfig+0xf0>
 800539c:	2003      	movs	r0, #3
 800539e:	f7ff fa55 	bl	800484c <LL_RCC_GetUSARTClockSource>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d81b      	bhi.n	80053e0 <UART_SetConfig+0xe8>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0xb8>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c6:	e042      	b.n	800544e <UART_SetConfig+0x156>
 80053c8:	2302      	movs	r3, #2
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ce:	e03e      	b.n	800544e <UART_SetConfig+0x156>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d6:	e03a      	b.n	800544e <UART_SetConfig+0x156>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053de:	e036      	b.n	800544e <UART_SetConfig+0x156>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e6:	e032      	b.n	800544e <UART_SetConfig+0x156>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a7e      	ldr	r2, [pc, #504]	; (80055e8 <UART_SetConfig+0x2f0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d12a      	bne.n	8005448 <UART_SetConfig+0x150>
 80053f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80053f6:	f7ff fa39 	bl	800486c <LL_RCC_GetLPUARTClockSource>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005400:	d01a      	beq.n	8005438 <UART_SetConfig+0x140>
 8005402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005406:	d81b      	bhi.n	8005440 <UART_SetConfig+0x148>
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540c:	d00c      	beq.n	8005428 <UART_SetConfig+0x130>
 800540e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005412:	d815      	bhi.n	8005440 <UART_SetConfig+0x148>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <UART_SetConfig+0x128>
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d008      	beq.n	8005430 <UART_SetConfig+0x138>
 800541e:	e00f      	b.n	8005440 <UART_SetConfig+0x148>
 8005420:	2300      	movs	r3, #0
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005426:	e012      	b.n	800544e <UART_SetConfig+0x156>
 8005428:	2302      	movs	r3, #2
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800542e:	e00e      	b.n	800544e <UART_SetConfig+0x156>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005436:	e00a      	b.n	800544e <UART_SetConfig+0x156>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543e:	e006      	b.n	800544e <UART_SetConfig+0x156>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005446:	e002      	b.n	800544e <UART_SetConfig+0x156>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a65      	ldr	r2, [pc, #404]	; (80055e8 <UART_SetConfig+0x2f0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	f040 8097 	bne.w	8005588 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800545a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800545e:	2b08      	cmp	r3, #8
 8005460:	d823      	bhi.n	80054aa <UART_SetConfig+0x1b2>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0x170>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	0800548d 	.word	0x0800548d
 800546c:	080054ab 	.word	0x080054ab
 8005470:	08005495 	.word	0x08005495
 8005474:	080054ab 	.word	0x080054ab
 8005478:	0800549b 	.word	0x0800549b
 800547c:	080054ab 	.word	0x080054ab
 8005480:	080054ab 	.word	0x080054ab
 8005484:	080054ab 	.word	0x080054ab
 8005488:	080054a3 	.word	0x080054a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800548c:	f7fe fcda 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8005490:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005492:	e010      	b.n	80054b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005494:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <UART_SetConfig+0x2f8>)
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005498:	e00d      	b.n	80054b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549a:	f7fe fc53 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054a0:	e009      	b.n	80054b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054a8:	e005      	b.n	80054b6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 812b 	beq.w	8005714 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	4a4c      	ldr	r2, [pc, #304]	; (80055f4 <UART_SetConfig+0x2fc>)
 80054c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	4413      	add	r3, r2
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d305      	bcc.n	80054ee <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d903      	bls.n	80054f6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054f4:	e10e      	b.n	8005714 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2200      	movs	r2, #0
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	60fa      	str	r2, [r7, #12]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	4a3c      	ldr	r2, [pc, #240]	; (80055f4 <UART_SetConfig+0x2fc>)
 8005504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005508:	b29b      	uxth	r3, r3
 800550a:	2200      	movs	r2, #0
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005518:	f7fb f8e6 	bl	80006e8 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	020b      	lsls	r3, r1, #8
 800552e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005532:	0202      	lsls	r2, r0, #8
 8005534:	6979      	ldr	r1, [r7, #20]
 8005536:	6849      	ldr	r1, [r1, #4]
 8005538:	0849      	lsrs	r1, r1, #1
 800553a:	2000      	movs	r0, #0
 800553c:	460c      	mov	r4, r1
 800553e:	4605      	mov	r5, r0
 8005540:	eb12 0804 	adds.w	r8, r2, r4
 8005544:	eb43 0905 	adc.w	r9, r3, r5
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	469a      	mov	sl, r3
 8005550:	4693      	mov	fp, r2
 8005552:	4652      	mov	r2, sl
 8005554:	465b      	mov	r3, fp
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f7fb f8c5 	bl	80006e8 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4613      	mov	r3, r2
 8005564:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556c:	d308      	bcc.n	8005580 <UART_SetConfig+0x288>
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005574:	d204      	bcs.n	8005580 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a3a      	ldr	r2, [r7, #32]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e0c9      	b.n	8005714 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005586:	e0c5      	b.n	8005714 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d16d      	bne.n	800566e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005596:	3b01      	subs	r3, #1
 8005598:	2b07      	cmp	r3, #7
 800559a:	d82d      	bhi.n	80055f8 <UART_SetConfig+0x300>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0x2ac>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055c5 	.word	0x080055c5
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055f9 	.word	0x080055f9
 80055b0:	080055d3 	.word	0x080055d3
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	080055f9 	.word	0x080055f9
 80055c0:	080055db 	.word	0x080055db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c4:	f7fe fc54 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055ca:	e01b      	b.n	8005604 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <UART_SetConfig+0x2f8>)
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055d0:	e018      	b.n	8005604 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d2:	f7fe fbb7 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055d8:	e014      	b.n	8005604 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055e0:	e010      	b.n	8005604 <UART_SetConfig+0x30c>
 80055e2:	bf00      	nop
 80055e4:	cfff69f3 	.word	0xcfff69f3
 80055e8:	40008000 	.word	0x40008000
 80055ec:	40013800 	.word	0x40013800
 80055f0:	00f42400 	.word	0x00f42400
 80055f4:	080076d0 	.word	0x080076d0
      default:
        pclk = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005602:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8084 	beq.w	8005714 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	4a4b      	ldr	r2, [pc, #300]	; (8005740 <UART_SetConfig+0x448>)
 8005612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005616:	461a      	mov	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	fbb3 f3f2 	udiv	r3, r3, r2
 800561e:	005a      	lsls	r2, r3, #1
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	441a      	add	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	2b0f      	cmp	r3, #15
 8005636:	d916      	bls.n	8005666 <UART_SetConfig+0x36e>
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d212      	bcs.n	8005666 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f023 030f 	bic.w	r3, r3, #15
 8005648:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	b29a      	uxth	r2, r3
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	4313      	orrs	r3, r2
 800565a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	8bfa      	ldrh	r2, [r7, #30]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	e056      	b.n	8005714 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800566c:	e052      	b.n	8005714 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800566e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005672:	3b01      	subs	r3, #1
 8005674:	2b07      	cmp	r3, #7
 8005676:	d822      	bhi.n	80056be <UART_SetConfig+0x3c6>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x388>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056a1 	.word	0x080056a1
 8005684:	080056a9 	.word	0x080056a9
 8005688:	080056bf 	.word	0x080056bf
 800568c:	080056af 	.word	0x080056af
 8005690:	080056bf 	.word	0x080056bf
 8005694:	080056bf 	.word	0x080056bf
 8005698:	080056bf 	.word	0x080056bf
 800569c:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe fbe6 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 80056a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056a6:	e010      	b.n	80056ca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b26      	ldr	r3, [pc, #152]	; (8005744 <UART_SetConfig+0x44c>)
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056ac:	e00d      	b.n	80056ca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe fb49 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80056b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056b4:	e009      	b.n	80056ca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056bc:	e005      	b.n	80056ca <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056c8:	bf00      	nop
    }

    if (pclk != 0U)
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d021      	beq.n	8005714 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <UART_SetConfig+0x448>)
 80056d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056da:	461a      	mov	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	fbb3 f2f2 	udiv	r2, r3, r2
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	441a      	add	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d909      	bls.n	800570e <UART_SetConfig+0x416>
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d205      	bcs.n	800570e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	b29a      	uxth	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e002      	b.n	8005714 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2201      	movs	r2, #1
 8005718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2201      	movs	r2, #1
 8005720:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2200      	movs	r2, #0
 800572e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005730:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005734:	4618      	mov	r0, r3
 8005736:	3730      	adds	r7, #48	; 0x30
 8005738:	46bd      	mov	sp, r7
 800573a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573e:	bf00      	nop
 8005740:	080076d0 	.word	0x080076d0
 8005744:	00f42400 	.word	0x00f42400

08005748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01a      	beq.n	800585e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005846:	d10a      	bne.n	800585e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b098      	sub	sp, #96	; 0x60
 8005890:	af02      	add	r7, sp, #8
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800589c:	f7fc f9f8 	bl	8001c90 <HAL_GetTick>
 80058a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d12f      	bne.n	8005910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f88e 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d022      	beq.n	8005910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e6      	bne.n	80058ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e063      	b.n	80059d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d149      	bne.n	80059b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005926:	2200      	movs	r2, #0
 8005928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f857 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d03c      	beq.n	80059b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	623b      	str	r3, [r7, #32]
   return(result);
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800594c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005956:	633b      	str	r3, [r7, #48]	; 0x30
 8005958:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800595c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e6      	bne.n	8005938 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60fb      	str	r3, [r7, #12]
   return(result);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	64bb      	str	r3, [r7, #72]	; 0x48
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	69b9      	ldr	r1, [r7, #24]
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	617b      	str	r3, [r7, #20]
   return(result);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e012      	b.n	80059d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3758      	adds	r7, #88	; 0x58
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f0:	e04f      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d04b      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fa:	f7fc f949 	bl	8001c90 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e04e      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d037      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d034      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d031      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d110      	bne.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2208      	movs	r2, #8
 8005a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f920 	bl	8005c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e029      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6c:	d111      	bne.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f906 	bl	8005c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e00f      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d0a0      	beq.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b096      	sub	sp, #88	; 0x58
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2222      	movs	r2, #34	; 0x22
 8005ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02d      	beq.n	8005b4e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af8:	4a40      	ldr	r2, [pc, #256]	; (8005bfc <UART_Start_Receive_DMA+0x140>)
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b02:	4a3f      	ldr	r2, [pc, #252]	; (8005c00 <UART_Start_Receive_DMA+0x144>)
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b0c:	4a3d      	ldr	r2, [pc, #244]	; (8005c04 <UART_Start_Receive_DMA+0x148>)
 8005b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b16:	2200      	movs	r2, #0
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3324      	adds	r3, #36	; 0x24
 8005b26:	4619      	mov	r1, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	f7fc faa2 	bl	8002078 <HAL_DMA_Start_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e051      	b.n	8005bf2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b76:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ba8:	637a      	str	r2, [r7, #52]	; 0x34
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bdc:	623a      	str	r2, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3758      	adds	r7, #88	; 0x58
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08005d57 	.word	0x08005d57
 8005c00:	08005e83 	.word	0x08005e83
 8005c04:	08005ec1 	.word	0x08005ec1

08005c08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b08f      	sub	sp, #60	; 0x3c
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c58:	633b      	str	r3, [r7, #48]	; 0x30
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c62:	61ba      	str	r2, [r7, #24]
 8005c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005c7e:	bf00      	nop
 8005c80:	373c      	adds	r7, #60	; 0x3c
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b095      	sub	sp, #84	; 0x54
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e6      	bne.n	8005c92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e3      	bne.n	8005cc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d118      	bne.n	8005d36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e6      	bne.n	8005d04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d4a:	bf00      	nop
 8005d4c:	3754      	adds	r7, #84	; 0x54
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b09c      	sub	sp, #112	; 0x70
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d171      	bne.n	8005e56 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e6      	bne.n	8005d7a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dcc:	647a      	str	r2, [r7, #68]	; 0x44
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3308      	adds	r3, #8
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	623b      	str	r3, [r7, #32]
   return(result);
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df6:	663b      	str	r3, [r7, #96]	; 0x60
 8005df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e00:	633a      	str	r2, [r7, #48]	; 0x30
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d118      	bne.n	8005e56 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 0310 	bic.w	r3, r3, #16
 8005e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e6      	bne.n	8005e24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e58:	2200      	movs	r2, #0
 8005e5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d107      	bne.n	8005e74 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e6e:	f7ff fa37 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e72:	e002      	b.n	8005e7a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e76:	f7fb fba7 	bl	80015c8 <HAL_UART_RxCpltCallback>
}
 8005e7a:	bf00      	nop
 8005e7c:	3770      	adds	r7, #112	; 0x70
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d109      	bne.n	8005eb2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fa18 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eb0:	e002      	b.n	8005eb8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7fb fb5c 	bl	8001570 <HAL_UART_RxHalfCpltCallback>
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d109      	bne.n	8005f00 <UART_DMAError+0x40>
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b21      	cmp	r3, #33	; 0x21
 8005ef0:	d106      	bne.n	8005f00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7ff fe84 	bl	8005c08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d109      	bne.n	8005f22 <UART_DMAError+0x62>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b22      	cmp	r3, #34	; 0x22
 8005f12:	d106      	bne.n	8005f22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7ff feb4 	bl	8005c8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f043 0210 	orr.w	r2, r3, #16
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f32:	6978      	ldr	r0, [r7, #20]
 8005f34:	f7ff f9ca 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff f9b4 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e6      	bne.n	8005f74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff f97f 	bl	80052b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fba:	bf00      	nop
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_UARTEx_DisableFifoMode+0x16>
 8006010:	2302      	movs	r3, #2
 8006012:	e027      	b.n	8006064 <HAL_UARTEx_DisableFifoMode+0x66>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2224      	movs	r2, #36	; 0x24
 8006020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006042:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006084:	2302      	movs	r3, #2
 8006086:	e02d      	b.n	80060e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f84f 	bl	8006168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e02d      	b.n	8006160 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	; 0x24
 8006110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f811 	bl	8006168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006174:	2b00      	cmp	r3, #0
 8006176:	d108      	bne.n	800618a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006188:	e031      	b.n	80061ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800618a:	2308      	movs	r3, #8
 800618c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800618e:	2308      	movs	r3, #8
 8006190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	0e5b      	lsrs	r3, r3, #25
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	0f5b      	lsrs	r3, r3, #29
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	7b3a      	ldrb	r2, [r7, #12]
 80061b6:	4911      	ldr	r1, [pc, #68]	; (80061fc <UARTEx_SetNbDataToProcess+0x94>)
 80061b8:	5c8a      	ldrb	r2, [r1, r2]
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061be:	7b3a      	ldrb	r2, [r7, #12]
 80061c0:	490f      	ldr	r1, [pc, #60]	; (8006200 <UARTEx_SetNbDataToProcess+0x98>)
 80061c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	7b7a      	ldrb	r2, [r7, #13]
 80061d4:	4909      	ldr	r1, [pc, #36]	; (80061fc <UARTEx_SetNbDataToProcess+0x94>)
 80061d6:	5c8a      	ldrb	r2, [r1, r2]
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061dc:	7b7a      	ldrb	r2, [r7, #13]
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <UARTEx_SetNbDataToProcess+0x98>)
 80061e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	080076e8 	.word	0x080076e8
 8006200:	080076f0 	.word	0x080076f0

08006204 <atoi>:
 8006204:	220a      	movs	r2, #10
 8006206:	2100      	movs	r1, #0
 8006208:	f000 b882 	b.w	8006310 <strtol>

0800620c <_strtol_l.constprop.0>:
 800620c:	2b01      	cmp	r3, #1
 800620e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006212:	d001      	beq.n	8006218 <_strtol_l.constprop.0+0xc>
 8006214:	2b24      	cmp	r3, #36	; 0x24
 8006216:	d906      	bls.n	8006226 <_strtol_l.constprop.0+0x1a>
 8006218:	f000 fada 	bl	80067d0 <__errno>
 800621c:	2316      	movs	r3, #22
 800621e:	6003      	str	r3, [r0, #0]
 8006220:	2000      	movs	r0, #0
 8006222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006226:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800630c <_strtol_l.constprop.0+0x100>
 800622a:	460d      	mov	r5, r1
 800622c:	462e      	mov	r6, r5
 800622e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006232:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006236:	f017 0708 	ands.w	r7, r7, #8
 800623a:	d1f7      	bne.n	800622c <_strtol_l.constprop.0+0x20>
 800623c:	2c2d      	cmp	r4, #45	; 0x2d
 800623e:	d132      	bne.n	80062a6 <_strtol_l.constprop.0+0x9a>
 8006240:	782c      	ldrb	r4, [r5, #0]
 8006242:	2701      	movs	r7, #1
 8006244:	1cb5      	adds	r5, r6, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d05b      	beq.n	8006302 <_strtol_l.constprop.0+0xf6>
 800624a:	2b10      	cmp	r3, #16
 800624c:	d109      	bne.n	8006262 <_strtol_l.constprop.0+0x56>
 800624e:	2c30      	cmp	r4, #48	; 0x30
 8006250:	d107      	bne.n	8006262 <_strtol_l.constprop.0+0x56>
 8006252:	782c      	ldrb	r4, [r5, #0]
 8006254:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006258:	2c58      	cmp	r4, #88	; 0x58
 800625a:	d14d      	bne.n	80062f8 <_strtol_l.constprop.0+0xec>
 800625c:	786c      	ldrb	r4, [r5, #1]
 800625e:	2310      	movs	r3, #16
 8006260:	3502      	adds	r5, #2
 8006262:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006266:	f108 38ff 	add.w	r8, r8, #4294967295
 800626a:	f04f 0e00 	mov.w	lr, #0
 800626e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006272:	4676      	mov	r6, lr
 8006274:	fb03 8a19 	mls	sl, r3, r9, r8
 8006278:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800627c:	f1bc 0f09 	cmp.w	ip, #9
 8006280:	d816      	bhi.n	80062b0 <_strtol_l.constprop.0+0xa4>
 8006282:	4664      	mov	r4, ip
 8006284:	42a3      	cmp	r3, r4
 8006286:	dd24      	ble.n	80062d2 <_strtol_l.constprop.0+0xc6>
 8006288:	f1be 3fff 	cmp.w	lr, #4294967295
 800628c:	d008      	beq.n	80062a0 <_strtol_l.constprop.0+0x94>
 800628e:	45b1      	cmp	r9, r6
 8006290:	d31c      	bcc.n	80062cc <_strtol_l.constprop.0+0xc0>
 8006292:	d101      	bne.n	8006298 <_strtol_l.constprop.0+0x8c>
 8006294:	45a2      	cmp	sl, r4
 8006296:	db19      	blt.n	80062cc <_strtol_l.constprop.0+0xc0>
 8006298:	fb06 4603 	mla	r6, r6, r3, r4
 800629c:	f04f 0e01 	mov.w	lr, #1
 80062a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062a4:	e7e8      	b.n	8006278 <_strtol_l.constprop.0+0x6c>
 80062a6:	2c2b      	cmp	r4, #43	; 0x2b
 80062a8:	bf04      	itt	eq
 80062aa:	782c      	ldrbeq	r4, [r5, #0]
 80062ac:	1cb5      	addeq	r5, r6, #2
 80062ae:	e7ca      	b.n	8006246 <_strtol_l.constprop.0+0x3a>
 80062b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062b4:	f1bc 0f19 	cmp.w	ip, #25
 80062b8:	d801      	bhi.n	80062be <_strtol_l.constprop.0+0xb2>
 80062ba:	3c37      	subs	r4, #55	; 0x37
 80062bc:	e7e2      	b.n	8006284 <_strtol_l.constprop.0+0x78>
 80062be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80062c2:	f1bc 0f19 	cmp.w	ip, #25
 80062c6:	d804      	bhi.n	80062d2 <_strtol_l.constprop.0+0xc6>
 80062c8:	3c57      	subs	r4, #87	; 0x57
 80062ca:	e7db      	b.n	8006284 <_strtol_l.constprop.0+0x78>
 80062cc:	f04f 3eff 	mov.w	lr, #4294967295
 80062d0:	e7e6      	b.n	80062a0 <_strtol_l.constprop.0+0x94>
 80062d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80062d6:	d105      	bne.n	80062e4 <_strtol_l.constprop.0+0xd8>
 80062d8:	2322      	movs	r3, #34	; 0x22
 80062da:	6003      	str	r3, [r0, #0]
 80062dc:	4646      	mov	r6, r8
 80062de:	b942      	cbnz	r2, 80062f2 <_strtol_l.constprop.0+0xe6>
 80062e0:	4630      	mov	r0, r6
 80062e2:	e79e      	b.n	8006222 <_strtol_l.constprop.0+0x16>
 80062e4:	b107      	cbz	r7, 80062e8 <_strtol_l.constprop.0+0xdc>
 80062e6:	4276      	negs	r6, r6
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d0f9      	beq.n	80062e0 <_strtol_l.constprop.0+0xd4>
 80062ec:	f1be 0f00 	cmp.w	lr, #0
 80062f0:	d000      	beq.n	80062f4 <_strtol_l.constprop.0+0xe8>
 80062f2:	1e69      	subs	r1, r5, #1
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	e7f3      	b.n	80062e0 <_strtol_l.constprop.0+0xd4>
 80062f8:	2430      	movs	r4, #48	; 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1b1      	bne.n	8006262 <_strtol_l.constprop.0+0x56>
 80062fe:	2308      	movs	r3, #8
 8006300:	e7af      	b.n	8006262 <_strtol_l.constprop.0+0x56>
 8006302:	2c30      	cmp	r4, #48	; 0x30
 8006304:	d0a5      	beq.n	8006252 <_strtol_l.constprop.0+0x46>
 8006306:	230a      	movs	r3, #10
 8006308:	e7ab      	b.n	8006262 <_strtol_l.constprop.0+0x56>
 800630a:	bf00      	nop
 800630c:	080076f9 	.word	0x080076f9

08006310 <strtol>:
 8006310:	4613      	mov	r3, r2
 8006312:	460a      	mov	r2, r1
 8006314:	4601      	mov	r1, r0
 8006316:	4802      	ldr	r0, [pc, #8]	; (8006320 <strtol+0x10>)
 8006318:	6800      	ldr	r0, [r0, #0]
 800631a:	f7ff bf77 	b.w	800620c <_strtol_l.constprop.0>
 800631e:	bf00      	nop
 8006320:	2000006c 	.word	0x2000006c

08006324 <std>:
 8006324:	2300      	movs	r3, #0
 8006326:	b510      	push	{r4, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	e9c0 3300 	strd	r3, r3, [r0]
 800632e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006332:	6083      	str	r3, [r0, #8]
 8006334:	8181      	strh	r1, [r0, #12]
 8006336:	6643      	str	r3, [r0, #100]	; 0x64
 8006338:	81c2      	strh	r2, [r0, #14]
 800633a:	6183      	str	r3, [r0, #24]
 800633c:	4619      	mov	r1, r3
 800633e:	2208      	movs	r2, #8
 8006340:	305c      	adds	r0, #92	; 0x5c
 8006342:	f000 f9f7 	bl	8006734 <memset>
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <std+0x58>)
 8006348:	6263      	str	r3, [r4, #36]	; 0x24
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <std+0x5c>)
 800634c:	62a3      	str	r3, [r4, #40]	; 0x28
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <std+0x60>)
 8006350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <std+0x64>)
 8006354:	6323      	str	r3, [r4, #48]	; 0x30
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <std+0x68>)
 8006358:	6224      	str	r4, [r4, #32]
 800635a:	429c      	cmp	r4, r3
 800635c:	d006      	beq.n	800636c <std+0x48>
 800635e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006362:	4294      	cmp	r4, r2
 8006364:	d002      	beq.n	800636c <std+0x48>
 8006366:	33d0      	adds	r3, #208	; 0xd0
 8006368:	429c      	cmp	r4, r3
 800636a:	d105      	bne.n	8006378 <std+0x54>
 800636c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f000 ba56 	b.w	8006824 <__retarget_lock_init_recursive>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	08006585 	.word	0x08006585
 8006380:	080065a7 	.word	0x080065a7
 8006384:	080065df 	.word	0x080065df
 8006388:	08006603 	.word	0x08006603
 800638c:	20000f28 	.word	0x20000f28

08006390 <stdio_exit_handler>:
 8006390:	4a02      	ldr	r2, [pc, #8]	; (800639c <stdio_exit_handler+0xc>)
 8006392:	4903      	ldr	r1, [pc, #12]	; (80063a0 <stdio_exit_handler+0x10>)
 8006394:	4803      	ldr	r0, [pc, #12]	; (80063a4 <stdio_exit_handler+0x14>)
 8006396:	f000 b869 	b.w	800646c <_fwalk_sglue>
 800639a:	bf00      	nop
 800639c:	20000014 	.word	0x20000014
 80063a0:	080070d1 	.word	0x080070d1
 80063a4:	20000020 	.word	0x20000020

080063a8 <cleanup_stdio>:
 80063a8:	6841      	ldr	r1, [r0, #4]
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <cleanup_stdio+0x34>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	b510      	push	{r4, lr}
 80063b0:	4604      	mov	r4, r0
 80063b2:	d001      	beq.n	80063b8 <cleanup_stdio+0x10>
 80063b4:	f000 fe8c 	bl	80070d0 <_fflush_r>
 80063b8:	68a1      	ldr	r1, [r4, #8]
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <cleanup_stdio+0x38>)
 80063bc:	4299      	cmp	r1, r3
 80063be:	d002      	beq.n	80063c6 <cleanup_stdio+0x1e>
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fe85 	bl	80070d0 <_fflush_r>
 80063c6:	68e1      	ldr	r1, [r4, #12]
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <cleanup_stdio+0x3c>)
 80063ca:	4299      	cmp	r1, r3
 80063cc:	d004      	beq.n	80063d8 <cleanup_stdio+0x30>
 80063ce:	4620      	mov	r0, r4
 80063d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d4:	f000 be7c 	b.w	80070d0 <_fflush_r>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	bf00      	nop
 80063dc:	20000f28 	.word	0x20000f28
 80063e0:	20000f90 	.word	0x20000f90
 80063e4:	20000ff8 	.word	0x20000ff8

080063e8 <global_stdio_init.part.0>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <global_stdio_init.part.0+0x30>)
 80063ec:	4c0b      	ldr	r4, [pc, #44]	; (800641c <global_stdio_init.part.0+0x34>)
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <global_stdio_init.part.0+0x38>)
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	4620      	mov	r0, r4
 80063f4:	2200      	movs	r2, #0
 80063f6:	2104      	movs	r1, #4
 80063f8:	f7ff ff94 	bl	8006324 <std>
 80063fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006400:	2201      	movs	r2, #1
 8006402:	2109      	movs	r1, #9
 8006404:	f7ff ff8e 	bl	8006324 <std>
 8006408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800640c:	2202      	movs	r2, #2
 800640e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006412:	2112      	movs	r1, #18
 8006414:	f7ff bf86 	b.w	8006324 <std>
 8006418:	20001060 	.word	0x20001060
 800641c:	20000f28 	.word	0x20000f28
 8006420:	08006391 	.word	0x08006391

08006424 <__sfp_lock_acquire>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__sfp_lock_acquire+0x8>)
 8006426:	f000 b9fe 	b.w	8006826 <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	20001069 	.word	0x20001069

08006430 <__sfp_lock_release>:
 8006430:	4801      	ldr	r0, [pc, #4]	; (8006438 <__sfp_lock_release+0x8>)
 8006432:	f000 b9f9 	b.w	8006828 <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	20001069 	.word	0x20001069

0800643c <__sinit>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	f7ff fff0 	bl	8006424 <__sfp_lock_acquire>
 8006444:	6a23      	ldr	r3, [r4, #32]
 8006446:	b11b      	cbz	r3, 8006450 <__sinit+0x14>
 8006448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800644c:	f7ff bff0 	b.w	8006430 <__sfp_lock_release>
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <__sinit+0x28>)
 8006452:	6223      	str	r3, [r4, #32]
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <__sinit+0x2c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f5      	bne.n	8006448 <__sinit+0xc>
 800645c:	f7ff ffc4 	bl	80063e8 <global_stdio_init.part.0>
 8006460:	e7f2      	b.n	8006448 <__sinit+0xc>
 8006462:	bf00      	nop
 8006464:	080063a9 	.word	0x080063a9
 8006468:	20001060 	.word	0x20001060

0800646c <_fwalk_sglue>:
 800646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006470:	4607      	mov	r7, r0
 8006472:	4688      	mov	r8, r1
 8006474:	4614      	mov	r4, r2
 8006476:	2600      	movs	r6, #0
 8006478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800647c:	f1b9 0901 	subs.w	r9, r9, #1
 8006480:	d505      	bpl.n	800648e <_fwalk_sglue+0x22>
 8006482:	6824      	ldr	r4, [r4, #0]
 8006484:	2c00      	cmp	r4, #0
 8006486:	d1f7      	bne.n	8006478 <_fwalk_sglue+0xc>
 8006488:	4630      	mov	r0, r6
 800648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d907      	bls.n	80064a4 <_fwalk_sglue+0x38>
 8006494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006498:	3301      	adds	r3, #1
 800649a:	d003      	beq.n	80064a4 <_fwalk_sglue+0x38>
 800649c:	4629      	mov	r1, r5
 800649e:	4638      	mov	r0, r7
 80064a0:	47c0      	blx	r8
 80064a2:	4306      	orrs	r6, r0
 80064a4:	3568      	adds	r5, #104	; 0x68
 80064a6:	e7e9      	b.n	800647c <_fwalk_sglue+0x10>

080064a8 <iprintf>:
 80064a8:	b40f      	push	{r0, r1, r2, r3}
 80064aa:	b507      	push	{r0, r1, r2, lr}
 80064ac:	4906      	ldr	r1, [pc, #24]	; (80064c8 <iprintf+0x20>)
 80064ae:	ab04      	add	r3, sp, #16
 80064b0:	6808      	ldr	r0, [r1, #0]
 80064b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b6:	6881      	ldr	r1, [r0, #8]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	f000 fad9 	bl	8006a70 <_vfiprintf_r>
 80064be:	b003      	add	sp, #12
 80064c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064c4:	b004      	add	sp, #16
 80064c6:	4770      	bx	lr
 80064c8:	2000006c 	.word	0x2000006c

080064cc <_puts_r>:
 80064cc:	6a03      	ldr	r3, [r0, #32]
 80064ce:	b570      	push	{r4, r5, r6, lr}
 80064d0:	6884      	ldr	r4, [r0, #8]
 80064d2:	4605      	mov	r5, r0
 80064d4:	460e      	mov	r6, r1
 80064d6:	b90b      	cbnz	r3, 80064dc <_puts_r+0x10>
 80064d8:	f7ff ffb0 	bl	800643c <__sinit>
 80064dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064de:	07db      	lsls	r3, r3, #31
 80064e0:	d405      	bmi.n	80064ee <_puts_r+0x22>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	0598      	lsls	r0, r3, #22
 80064e6:	d402      	bmi.n	80064ee <_puts_r+0x22>
 80064e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ea:	f000 f99c 	bl	8006826 <__retarget_lock_acquire_recursive>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	0719      	lsls	r1, r3, #28
 80064f2:	d513      	bpl.n	800651c <_puts_r+0x50>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b18b      	cbz	r3, 800651c <_puts_r+0x50>
 80064f8:	3e01      	subs	r6, #1
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006500:	3b01      	subs	r3, #1
 8006502:	60a3      	str	r3, [r4, #8]
 8006504:	b9e9      	cbnz	r1, 8006542 <_puts_r+0x76>
 8006506:	2b00      	cmp	r3, #0
 8006508:	da2e      	bge.n	8006568 <_puts_r+0x9c>
 800650a:	4622      	mov	r2, r4
 800650c:	210a      	movs	r1, #10
 800650e:	4628      	mov	r0, r5
 8006510:	f000 f87b 	bl	800660a <__swbuf_r>
 8006514:	3001      	adds	r0, #1
 8006516:	d007      	beq.n	8006528 <_puts_r+0x5c>
 8006518:	250a      	movs	r5, #10
 800651a:	e007      	b.n	800652c <_puts_r+0x60>
 800651c:	4621      	mov	r1, r4
 800651e:	4628      	mov	r0, r5
 8006520:	f000 f8b0 	bl	8006684 <__swsetup_r>
 8006524:	2800      	cmp	r0, #0
 8006526:	d0e7      	beq.n	80064f8 <_puts_r+0x2c>
 8006528:	f04f 35ff 	mov.w	r5, #4294967295
 800652c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652e:	07da      	lsls	r2, r3, #31
 8006530:	d405      	bmi.n	800653e <_puts_r+0x72>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	059b      	lsls	r3, r3, #22
 8006536:	d402      	bmi.n	800653e <_puts_r+0x72>
 8006538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653a:	f000 f975 	bl	8006828 <__retarget_lock_release_recursive>
 800653e:	4628      	mov	r0, r5
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	2b00      	cmp	r3, #0
 8006544:	da04      	bge.n	8006550 <_puts_r+0x84>
 8006546:	69a2      	ldr	r2, [r4, #24]
 8006548:	429a      	cmp	r2, r3
 800654a:	dc06      	bgt.n	800655a <_puts_r+0x8e>
 800654c:	290a      	cmp	r1, #10
 800654e:	d004      	beq.n	800655a <_puts_r+0x8e>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	7019      	strb	r1, [r3, #0]
 8006558:	e7cf      	b.n	80064fa <_puts_r+0x2e>
 800655a:	4622      	mov	r2, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f854 	bl	800660a <__swbuf_r>
 8006562:	3001      	adds	r0, #1
 8006564:	d1c9      	bne.n	80064fa <_puts_r+0x2e>
 8006566:	e7df      	b.n	8006528 <_puts_r+0x5c>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	250a      	movs	r5, #10
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	6022      	str	r2, [r4, #0]
 8006570:	701d      	strb	r5, [r3, #0]
 8006572:	e7db      	b.n	800652c <_puts_r+0x60>

08006574 <puts>:
 8006574:	4b02      	ldr	r3, [pc, #8]	; (8006580 <puts+0xc>)
 8006576:	4601      	mov	r1, r0
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	f7ff bfa7 	b.w	80064cc <_puts_r>
 800657e:	bf00      	nop
 8006580:	2000006c 	.word	0x2000006c

08006584 <__sread>:
 8006584:	b510      	push	{r4, lr}
 8006586:	460c      	mov	r4, r1
 8006588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658c:	f000 f8fc 	bl	8006788 <_read_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	bfab      	itete	ge
 8006594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006596:	89a3      	ldrhlt	r3, [r4, #12]
 8006598:	181b      	addge	r3, r3, r0
 800659a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800659e:	bfac      	ite	ge
 80065a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80065a2:	81a3      	strhlt	r3, [r4, #12]
 80065a4:	bd10      	pop	{r4, pc}

080065a6 <__swrite>:
 80065a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065aa:	461f      	mov	r7, r3
 80065ac:	898b      	ldrh	r3, [r1, #12]
 80065ae:	05db      	lsls	r3, r3, #23
 80065b0:	4605      	mov	r5, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	4616      	mov	r6, r2
 80065b6:	d505      	bpl.n	80065c4 <__swrite+0x1e>
 80065b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065bc:	2302      	movs	r3, #2
 80065be:	2200      	movs	r2, #0
 80065c0:	f000 f8d0 	bl	8006764 <_lseek_r>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	4632      	mov	r2, r6
 80065d2:	463b      	mov	r3, r7
 80065d4:	4628      	mov	r0, r5
 80065d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065da:	f000 b8e7 	b.w	80067ac <_write_r>

080065de <__sseek>:
 80065de:	b510      	push	{r4, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e6:	f000 f8bd 	bl	8006764 <_lseek_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	bf15      	itete	ne
 80065f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80065f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065fa:	81a3      	strheq	r3, [r4, #12]
 80065fc:	bf18      	it	ne
 80065fe:	81a3      	strhne	r3, [r4, #12]
 8006600:	bd10      	pop	{r4, pc}

08006602 <__sclose>:
 8006602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006606:	f000 b89d 	b.w	8006744 <_close_r>

0800660a <__swbuf_r>:
 800660a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660c:	460e      	mov	r6, r1
 800660e:	4614      	mov	r4, r2
 8006610:	4605      	mov	r5, r0
 8006612:	b118      	cbz	r0, 800661c <__swbuf_r+0x12>
 8006614:	6a03      	ldr	r3, [r0, #32]
 8006616:	b90b      	cbnz	r3, 800661c <__swbuf_r+0x12>
 8006618:	f7ff ff10 	bl	800643c <__sinit>
 800661c:	69a3      	ldr	r3, [r4, #24]
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	071a      	lsls	r2, r3, #28
 8006624:	d525      	bpl.n	8006672 <__swbuf_r+0x68>
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	b31b      	cbz	r3, 8006672 <__swbuf_r+0x68>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	1a98      	subs	r0, r3, r2
 8006630:	6963      	ldr	r3, [r4, #20]
 8006632:	b2f6      	uxtb	r6, r6
 8006634:	4283      	cmp	r3, r0
 8006636:	4637      	mov	r7, r6
 8006638:	dc04      	bgt.n	8006644 <__swbuf_r+0x3a>
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f000 fd47 	bl	80070d0 <_fflush_r>
 8006642:	b9e0      	cbnz	r0, 800667e <__swbuf_r+0x74>
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	3b01      	subs	r3, #1
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	701e      	strb	r6, [r3, #0]
 8006652:	6962      	ldr	r2, [r4, #20]
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	429a      	cmp	r2, r3
 8006658:	d004      	beq.n	8006664 <__swbuf_r+0x5a>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	07db      	lsls	r3, r3, #31
 800665e:	d506      	bpl.n	800666e <__swbuf_r+0x64>
 8006660:	2e0a      	cmp	r6, #10
 8006662:	d104      	bne.n	800666e <__swbuf_r+0x64>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f000 fd32 	bl	80070d0 <_fflush_r>
 800666c:	b938      	cbnz	r0, 800667e <__swbuf_r+0x74>
 800666e:	4638      	mov	r0, r7
 8006670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006672:	4621      	mov	r1, r4
 8006674:	4628      	mov	r0, r5
 8006676:	f000 f805 	bl	8006684 <__swsetup_r>
 800667a:	2800      	cmp	r0, #0
 800667c:	d0d5      	beq.n	800662a <__swbuf_r+0x20>
 800667e:	f04f 37ff 	mov.w	r7, #4294967295
 8006682:	e7f4      	b.n	800666e <__swbuf_r+0x64>

08006684 <__swsetup_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <__swsetup_r+0xac>)
 8006688:	4605      	mov	r5, r0
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	460c      	mov	r4, r1
 800668e:	b118      	cbz	r0, 8006698 <__swsetup_r+0x14>
 8006690:	6a03      	ldr	r3, [r0, #32]
 8006692:	b90b      	cbnz	r3, 8006698 <__swsetup_r+0x14>
 8006694:	f7ff fed2 	bl	800643c <__sinit>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800669e:	0718      	lsls	r0, r3, #28
 80066a0:	d422      	bmi.n	80066e8 <__swsetup_r+0x64>
 80066a2:	06d9      	lsls	r1, r3, #27
 80066a4:	d407      	bmi.n	80066b6 <__swsetup_r+0x32>
 80066a6:	2309      	movs	r3, #9
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	e034      	b.n	8006720 <__swsetup_r+0x9c>
 80066b6:	0758      	lsls	r0, r3, #29
 80066b8:	d512      	bpl.n	80066e0 <__swsetup_r+0x5c>
 80066ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066bc:	b141      	cbz	r1, 80066d0 <__swsetup_r+0x4c>
 80066be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066c2:	4299      	cmp	r1, r3
 80066c4:	d002      	beq.n	80066cc <__swsetup_r+0x48>
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f8b0 	bl	800682c <_free_r>
 80066cc:	2300      	movs	r3, #0
 80066ce:	6363      	str	r3, [r4, #52]	; 0x34
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	2300      	movs	r3, #0
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f043 0308 	orr.w	r3, r3, #8
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	b94b      	cbnz	r3, 8006700 <__swsetup_r+0x7c>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f6:	d003      	beq.n	8006700 <__swsetup_r+0x7c>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 fd36 	bl	800716c <__smakebuf_r>
 8006700:	89a0      	ldrh	r0, [r4, #12]
 8006702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006706:	f010 0301 	ands.w	r3, r0, #1
 800670a:	d00a      	beq.n	8006722 <__swsetup_r+0x9e>
 800670c:	2300      	movs	r3, #0
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	6963      	ldr	r3, [r4, #20]
 8006712:	425b      	negs	r3, r3
 8006714:	61a3      	str	r3, [r4, #24]
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	b943      	cbnz	r3, 800672c <__swsetup_r+0xa8>
 800671a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800671e:	d1c4      	bne.n	80066aa <__swsetup_r+0x26>
 8006720:	bd38      	pop	{r3, r4, r5, pc}
 8006722:	0781      	lsls	r1, r0, #30
 8006724:	bf58      	it	pl
 8006726:	6963      	ldrpl	r3, [r4, #20]
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	e7f4      	b.n	8006716 <__swsetup_r+0x92>
 800672c:	2000      	movs	r0, #0
 800672e:	e7f7      	b.n	8006720 <__swsetup_r+0x9c>
 8006730:	2000006c 	.word	0x2000006c

08006734 <memset>:
 8006734:	4402      	add	r2, r0
 8006736:	4603      	mov	r3, r0
 8006738:	4293      	cmp	r3, r2
 800673a:	d100      	bne.n	800673e <memset+0xa>
 800673c:	4770      	bx	lr
 800673e:	f803 1b01 	strb.w	r1, [r3], #1
 8006742:	e7f9      	b.n	8006738 <memset+0x4>

08006744 <_close_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d06      	ldr	r5, [pc, #24]	; (8006760 <_close_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa ff9f 	bl	8001692 <_close>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_close_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_close_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	20001064 	.word	0x20001064

08006764 <_lseek_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d07      	ldr	r5, [pc, #28]	; (8006784 <_lseek_r+0x20>)
 8006768:	4604      	mov	r4, r0
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fa ffb4 	bl	80016e0 <_lseek>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_lseek_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_lseek_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20001064 	.word	0x20001064

08006788 <_read_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	; (80067a8 <_read_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa ff42 	bl	8001620 <_read>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_read_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_read_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20001064 	.word	0x20001064

080067ac <_write_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	; (80067cc <_write_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa ff4d 	bl	800165a <_write>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_write_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_write_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20001064 	.word	0x20001064

080067d0 <__errno>:
 80067d0:	4b01      	ldr	r3, [pc, #4]	; (80067d8 <__errno+0x8>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	2000006c 	.word	0x2000006c

080067dc <__libc_init_array>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4d0d      	ldr	r5, [pc, #52]	; (8006814 <__libc_init_array+0x38>)
 80067e0:	4c0d      	ldr	r4, [pc, #52]	; (8006818 <__libc_init_array+0x3c>)
 80067e2:	1b64      	subs	r4, r4, r5
 80067e4:	10a4      	asrs	r4, r4, #2
 80067e6:	2600      	movs	r6, #0
 80067e8:	42a6      	cmp	r6, r4
 80067ea:	d109      	bne.n	8006800 <__libc_init_array+0x24>
 80067ec:	4d0b      	ldr	r5, [pc, #44]	; (800681c <__libc_init_array+0x40>)
 80067ee:	4c0c      	ldr	r4, [pc, #48]	; (8006820 <__libc_init_array+0x44>)
 80067f0:	f000 fdaa 	bl	8007348 <_init>
 80067f4:	1b64      	subs	r4, r4, r5
 80067f6:	10a4      	asrs	r4, r4, #2
 80067f8:	2600      	movs	r6, #0
 80067fa:	42a6      	cmp	r6, r4
 80067fc:	d105      	bne.n	800680a <__libc_init_array+0x2e>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	f855 3b04 	ldr.w	r3, [r5], #4
 8006804:	4798      	blx	r3
 8006806:	3601      	adds	r6, #1
 8006808:	e7ee      	b.n	80067e8 <__libc_init_array+0xc>
 800680a:	f855 3b04 	ldr.w	r3, [r5], #4
 800680e:	4798      	blx	r3
 8006810:	3601      	adds	r6, #1
 8006812:	e7f2      	b.n	80067fa <__libc_init_array+0x1e>
 8006814:	08007834 	.word	0x08007834
 8006818:	08007834 	.word	0x08007834
 800681c:	08007834 	.word	0x08007834
 8006820:	08007838 	.word	0x08007838

08006824 <__retarget_lock_init_recursive>:
 8006824:	4770      	bx	lr

08006826 <__retarget_lock_acquire_recursive>:
 8006826:	4770      	bx	lr

08006828 <__retarget_lock_release_recursive>:
 8006828:	4770      	bx	lr
	...

0800682c <_free_r>:
 800682c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682e:	2900      	cmp	r1, #0
 8006830:	d044      	beq.n	80068bc <_free_r+0x90>
 8006832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006836:	9001      	str	r0, [sp, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f1a1 0404 	sub.w	r4, r1, #4
 800683e:	bfb8      	it	lt
 8006840:	18e4      	addlt	r4, r4, r3
 8006842:	f000 f8df 	bl	8006a04 <__malloc_lock>
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <_free_r+0x94>)
 8006848:	9801      	ldr	r0, [sp, #4]
 800684a:	6813      	ldr	r3, [r2, #0]
 800684c:	b933      	cbnz	r3, 800685c <_free_r+0x30>
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	6014      	str	r4, [r2, #0]
 8006852:	b003      	add	sp, #12
 8006854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006858:	f000 b8da 	b.w	8006a10 <__malloc_unlock>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d908      	bls.n	8006872 <_free_r+0x46>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	1961      	adds	r1, r4, r5
 8006864:	428b      	cmp	r3, r1
 8006866:	bf01      	itttt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	1949      	addeq	r1, r1, r5
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	e7ed      	b.n	800684e <_free_r+0x22>
 8006872:	461a      	mov	r2, r3
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	b10b      	cbz	r3, 800687c <_free_r+0x50>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d9fa      	bls.n	8006872 <_free_r+0x46>
 800687c:	6811      	ldr	r1, [r2, #0]
 800687e:	1855      	adds	r5, r2, r1
 8006880:	42a5      	cmp	r5, r4
 8006882:	d10b      	bne.n	800689c <_free_r+0x70>
 8006884:	6824      	ldr	r4, [r4, #0]
 8006886:	4421      	add	r1, r4
 8006888:	1854      	adds	r4, r2, r1
 800688a:	42a3      	cmp	r3, r4
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	d1e0      	bne.n	8006852 <_free_r+0x26>
 8006890:	681c      	ldr	r4, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	6053      	str	r3, [r2, #4]
 8006896:	440c      	add	r4, r1
 8006898:	6014      	str	r4, [r2, #0]
 800689a:	e7da      	b.n	8006852 <_free_r+0x26>
 800689c:	d902      	bls.n	80068a4 <_free_r+0x78>
 800689e:	230c      	movs	r3, #12
 80068a0:	6003      	str	r3, [r0, #0]
 80068a2:	e7d6      	b.n	8006852 <_free_r+0x26>
 80068a4:	6825      	ldr	r5, [r4, #0]
 80068a6:	1961      	adds	r1, r4, r5
 80068a8:	428b      	cmp	r3, r1
 80068aa:	bf04      	itt	eq
 80068ac:	6819      	ldreq	r1, [r3, #0]
 80068ae:	685b      	ldreq	r3, [r3, #4]
 80068b0:	6063      	str	r3, [r4, #4]
 80068b2:	bf04      	itt	eq
 80068b4:	1949      	addeq	r1, r1, r5
 80068b6:	6021      	streq	r1, [r4, #0]
 80068b8:	6054      	str	r4, [r2, #4]
 80068ba:	e7ca      	b.n	8006852 <_free_r+0x26>
 80068bc:	b003      	add	sp, #12
 80068be:	bd30      	pop	{r4, r5, pc}
 80068c0:	2000106c 	.word	0x2000106c

080068c4 <sbrk_aligned>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	4e0e      	ldr	r6, [pc, #56]	; (8006900 <sbrk_aligned+0x3c>)
 80068c8:	460c      	mov	r4, r1
 80068ca:	6831      	ldr	r1, [r6, #0]
 80068cc:	4605      	mov	r5, r0
 80068ce:	b911      	cbnz	r1, 80068d6 <sbrk_aligned+0x12>
 80068d0:	f000 fcaa 	bl	8007228 <_sbrk_r>
 80068d4:	6030      	str	r0, [r6, #0]
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	f000 fca5 	bl	8007228 <_sbrk_r>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	d00a      	beq.n	80068f8 <sbrk_aligned+0x34>
 80068e2:	1cc4      	adds	r4, r0, #3
 80068e4:	f024 0403 	bic.w	r4, r4, #3
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d007      	beq.n	80068fc <sbrk_aligned+0x38>
 80068ec:	1a21      	subs	r1, r4, r0
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fc9a 	bl	8007228 <_sbrk_r>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d101      	bne.n	80068fc <sbrk_aligned+0x38>
 80068f8:	f04f 34ff 	mov.w	r4, #4294967295
 80068fc:	4620      	mov	r0, r4
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	20001070 	.word	0x20001070

08006904 <_malloc_r>:
 8006904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006908:	1ccd      	adds	r5, r1, #3
 800690a:	f025 0503 	bic.w	r5, r5, #3
 800690e:	3508      	adds	r5, #8
 8006910:	2d0c      	cmp	r5, #12
 8006912:	bf38      	it	cc
 8006914:	250c      	movcc	r5, #12
 8006916:	2d00      	cmp	r5, #0
 8006918:	4607      	mov	r7, r0
 800691a:	db01      	blt.n	8006920 <_malloc_r+0x1c>
 800691c:	42a9      	cmp	r1, r5
 800691e:	d905      	bls.n	800692c <_malloc_r+0x28>
 8006920:	230c      	movs	r3, #12
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	2600      	movs	r6, #0
 8006926:	4630      	mov	r0, r6
 8006928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a00 <_malloc_r+0xfc>
 8006930:	f000 f868 	bl	8006a04 <__malloc_lock>
 8006934:	f8d8 3000 	ldr.w	r3, [r8]
 8006938:	461c      	mov	r4, r3
 800693a:	bb5c      	cbnz	r4, 8006994 <_malloc_r+0x90>
 800693c:	4629      	mov	r1, r5
 800693e:	4638      	mov	r0, r7
 8006940:	f7ff ffc0 	bl	80068c4 <sbrk_aligned>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	4604      	mov	r4, r0
 8006948:	d155      	bne.n	80069f6 <_malloc_r+0xf2>
 800694a:	f8d8 4000 	ldr.w	r4, [r8]
 800694e:	4626      	mov	r6, r4
 8006950:	2e00      	cmp	r6, #0
 8006952:	d145      	bne.n	80069e0 <_malloc_r+0xdc>
 8006954:	2c00      	cmp	r4, #0
 8006956:	d048      	beq.n	80069ea <_malloc_r+0xe6>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	4631      	mov	r1, r6
 800695c:	4638      	mov	r0, r7
 800695e:	eb04 0903 	add.w	r9, r4, r3
 8006962:	f000 fc61 	bl	8007228 <_sbrk_r>
 8006966:	4581      	cmp	r9, r0
 8006968:	d13f      	bne.n	80069ea <_malloc_r+0xe6>
 800696a:	6821      	ldr	r1, [r4, #0]
 800696c:	1a6d      	subs	r5, r5, r1
 800696e:	4629      	mov	r1, r5
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff ffa7 	bl	80068c4 <sbrk_aligned>
 8006976:	3001      	adds	r0, #1
 8006978:	d037      	beq.n	80069ea <_malloc_r+0xe6>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	442b      	add	r3, r5
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	f8d8 3000 	ldr.w	r3, [r8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d038      	beq.n	80069fa <_malloc_r+0xf6>
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	42a2      	cmp	r2, r4
 800698c:	d12b      	bne.n	80069e6 <_malloc_r+0xe2>
 800698e:	2200      	movs	r2, #0
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	e00f      	b.n	80069b4 <_malloc_r+0xb0>
 8006994:	6822      	ldr	r2, [r4, #0]
 8006996:	1b52      	subs	r2, r2, r5
 8006998:	d41f      	bmi.n	80069da <_malloc_r+0xd6>
 800699a:	2a0b      	cmp	r2, #11
 800699c:	d917      	bls.n	80069ce <_malloc_r+0xca>
 800699e:	1961      	adds	r1, r4, r5
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	6025      	str	r5, [r4, #0]
 80069a4:	bf18      	it	ne
 80069a6:	6059      	strne	r1, [r3, #4]
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	bf08      	it	eq
 80069ac:	f8c8 1000 	streq.w	r1, [r8]
 80069b0:	5162      	str	r2, [r4, r5]
 80069b2:	604b      	str	r3, [r1, #4]
 80069b4:	4638      	mov	r0, r7
 80069b6:	f104 060b 	add.w	r6, r4, #11
 80069ba:	f000 f829 	bl	8006a10 <__malloc_unlock>
 80069be:	f026 0607 	bic.w	r6, r6, #7
 80069c2:	1d23      	adds	r3, r4, #4
 80069c4:	1af2      	subs	r2, r6, r3
 80069c6:	d0ae      	beq.n	8006926 <_malloc_r+0x22>
 80069c8:	1b9b      	subs	r3, r3, r6
 80069ca:	50a3      	str	r3, [r4, r2]
 80069cc:	e7ab      	b.n	8006926 <_malloc_r+0x22>
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	6862      	ldr	r2, [r4, #4]
 80069d2:	d1dd      	bne.n	8006990 <_malloc_r+0x8c>
 80069d4:	f8c8 2000 	str.w	r2, [r8]
 80069d8:	e7ec      	b.n	80069b4 <_malloc_r+0xb0>
 80069da:	4623      	mov	r3, r4
 80069dc:	6864      	ldr	r4, [r4, #4]
 80069de:	e7ac      	b.n	800693a <_malloc_r+0x36>
 80069e0:	4634      	mov	r4, r6
 80069e2:	6876      	ldr	r6, [r6, #4]
 80069e4:	e7b4      	b.n	8006950 <_malloc_r+0x4c>
 80069e6:	4613      	mov	r3, r2
 80069e8:	e7cc      	b.n	8006984 <_malloc_r+0x80>
 80069ea:	230c      	movs	r3, #12
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	4638      	mov	r0, r7
 80069f0:	f000 f80e 	bl	8006a10 <__malloc_unlock>
 80069f4:	e797      	b.n	8006926 <_malloc_r+0x22>
 80069f6:	6025      	str	r5, [r4, #0]
 80069f8:	e7dc      	b.n	80069b4 <_malloc_r+0xb0>
 80069fa:	605b      	str	r3, [r3, #4]
 80069fc:	deff      	udf	#255	; 0xff
 80069fe:	bf00      	nop
 8006a00:	2000106c 	.word	0x2000106c

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__malloc_lock+0x8>)
 8006a06:	f7ff bf0e 	b.w	8006826 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20001068 	.word	0x20001068

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f7ff bf09 	b.w	8006828 <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20001068 	.word	0x20001068

08006a1c <__sfputc_r>:
 8006a1c:	6893      	ldr	r3, [r2, #8]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	b410      	push	{r4}
 8006a24:	6093      	str	r3, [r2, #8]
 8006a26:	da08      	bge.n	8006a3a <__sfputc_r+0x1e>
 8006a28:	6994      	ldr	r4, [r2, #24]
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	db01      	blt.n	8006a32 <__sfputc_r+0x16>
 8006a2e:	290a      	cmp	r1, #10
 8006a30:	d103      	bne.n	8006a3a <__sfputc_r+0x1e>
 8006a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a36:	f7ff bde8 	b.w	800660a <__swbuf_r>
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	1c58      	adds	r0, r3, #1
 8006a3e:	6010      	str	r0, [r2, #0]
 8006a40:	7019      	strb	r1, [r3, #0]
 8006a42:	4608      	mov	r0, r1
 8006a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <__sfputs_r>:
 8006a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460f      	mov	r7, r1
 8006a50:	4614      	mov	r4, r2
 8006a52:	18d5      	adds	r5, r2, r3
 8006a54:	42ac      	cmp	r4, r5
 8006a56:	d101      	bne.n	8006a5c <__sfputs_r+0x12>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e007      	b.n	8006a6c <__sfputs_r+0x22>
 8006a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a60:	463a      	mov	r2, r7
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7ff ffda 	bl	8006a1c <__sfputc_r>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d1f3      	bne.n	8006a54 <__sfputs_r+0xa>
 8006a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a70 <_vfiprintf_r>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	460d      	mov	r5, r1
 8006a76:	b09d      	sub	sp, #116	; 0x74
 8006a78:	4614      	mov	r4, r2
 8006a7a:	4698      	mov	r8, r3
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	b118      	cbz	r0, 8006a88 <_vfiprintf_r+0x18>
 8006a80:	6a03      	ldr	r3, [r0, #32]
 8006a82:	b90b      	cbnz	r3, 8006a88 <_vfiprintf_r+0x18>
 8006a84:	f7ff fcda 	bl	800643c <__sinit>
 8006a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a8a:	07d9      	lsls	r1, r3, #31
 8006a8c:	d405      	bmi.n	8006a9a <_vfiprintf_r+0x2a>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	059a      	lsls	r2, r3, #22
 8006a92:	d402      	bmi.n	8006a9a <_vfiprintf_r+0x2a>
 8006a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a96:	f7ff fec6 	bl	8006826 <__retarget_lock_acquire_recursive>
 8006a9a:	89ab      	ldrh	r3, [r5, #12]
 8006a9c:	071b      	lsls	r3, r3, #28
 8006a9e:	d501      	bpl.n	8006aa4 <_vfiprintf_r+0x34>
 8006aa0:	692b      	ldr	r3, [r5, #16]
 8006aa2:	b99b      	cbnz	r3, 8006acc <_vfiprintf_r+0x5c>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff fdec 	bl	8006684 <__swsetup_r>
 8006aac:	b170      	cbz	r0, 8006acc <_vfiprintf_r+0x5c>
 8006aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab0:	07dc      	lsls	r4, r3, #31
 8006ab2:	d504      	bpl.n	8006abe <_vfiprintf_r+0x4e>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	b01d      	add	sp, #116	; 0x74
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	0598      	lsls	r0, r3, #22
 8006ac2:	d4f7      	bmi.n	8006ab4 <_vfiprintf_r+0x44>
 8006ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac6:	f7ff feaf 	bl	8006828 <__retarget_lock_release_recursive>
 8006aca:	e7f3      	b.n	8006ab4 <_vfiprintf_r+0x44>
 8006acc:	2300      	movs	r3, #0
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ada:	2330      	movs	r3, #48	; 0x30
 8006adc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006c90 <_vfiprintf_r+0x220>
 8006ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ae4:	f04f 0901 	mov.w	r9, #1
 8006ae8:	4623      	mov	r3, r4
 8006aea:	469a      	mov	sl, r3
 8006aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af0:	b10a      	cbz	r2, 8006af6 <_vfiprintf_r+0x86>
 8006af2:	2a25      	cmp	r2, #37	; 0x25
 8006af4:	d1f9      	bne.n	8006aea <_vfiprintf_r+0x7a>
 8006af6:	ebba 0b04 	subs.w	fp, sl, r4
 8006afa:	d00b      	beq.n	8006b14 <_vfiprintf_r+0xa4>
 8006afc:	465b      	mov	r3, fp
 8006afe:	4622      	mov	r2, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ffa1 	bl	8006a4a <__sfputs_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f000 80a9 	beq.w	8006c60 <_vfiprintf_r+0x1f0>
 8006b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b10:	445a      	add	r2, fp
 8006b12:	9209      	str	r2, [sp, #36]	; 0x24
 8006b14:	f89a 3000 	ldrb.w	r3, [sl]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80a1 	beq.w	8006c60 <_vfiprintf_r+0x1f0>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b28:	f10a 0a01 	add.w	sl, sl, #1
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b34:	931a      	str	r3, [sp, #104]	; 0x68
 8006b36:	4654      	mov	r4, sl
 8006b38:	2205      	movs	r2, #5
 8006b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3e:	4854      	ldr	r0, [pc, #336]	; (8006c90 <_vfiprintf_r+0x220>)
 8006b40:	f7f9 fb1e 	bl	8000180 <memchr>
 8006b44:	9a04      	ldr	r2, [sp, #16]
 8006b46:	b9d8      	cbnz	r0, 8006b80 <_vfiprintf_r+0x110>
 8006b48:	06d1      	lsls	r1, r2, #27
 8006b4a:	bf44      	itt	mi
 8006b4c:	2320      	movmi	r3, #32
 8006b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b52:	0713      	lsls	r3, r2, #28
 8006b54:	bf44      	itt	mi
 8006b56:	232b      	movmi	r3, #43	; 0x2b
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b60:	2b2a      	cmp	r3, #42	; 0x2a
 8006b62:	d015      	beq.n	8006b90 <_vfiprintf_r+0x120>
 8006b64:	9a07      	ldr	r2, [sp, #28]
 8006b66:	4654      	mov	r4, sl
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f04f 0c0a 	mov.w	ip, #10
 8006b6e:	4621      	mov	r1, r4
 8006b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b74:	3b30      	subs	r3, #48	; 0x30
 8006b76:	2b09      	cmp	r3, #9
 8006b78:	d94d      	bls.n	8006c16 <_vfiprintf_r+0x1a6>
 8006b7a:	b1b0      	cbz	r0, 8006baa <_vfiprintf_r+0x13a>
 8006b7c:	9207      	str	r2, [sp, #28]
 8006b7e:	e014      	b.n	8006baa <_vfiprintf_r+0x13a>
 8006b80:	eba0 0308 	sub.w	r3, r0, r8
 8006b84:	fa09 f303 	lsl.w	r3, r9, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	46a2      	mov	sl, r4
 8006b8e:	e7d2      	b.n	8006b36 <_vfiprintf_r+0xc6>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	1d19      	adds	r1, r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	9103      	str	r1, [sp, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bfbb      	ittet	lt
 8006b9c:	425b      	neglt	r3, r3
 8006b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba2:	9307      	strge	r3, [sp, #28]
 8006ba4:	9307      	strlt	r3, [sp, #28]
 8006ba6:	bfb8      	it	lt
 8006ba8:	9204      	strlt	r2, [sp, #16]
 8006baa:	7823      	ldrb	r3, [r4, #0]
 8006bac:	2b2e      	cmp	r3, #46	; 0x2e
 8006bae:	d10c      	bne.n	8006bca <_vfiprintf_r+0x15a>
 8006bb0:	7863      	ldrb	r3, [r4, #1]
 8006bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb4:	d134      	bne.n	8006c20 <_vfiprintf_r+0x1b0>
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	1d1a      	adds	r2, r3, #4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	9203      	str	r2, [sp, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfb8      	it	lt
 8006bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bc6:	3402      	adds	r4, #2
 8006bc8:	9305      	str	r3, [sp, #20]
 8006bca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ca0 <_vfiprintf_r+0x230>
 8006bce:	7821      	ldrb	r1, [r4, #0]
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f7f9 fad4 	bl	8000180 <memchr>
 8006bd8:	b138      	cbz	r0, 8006bea <_vfiprintf_r+0x17a>
 8006bda:	9b04      	ldr	r3, [sp, #16]
 8006bdc:	eba0 000a 	sub.w	r0, r0, sl
 8006be0:	2240      	movs	r2, #64	; 0x40
 8006be2:	4082      	lsls	r2, r0
 8006be4:	4313      	orrs	r3, r2
 8006be6:	3401      	adds	r4, #1
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bee:	4829      	ldr	r0, [pc, #164]	; (8006c94 <_vfiprintf_r+0x224>)
 8006bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf4:	2206      	movs	r2, #6
 8006bf6:	f7f9 fac3 	bl	8000180 <memchr>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d03f      	beq.n	8006c7e <_vfiprintf_r+0x20e>
 8006bfe:	4b26      	ldr	r3, [pc, #152]	; (8006c98 <_vfiprintf_r+0x228>)
 8006c00:	bb1b      	cbnz	r3, 8006c4a <_vfiprintf_r+0x1da>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	3307      	adds	r3, #7
 8006c06:	f023 0307 	bic.w	r3, r3, #7
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	9303      	str	r3, [sp, #12]
 8006c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c10:	443b      	add	r3, r7
 8006c12:	9309      	str	r3, [sp, #36]	; 0x24
 8006c14:	e768      	b.n	8006ae8 <_vfiprintf_r+0x78>
 8006c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	e7a6      	b.n	8006b6e <_vfiprintf_r+0xfe>
 8006c20:	2300      	movs	r3, #0
 8006c22:	3401      	adds	r4, #1
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	4619      	mov	r1, r3
 8006c28:	f04f 0c0a 	mov.w	ip, #10
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c32:	3a30      	subs	r2, #48	; 0x30
 8006c34:	2a09      	cmp	r2, #9
 8006c36:	d903      	bls.n	8006c40 <_vfiprintf_r+0x1d0>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0c6      	beq.n	8006bca <_vfiprintf_r+0x15a>
 8006c3c:	9105      	str	r1, [sp, #20]
 8006c3e:	e7c4      	b.n	8006bca <_vfiprintf_r+0x15a>
 8006c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c44:	4604      	mov	r4, r0
 8006c46:	2301      	movs	r3, #1
 8006c48:	e7f0      	b.n	8006c2c <_vfiprintf_r+0x1bc>
 8006c4a:	ab03      	add	r3, sp, #12
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	462a      	mov	r2, r5
 8006c50:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <_vfiprintf_r+0x22c>)
 8006c52:	a904      	add	r1, sp, #16
 8006c54:	4630      	mov	r0, r6
 8006c56:	f3af 8000 	nop.w
 8006c5a:	4607      	mov	r7, r0
 8006c5c:	1c78      	adds	r0, r7, #1
 8006c5e:	d1d6      	bne.n	8006c0e <_vfiprintf_r+0x19e>
 8006c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c62:	07d9      	lsls	r1, r3, #31
 8006c64:	d405      	bmi.n	8006c72 <_vfiprintf_r+0x202>
 8006c66:	89ab      	ldrh	r3, [r5, #12]
 8006c68:	059a      	lsls	r2, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_vfiprintf_r+0x202>
 8006c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c6e:	f7ff fddb 	bl	8006828 <__retarget_lock_release_recursive>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	065b      	lsls	r3, r3, #25
 8006c76:	f53f af1d 	bmi.w	8006ab4 <_vfiprintf_r+0x44>
 8006c7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c7c:	e71c      	b.n	8006ab8 <_vfiprintf_r+0x48>
 8006c7e:	ab03      	add	r3, sp, #12
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	462a      	mov	r2, r5
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <_vfiprintf_r+0x22c>)
 8006c86:	a904      	add	r1, sp, #16
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f879 	bl	8006d80 <_printf_i>
 8006c8e:	e7e4      	b.n	8006c5a <_vfiprintf_r+0x1ea>
 8006c90:	080077f9 	.word	0x080077f9
 8006c94:	08007803 	.word	0x08007803
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	08006a4b 	.word	0x08006a4b
 8006ca0:	080077ff 	.word	0x080077ff

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	bfb8      	it	lt
 8006cb8:	4613      	movlt	r3, r2
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc26      	bgt.n	8006d3a <_printf_common+0x96>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d42b      	bmi.n	8006d54 <_printf_common+0xb0>
 8006cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d01e      	beq.n	8006d48 <_printf_common+0xa4>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	f003 0306 	and.w	r3, r3, #6
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	bf02      	ittt	eq
 8006d16:	68e5      	ldreq	r5, [r4, #12]
 8006d18:	6833      	ldreq	r3, [r6, #0]
 8006d1a:	1aed      	subeq	r5, r5, r3
 8006d1c:	68a3      	ldr	r3, [r4, #8]
 8006d1e:	bf0c      	ite	eq
 8006d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d24:	2500      	movne	r5, #0
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bfc4      	itt	gt
 8006d2a:	1a9b      	subgt	r3, r3, r2
 8006d2c:	18ed      	addgt	r5, r5, r3
 8006d2e:	2600      	movs	r6, #0
 8006d30:	341a      	adds	r4, #26
 8006d32:	42b5      	cmp	r5, r6
 8006d34:	d11a      	bne.n	8006d6c <_printf_common+0xc8>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e008      	b.n	8006d4c <_printf_common+0xa8>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4638      	mov	r0, r7
 8006d42:	47c0      	blx	r8
 8006d44:	3001      	adds	r0, #1
 8006d46:	d103      	bne.n	8006d50 <_printf_common+0xac>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	3501      	adds	r5, #1
 8006d52:	e7c6      	b.n	8006ce2 <_printf_common+0x3e>
 8006d54:	18e1      	adds	r1, r4, r3
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	2030      	movs	r0, #48	; 0x30
 8006d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d5e:	4422      	add	r2, r4
 8006d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d68:	3302      	adds	r3, #2
 8006d6a:	e7c7      	b.n	8006cfc <_printf_common+0x58>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4622      	mov	r2, r4
 8006d70:	4649      	mov	r1, r9
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0e6      	beq.n	8006d48 <_printf_common+0xa4>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7d9      	b.n	8006d32 <_printf_common+0x8e>
	...

08006d80 <_printf_i>:
 8006d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	7e0f      	ldrb	r7, [r1, #24]
 8006d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d88:	2f78      	cmp	r7, #120	; 0x78
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	469a      	mov	sl, r3
 8006d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d96:	d807      	bhi.n	8006da8 <_printf_i+0x28>
 8006d98:	2f62      	cmp	r7, #98	; 0x62
 8006d9a:	d80a      	bhi.n	8006db2 <_printf_i+0x32>
 8006d9c:	2f00      	cmp	r7, #0
 8006d9e:	f000 80d4 	beq.w	8006f4a <_printf_i+0x1ca>
 8006da2:	2f58      	cmp	r7, #88	; 0x58
 8006da4:	f000 80c0 	beq.w	8006f28 <_printf_i+0x1a8>
 8006da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db0:	e03a      	b.n	8006e28 <_printf_i+0xa8>
 8006db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006db6:	2b15      	cmp	r3, #21
 8006db8:	d8f6      	bhi.n	8006da8 <_printf_i+0x28>
 8006dba:	a101      	add	r1, pc, #4	; (adr r1, 8006dc0 <_printf_i+0x40>)
 8006dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e2d 	.word	0x08006e2d
 8006dc8:	08006da9 	.word	0x08006da9
 8006dcc:	08006da9 	.word	0x08006da9
 8006dd0:	08006da9 	.word	0x08006da9
 8006dd4:	08006da9 	.word	0x08006da9
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006da9 	.word	0x08006da9
 8006de0:	08006da9 	.word	0x08006da9
 8006de4:	08006da9 	.word	0x08006da9
 8006de8:	08006da9 	.word	0x08006da9
 8006dec:	08006f31 	.word	0x08006f31
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006eeb 	.word	0x08006eeb
 8006df8:	08006da9 	.word	0x08006da9
 8006dfc:	08006da9 	.word	0x08006da9
 8006e00:	08006f53 	.word	0x08006f53
 8006e04:	08006da9 	.word	0x08006da9
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006da9 	.word	0x08006da9
 8006e10:	08006da9 	.word	0x08006da9
 8006e14:	08006ef3 	.word	0x08006ef3
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e09f      	b.n	8006f6c <_printf_i+0x1ec>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	0607      	lsls	r7, r0, #24
 8006e32:	f103 0104 	add.w	r1, r3, #4
 8006e36:	6029      	str	r1, [r5, #0]
 8006e38:	d501      	bpl.n	8006e3e <_printf_i+0xbe>
 8006e3a:	681e      	ldr	r6, [r3, #0]
 8006e3c:	e003      	b.n	8006e46 <_printf_i+0xc6>
 8006e3e:	0646      	lsls	r6, r0, #25
 8006e40:	d5fb      	bpl.n	8006e3a <_printf_i+0xba>
 8006e42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	da03      	bge.n	8006e52 <_printf_i+0xd2>
 8006e4a:	232d      	movs	r3, #45	; 0x2d
 8006e4c:	4276      	negs	r6, r6
 8006e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e52:	485a      	ldr	r0, [pc, #360]	; (8006fbc <_printf_i+0x23c>)
 8006e54:	230a      	movs	r3, #10
 8006e56:	e012      	b.n	8006e7e <_printf_i+0xfe>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	1d19      	adds	r1, r3, #4
 8006e5e:	6029      	str	r1, [r5, #0]
 8006e60:	0605      	lsls	r5, r0, #24
 8006e62:	d501      	bpl.n	8006e68 <_printf_i+0xe8>
 8006e64:	681e      	ldr	r6, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <_printf_i+0xee>
 8006e68:	0641      	lsls	r1, r0, #25
 8006e6a:	d5fb      	bpl.n	8006e64 <_printf_i+0xe4>
 8006e6c:	881e      	ldrh	r6, [r3, #0]
 8006e6e:	4853      	ldr	r0, [pc, #332]	; (8006fbc <_printf_i+0x23c>)
 8006e70:	2f6f      	cmp	r7, #111	; 0x6f
 8006e72:	bf0c      	ite	eq
 8006e74:	2308      	moveq	r3, #8
 8006e76:	230a      	movne	r3, #10
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e7e:	6865      	ldr	r5, [r4, #4]
 8006e80:	60a5      	str	r5, [r4, #8]
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	bfa2      	ittt	ge
 8006e86:	6821      	ldrge	r1, [r4, #0]
 8006e88:	f021 0104 	bicge.w	r1, r1, #4
 8006e8c:	6021      	strge	r1, [r4, #0]
 8006e8e:	b90e      	cbnz	r6, 8006e94 <_printf_i+0x114>
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	d04b      	beq.n	8006f2c <_printf_i+0x1ac>
 8006e94:	4615      	mov	r5, r2
 8006e96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006e9e:	5dc7      	ldrb	r7, [r0, r7]
 8006ea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ea4:	4637      	mov	r7, r6
 8006ea6:	42bb      	cmp	r3, r7
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	d9f4      	bls.n	8006e96 <_printf_i+0x116>
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d10b      	bne.n	8006ec8 <_printf_i+0x148>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	07de      	lsls	r6, r3, #31
 8006eb4:	d508      	bpl.n	8006ec8 <_printf_i+0x148>
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	6861      	ldr	r1, [r4, #4]
 8006eba:	4299      	cmp	r1, r3
 8006ebc:	bfde      	ittt	le
 8006ebe:	2330      	movle	r3, #48	; 0x30
 8006ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ec8:	1b52      	subs	r2, r2, r5
 8006eca:	6122      	str	r2, [r4, #16]
 8006ecc:	f8cd a000 	str.w	sl, [sp]
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	aa03      	add	r2, sp, #12
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7ff fee4 	bl	8006ca4 <_printf_common>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d14a      	bne.n	8006f76 <_printf_i+0x1f6>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	b004      	add	sp, #16
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	f043 0320 	orr.w	r3, r3, #32
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	4833      	ldr	r0, [pc, #204]	; (8006fc0 <_printf_i+0x240>)
 8006ef4:	2778      	movs	r7, #120	; 0x78
 8006ef6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	6829      	ldr	r1, [r5, #0]
 8006efe:	061f      	lsls	r7, r3, #24
 8006f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f04:	d402      	bmi.n	8006f0c <_printf_i+0x18c>
 8006f06:	065f      	lsls	r7, r3, #25
 8006f08:	bf48      	it	mi
 8006f0a:	b2b6      	uxthmi	r6, r6
 8006f0c:	07df      	lsls	r7, r3, #31
 8006f0e:	bf48      	it	mi
 8006f10:	f043 0320 	orrmi.w	r3, r3, #32
 8006f14:	6029      	str	r1, [r5, #0]
 8006f16:	bf48      	it	mi
 8006f18:	6023      	strmi	r3, [r4, #0]
 8006f1a:	b91e      	cbnz	r6, 8006f24 <_printf_i+0x1a4>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	f023 0320 	bic.w	r3, r3, #32
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	2310      	movs	r3, #16
 8006f26:	e7a7      	b.n	8006e78 <_printf_i+0xf8>
 8006f28:	4824      	ldr	r0, [pc, #144]	; (8006fbc <_printf_i+0x23c>)
 8006f2a:	e7e4      	b.n	8006ef6 <_printf_i+0x176>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	e7bd      	b.n	8006eac <_printf_i+0x12c>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	6826      	ldr	r6, [r4, #0]
 8006f34:	6961      	ldr	r1, [r4, #20]
 8006f36:	1d18      	adds	r0, r3, #4
 8006f38:	6028      	str	r0, [r5, #0]
 8006f3a:	0635      	lsls	r5, r6, #24
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	d501      	bpl.n	8006f44 <_printf_i+0x1c4>
 8006f40:	6019      	str	r1, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <_printf_i+0x1ca>
 8006f44:	0670      	lsls	r0, r6, #25
 8006f46:	d5fb      	bpl.n	8006f40 <_printf_i+0x1c0>
 8006f48:	8019      	strh	r1, [r3, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	4615      	mov	r5, r2
 8006f50:	e7bc      	b.n	8006ecc <_printf_i+0x14c>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	602a      	str	r2, [r5, #0]
 8006f58:	681d      	ldr	r5, [r3, #0]
 8006f5a:	6862      	ldr	r2, [r4, #4]
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7f9 f90e 	bl	8000180 <memchr>
 8006f64:	b108      	cbz	r0, 8006f6a <_printf_i+0x1ea>
 8006f66:	1b40      	subs	r0, r0, r5
 8006f68:	6060      	str	r0, [r4, #4]
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f74:	e7aa      	b.n	8006ecc <_printf_i+0x14c>
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	462a      	mov	r2, r5
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	47d0      	blx	sl
 8006f80:	3001      	adds	r0, #1
 8006f82:	d0ad      	beq.n	8006ee0 <_printf_i+0x160>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	079b      	lsls	r3, r3, #30
 8006f88:	d413      	bmi.n	8006fb2 <_printf_i+0x232>
 8006f8a:	68e0      	ldr	r0, [r4, #12]
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	bfb8      	it	lt
 8006f92:	4618      	movlt	r0, r3
 8006f94:	e7a6      	b.n	8006ee4 <_printf_i+0x164>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	47d0      	blx	sl
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d09d      	beq.n	8006ee0 <_printf_i+0x160>
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	68e3      	ldr	r3, [r4, #12]
 8006fa8:	9903      	ldr	r1, [sp, #12]
 8006faa:	1a5b      	subs	r3, r3, r1
 8006fac:	42ab      	cmp	r3, r5
 8006fae:	dcf2      	bgt.n	8006f96 <_printf_i+0x216>
 8006fb0:	e7eb      	b.n	8006f8a <_printf_i+0x20a>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	f104 0619 	add.w	r6, r4, #25
 8006fb8:	e7f5      	b.n	8006fa6 <_printf_i+0x226>
 8006fba:	bf00      	nop
 8006fbc:	0800780a 	.word	0x0800780a
 8006fc0:	0800781b 	.word	0x0800781b

08006fc4 <__sflush_r>:
 8006fc4:	898a      	ldrh	r2, [r1, #12]
 8006fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	4605      	mov	r5, r0
 8006fcc:	0710      	lsls	r0, r2, #28
 8006fce:	460c      	mov	r4, r1
 8006fd0:	d458      	bmi.n	8007084 <__sflush_r+0xc0>
 8006fd2:	684b      	ldr	r3, [r1, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dc05      	bgt.n	8006fe4 <__sflush_r+0x20>
 8006fd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dc02      	bgt.n	8006fe4 <__sflush_r+0x20>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fe6:	2e00      	cmp	r6, #0
 8006fe8:	d0f9      	beq.n	8006fde <__sflush_r+0x1a>
 8006fea:	2300      	movs	r3, #0
 8006fec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ff0:	682f      	ldr	r7, [r5, #0]
 8006ff2:	6a21      	ldr	r1, [r4, #32]
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	d032      	beq.n	800705e <__sflush_r+0x9a>
 8006ff8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	075a      	lsls	r2, r3, #29
 8006ffe:	d505      	bpl.n	800700c <__sflush_r+0x48>
 8007000:	6863      	ldr	r3, [r4, #4]
 8007002:	1ac0      	subs	r0, r0, r3
 8007004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007006:	b10b      	cbz	r3, 800700c <__sflush_r+0x48>
 8007008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800700a:	1ac0      	subs	r0, r0, r3
 800700c:	2300      	movs	r3, #0
 800700e:	4602      	mov	r2, r0
 8007010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007012:	6a21      	ldr	r1, [r4, #32]
 8007014:	4628      	mov	r0, r5
 8007016:	47b0      	blx	r6
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	d106      	bne.n	800702c <__sflush_r+0x68>
 800701e:	6829      	ldr	r1, [r5, #0]
 8007020:	291d      	cmp	r1, #29
 8007022:	d82b      	bhi.n	800707c <__sflush_r+0xb8>
 8007024:	4a29      	ldr	r2, [pc, #164]	; (80070cc <__sflush_r+0x108>)
 8007026:	410a      	asrs	r2, r1
 8007028:	07d6      	lsls	r6, r2, #31
 800702a:	d427      	bmi.n	800707c <__sflush_r+0xb8>
 800702c:	2200      	movs	r2, #0
 800702e:	6062      	str	r2, [r4, #4]
 8007030:	04d9      	lsls	r1, r3, #19
 8007032:	6922      	ldr	r2, [r4, #16]
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	d504      	bpl.n	8007042 <__sflush_r+0x7e>
 8007038:	1c42      	adds	r2, r0, #1
 800703a:	d101      	bne.n	8007040 <__sflush_r+0x7c>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b903      	cbnz	r3, 8007042 <__sflush_r+0x7e>
 8007040:	6560      	str	r0, [r4, #84]	; 0x54
 8007042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007044:	602f      	str	r7, [r5, #0]
 8007046:	2900      	cmp	r1, #0
 8007048:	d0c9      	beq.n	8006fde <__sflush_r+0x1a>
 800704a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800704e:	4299      	cmp	r1, r3
 8007050:	d002      	beq.n	8007058 <__sflush_r+0x94>
 8007052:	4628      	mov	r0, r5
 8007054:	f7ff fbea 	bl	800682c <_free_r>
 8007058:	2000      	movs	r0, #0
 800705a:	6360      	str	r0, [r4, #52]	; 0x34
 800705c:	e7c0      	b.n	8006fe0 <__sflush_r+0x1c>
 800705e:	2301      	movs	r3, #1
 8007060:	4628      	mov	r0, r5
 8007062:	47b0      	blx	r6
 8007064:	1c41      	adds	r1, r0, #1
 8007066:	d1c8      	bne.n	8006ffa <__sflush_r+0x36>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0c5      	beq.n	8006ffa <__sflush_r+0x36>
 800706e:	2b1d      	cmp	r3, #29
 8007070:	d001      	beq.n	8007076 <__sflush_r+0xb2>
 8007072:	2b16      	cmp	r3, #22
 8007074:	d101      	bne.n	800707a <__sflush_r+0xb6>
 8007076:	602f      	str	r7, [r5, #0]
 8007078:	e7b1      	b.n	8006fde <__sflush_r+0x1a>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	e7ad      	b.n	8006fe0 <__sflush_r+0x1c>
 8007084:	690f      	ldr	r7, [r1, #16]
 8007086:	2f00      	cmp	r7, #0
 8007088:	d0a9      	beq.n	8006fde <__sflush_r+0x1a>
 800708a:	0793      	lsls	r3, r2, #30
 800708c:	680e      	ldr	r6, [r1, #0]
 800708e:	bf08      	it	eq
 8007090:	694b      	ldreq	r3, [r1, #20]
 8007092:	600f      	str	r7, [r1, #0]
 8007094:	bf18      	it	ne
 8007096:	2300      	movne	r3, #0
 8007098:	eba6 0807 	sub.w	r8, r6, r7
 800709c:	608b      	str	r3, [r1, #8]
 800709e:	f1b8 0f00 	cmp.w	r8, #0
 80070a2:	dd9c      	ble.n	8006fde <__sflush_r+0x1a>
 80070a4:	6a21      	ldr	r1, [r4, #32]
 80070a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070a8:	4643      	mov	r3, r8
 80070aa:	463a      	mov	r2, r7
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b0      	blx	r6
 80070b0:	2800      	cmp	r0, #0
 80070b2:	dc06      	bgt.n	80070c2 <__sflush_r+0xfe>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	e78e      	b.n	8006fe0 <__sflush_r+0x1c>
 80070c2:	4407      	add	r7, r0
 80070c4:	eba8 0800 	sub.w	r8, r8, r0
 80070c8:	e7e9      	b.n	800709e <__sflush_r+0xda>
 80070ca:	bf00      	nop
 80070cc:	dfbffffe 	.word	0xdfbffffe

080070d0 <_fflush_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	690b      	ldr	r3, [r1, #16]
 80070d4:	4605      	mov	r5, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	b913      	cbnz	r3, 80070e0 <_fflush_r+0x10>
 80070da:	2500      	movs	r5, #0
 80070dc:	4628      	mov	r0, r5
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	b118      	cbz	r0, 80070ea <_fflush_r+0x1a>
 80070e2:	6a03      	ldr	r3, [r0, #32]
 80070e4:	b90b      	cbnz	r3, 80070ea <_fflush_r+0x1a>
 80070e6:	f7ff f9a9 	bl	800643c <__sinit>
 80070ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f3      	beq.n	80070da <_fflush_r+0xa>
 80070f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070f4:	07d0      	lsls	r0, r2, #31
 80070f6:	d404      	bmi.n	8007102 <_fflush_r+0x32>
 80070f8:	0599      	lsls	r1, r3, #22
 80070fa:	d402      	bmi.n	8007102 <_fflush_r+0x32>
 80070fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070fe:	f7ff fb92 	bl	8006826 <__retarget_lock_acquire_recursive>
 8007102:	4628      	mov	r0, r5
 8007104:	4621      	mov	r1, r4
 8007106:	f7ff ff5d 	bl	8006fc4 <__sflush_r>
 800710a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800710c:	07da      	lsls	r2, r3, #31
 800710e:	4605      	mov	r5, r0
 8007110:	d4e4      	bmi.n	80070dc <_fflush_r+0xc>
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	059b      	lsls	r3, r3, #22
 8007116:	d4e1      	bmi.n	80070dc <_fflush_r+0xc>
 8007118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800711a:	f7ff fb85 	bl	8006828 <__retarget_lock_release_recursive>
 800711e:	e7dd      	b.n	80070dc <_fflush_r+0xc>

08007120 <__swhatbuf_r>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	460c      	mov	r4, r1
 8007124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007128:	2900      	cmp	r1, #0
 800712a:	b096      	sub	sp, #88	; 0x58
 800712c:	4615      	mov	r5, r2
 800712e:	461e      	mov	r6, r3
 8007130:	da0d      	bge.n	800714e <__swhatbuf_r+0x2e>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	bf0c      	ite	eq
 800713e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007142:	2340      	movne	r3, #64	; 0x40
 8007144:	2000      	movs	r0, #0
 8007146:	6031      	str	r1, [r6, #0]
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	b016      	add	sp, #88	; 0x58
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	466a      	mov	r2, sp
 8007150:	f000 f848 	bl	80071e4 <_fstat_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	dbec      	blt.n	8007132 <__swhatbuf_r+0x12>
 8007158:	9901      	ldr	r1, [sp, #4]
 800715a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800715e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007162:	4259      	negs	r1, r3
 8007164:	4159      	adcs	r1, r3
 8007166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800716a:	e7eb      	b.n	8007144 <__swhatbuf_r+0x24>

0800716c <__smakebuf_r>:
 800716c:	898b      	ldrh	r3, [r1, #12]
 800716e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007170:	079d      	lsls	r5, r3, #30
 8007172:	4606      	mov	r6, r0
 8007174:	460c      	mov	r4, r1
 8007176:	d507      	bpl.n	8007188 <__smakebuf_r+0x1c>
 8007178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	2301      	movs	r3, #1
 8007182:	6163      	str	r3, [r4, #20]
 8007184:	b002      	add	sp, #8
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	ab01      	add	r3, sp, #4
 800718a:	466a      	mov	r2, sp
 800718c:	f7ff ffc8 	bl	8007120 <__swhatbuf_r>
 8007190:	9900      	ldr	r1, [sp, #0]
 8007192:	4605      	mov	r5, r0
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff fbb5 	bl	8006904 <_malloc_r>
 800719a:	b948      	cbnz	r0, 80071b0 <__smakebuf_r+0x44>
 800719c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a0:	059a      	lsls	r2, r3, #22
 80071a2:	d4ef      	bmi.n	8007184 <__smakebuf_r+0x18>
 80071a4:	f023 0303 	bic.w	r3, r3, #3
 80071a8:	f043 0302 	orr.w	r3, r3, #2
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	e7e3      	b.n	8007178 <__smakebuf_r+0xc>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	6020      	str	r0, [r4, #0]
 80071b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	9b00      	ldr	r3, [sp, #0]
 80071bc:	6163      	str	r3, [r4, #20]
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	6120      	str	r0, [r4, #16]
 80071c2:	b15b      	cbz	r3, 80071dc <__smakebuf_r+0x70>
 80071c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c8:	4630      	mov	r0, r6
 80071ca:	f000 f81d 	bl	8007208 <_isatty_r>
 80071ce:	b128      	cbz	r0, 80071dc <__smakebuf_r+0x70>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	431d      	orrs	r5, r3
 80071e0:	81a5      	strh	r5, [r4, #12]
 80071e2:	e7cf      	b.n	8007184 <__smakebuf_r+0x18>

080071e4 <_fstat_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	; (8007204 <_fstat_r+0x20>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7fa fa5a 	bl	80016aa <_fstat>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_fstat_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_fstat_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	20001064 	.word	0x20001064

08007208 <_isatty_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d06      	ldr	r5, [pc, #24]	; (8007224 <_isatty_r+0x1c>)
 800720c:	2300      	movs	r3, #0
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7fa fa59 	bl	80016ca <_isatty>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_isatty_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_isatty_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20001064 	.word	0x20001064

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	; (8007244 <_sbrk_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fa fa62 	bl	80016fc <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20001064 	.word	0x20001064

08007248 <floor>:
 8007248:	ec51 0b10 	vmov	r0, r1, d0
 800724c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007258:	2e13      	cmp	r6, #19
 800725a:	ee10 5a10 	vmov	r5, s0
 800725e:	ee10 8a10 	vmov	r8, s0
 8007262:	460c      	mov	r4, r1
 8007264:	dc31      	bgt.n	80072ca <floor+0x82>
 8007266:	2e00      	cmp	r6, #0
 8007268:	da14      	bge.n	8007294 <floor+0x4c>
 800726a:	a333      	add	r3, pc, #204	; (adr r3, 8007338 <floor+0xf0>)
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f7f8 ffdc 	bl	800022c <__adddf3>
 8007274:	2200      	movs	r2, #0
 8007276:	2300      	movs	r3, #0
 8007278:	f7f9 fa0c 	bl	8000694 <__aeabi_dcmpgt>
 800727c:	b138      	cbz	r0, 800728e <floor+0x46>
 800727e:	2c00      	cmp	r4, #0
 8007280:	da53      	bge.n	800732a <floor+0xe2>
 8007282:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007286:	4325      	orrs	r5, r4
 8007288:	d052      	beq.n	8007330 <floor+0xe8>
 800728a:	4c2d      	ldr	r4, [pc, #180]	; (8007340 <floor+0xf8>)
 800728c:	2500      	movs	r5, #0
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	e024      	b.n	80072de <floor+0x96>
 8007294:	4f2b      	ldr	r7, [pc, #172]	; (8007344 <floor+0xfc>)
 8007296:	4137      	asrs	r7, r6
 8007298:	ea01 0307 	and.w	r3, r1, r7
 800729c:	4303      	orrs	r3, r0
 800729e:	d01e      	beq.n	80072de <floor+0x96>
 80072a0:	a325      	add	r3, pc, #148	; (adr r3, 8007338 <floor+0xf0>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f8 ffc1 	bl	800022c <__adddf3>
 80072aa:	2200      	movs	r2, #0
 80072ac:	2300      	movs	r3, #0
 80072ae:	f7f9 f9f1 	bl	8000694 <__aeabi_dcmpgt>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d0eb      	beq.n	800728e <floor+0x46>
 80072b6:	2c00      	cmp	r4, #0
 80072b8:	bfbe      	ittt	lt
 80072ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80072be:	4133      	asrlt	r3, r6
 80072c0:	18e4      	addlt	r4, r4, r3
 80072c2:	ea24 0407 	bic.w	r4, r4, r7
 80072c6:	2500      	movs	r5, #0
 80072c8:	e7e1      	b.n	800728e <floor+0x46>
 80072ca:	2e33      	cmp	r6, #51	; 0x33
 80072cc:	dd0b      	ble.n	80072e6 <floor+0x9e>
 80072ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072d2:	d104      	bne.n	80072de <floor+0x96>
 80072d4:	ee10 2a10 	vmov	r2, s0
 80072d8:	460b      	mov	r3, r1
 80072da:	f7f8 ffa7 	bl	800022c <__adddf3>
 80072de:	ec41 0b10 	vmov	d0, r0, r1
 80072e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80072ea:	f04f 37ff 	mov.w	r7, #4294967295
 80072ee:	40df      	lsrs	r7, r3
 80072f0:	4238      	tst	r0, r7
 80072f2:	d0f4      	beq.n	80072de <floor+0x96>
 80072f4:	a310      	add	r3, pc, #64	; (adr r3, 8007338 <floor+0xf0>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ff97 	bl	800022c <__adddf3>
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	f7f9 f9c7 	bl	8000694 <__aeabi_dcmpgt>
 8007306:	2800      	cmp	r0, #0
 8007308:	d0c1      	beq.n	800728e <floor+0x46>
 800730a:	2c00      	cmp	r4, #0
 800730c:	da0a      	bge.n	8007324 <floor+0xdc>
 800730e:	2e14      	cmp	r6, #20
 8007310:	d101      	bne.n	8007316 <floor+0xce>
 8007312:	3401      	adds	r4, #1
 8007314:	e006      	b.n	8007324 <floor+0xdc>
 8007316:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800731a:	2301      	movs	r3, #1
 800731c:	40b3      	lsls	r3, r6
 800731e:	441d      	add	r5, r3
 8007320:	45a8      	cmp	r8, r5
 8007322:	d8f6      	bhi.n	8007312 <floor+0xca>
 8007324:	ea25 0507 	bic.w	r5, r5, r7
 8007328:	e7b1      	b.n	800728e <floor+0x46>
 800732a:	2500      	movs	r5, #0
 800732c:	462c      	mov	r4, r5
 800732e:	e7ae      	b.n	800728e <floor+0x46>
 8007330:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007334:	e7ab      	b.n	800728e <floor+0x46>
 8007336:	bf00      	nop
 8007338:	8800759c 	.word	0x8800759c
 800733c:	7e37e43c 	.word	0x7e37e43c
 8007340:	bff00000 	.word	0xbff00000
 8007344:	000fffff 	.word	0x000fffff

08007348 <_init>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr

08007354 <_fini>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	bf00      	nop
 8007358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735a:	bc08      	pop	{r3}
 800735c:	469e      	mov	lr, r3
 800735e:	4770      	bx	lr

08007360 <__FLASH_Program_Fast_veneer>:
 8007360:	f85f f000 	ldr.w	pc, [pc]	; 8007364 <__FLASH_Program_Fast_veneer+0x4>
 8007364:	20000071 	.word	0x20000071

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <uwTickPrio>:
2000000c:	00000010                                ....

20000010 <uwTickFreq>:
20000010:	00000001                                ....

20000014 <__sglue>:
20000014:	00000000 00000003 20000f28              ........(.. 

20000020 <_impure_data>:
20000020:	00000000 20000f28 20000f90 20000ff8     ....(.. ... ... 
	...

2000006c <_impure_ptr>:
2000006c:	20000020                                 .. 

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b480      	push	{r7}
20000072:	b089      	sub	sp, #36	; 0x24
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000007a:	2380      	movs	r3, #128	; 0x80
2000007c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000082:	683b      	ldr	r3, [r7, #0]
20000084:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000086:	4b18      	ldr	r3, [pc, #96]	; (200000e8 <FLASH_Program_Fast+0x78>)
20000088:	695b      	ldr	r3, [r3, #20]
2000008a:	4a17      	ldr	r2, [pc, #92]	; (200000e8 <FLASH_Program_Fast+0x78>)
2000008c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000090:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000092:	f3ef 8310 	mrs	r3, PRIMASK
20000096:	60fb      	str	r3, [r7, #12]
  return(result);
20000098:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000009a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000009c:	b672      	cpsid	i
}
2000009e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000a0:	697b      	ldr	r3, [r7, #20]
200000a2:	681a      	ldr	r2, [r3, #0]
200000a4:	69bb      	ldr	r3, [r7, #24]
200000a6:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000a8:	69bb      	ldr	r3, [r7, #24]
200000aa:	3304      	adds	r3, #4
200000ac:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000ae:	697b      	ldr	r3, [r7, #20]
200000b0:	3304      	adds	r3, #4
200000b2:	617b      	str	r3, [r7, #20]
    row_index--;
200000b4:	7ffb      	ldrb	r3, [r7, #31]
200000b6:	3b01      	subs	r3, #1
200000b8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
200000ba:	7ffb      	ldrb	r3, [r7, #31]
200000bc:	2b00      	cmp	r3, #0
200000be:	d1ef      	bne.n	200000a0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000c0:	bf00      	nop
200000c2:	4b09      	ldr	r3, [pc, #36]	; (200000e8 <FLASH_Program_Fast+0x78>)
200000c4:	691b      	ldr	r3, [r3, #16]
200000c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200000ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200000ce:	d0f8      	beq.n	200000c2 <FLASH_Program_Fast+0x52>
200000d0:	693b      	ldr	r3, [r7, #16]
200000d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000d4:	68bb      	ldr	r3, [r7, #8]
200000d6:	f383 8810 	msr	PRIMASK, r3
}
200000da:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000dc:	bf00      	nop
200000de:	3724      	adds	r7, #36	; 0x24
200000e0:	46bd      	mov	sp, r7
200000e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200000e6:	4770      	bx	lr
200000e8:	58004000 	.word	0x58004000
